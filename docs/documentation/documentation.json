{
    "pipes": [],
    "interfaces": [
        {
            "name": "Atleta",
            "id": "interface-Atleta-568df35ab2fcf24c596ef160df8f8af044e3dd0c57eb5e6541ffe77a0662f3aab2957b064d236724d8bb23c76ab3ee1e8ebbe0361dc12a9ae658a7b987c346a4",
            "file": "GiConnect/src/app/pages/pasar-lista/pasar-lista.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { ClaseService } from '../../services/clase.service';\nimport { AlertController } from '@ionic/angular';\nimport { ToastController } from '@ionic/angular';\nimport { firstValueFrom } from 'rxjs';\n\ninterface Atleta {\n  _id: string;\n  nombre: string;\n  apellidos: string;\n  foto?: string;\n}\n\ninterface Reserva {\n  _id: string;\n  atleta: Atleta;\n  status: string;\n  asistenciaConfirmada: boolean;\n}\n\ninterface Clase {\n  _id: string;\n  titulo: string;\n  instructor: {\n    nombre: string;\n    apellidos: string;\n    foto?: string;\n  };\n  horaInicio: string;\n  horaFin: string;\n  fecha: string;\n  reservas: Reserva[];\n  supervisada: boolean;\n}\n\n@Component({\n  selector: 'app-pasar-lista',\n  templateUrl: './pasar-lista.page.html',\n  styleUrls: ['./pasar-lista.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, FormsModule, RouterModule]\n})\nexport class PasarListaPage implements OnInit {\n  clases: Clase[] = [];\n  loading: boolean = true;\n  error: string | null = null;\n\n  constructor(\n    private claseService: ClaseService,\n    private alertController: AlertController,\n    private toastController: ToastController\n  ) { }\n\n  ngOnInit() {\n    this.cargarClases();\n  }\n\n  cargarClases() {\n    this.loading = true;\n    this.error = null;\n\n    this.claseService.getClasesParaPasarLista().subscribe({\n      next: (response) => {\n        console.log('=== FRONTEND DEBUG === Clases recibidas:', response);\n        this.clases = response;\n        this.clases.forEach(clase => {\n          console.log(`=== FRONTEND DEBUG === Clase \"${clase.titulo}\":`, {\n            id: clase._id,\n            reservas: clase.reservas.length,\n            reservasDetalle: clase.reservas.map(r => ({\n              id: r._id,\n              atleta: r.atleta.nombre + ' ' + r.atleta.apellidos,\n              status: r.status\n            }))\n          });\n        });\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Error al cargar las clases:', error);\n        this.error = 'Error al cargar las clases. Por favor, int√©ntalo de nuevo.';\n        this.loading = false;\n      }\n    });\n  }\n\n  marcarTodos(clase: Clase) {\n    clase.reservas.forEach(reserva => {\n      reserva.asistenciaConfirmada = true;\n    });\n  }\n\n  async confirmarAsistencia(clase: Clase) {\n    const alert = await this.alertController.create({\n      header: 'Confirmar Asistencia',\n      message: '¬øEst√°s seguro de que quieres confirmar la asistencia de esta clase?',\n      cssClass: 'custom-alert',\n      buttons: [\n        {\n          text: 'No',\n          role: 'cancel',\n          cssClass: 'alert-button-cancel'\n        },\n        {\n          text: 'S√≠',\n          cssClass: 'alert-button-confirm',\n          handler: () => {\n            this.procesarAsistencia(clase);\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  private async procesarAsistencia(clase: Clase) {\n    try {\n      console.log('Procesando asistencia para clase:', clase);\n      \n      const reservasActualizadas = clase.reservas.map(reserva => {\n        console.log('Reserva:', reserva);\n        return {\n          reservaId: reserva._id,\n          status: 'confirmada',\n          asistenciaConfirmada: reserva.asistenciaConfirmada\n        };\n      });\n\n      console.log('Reservas a actualizar:', reservasActualizadas);\n\n      if (reservasActualizadas.length === 0) {\n        console.error('No hay reservas para actualizar');\n        return;\n      }\n\n      const claseActualizada = await firstValueFrom(this.claseService.confirmarAsistencia(clase._id, {\n        reservas: reservasActualizadas,\n        supervisada: true\n      }));\n\n      if (claseActualizada) {\n        // Actualizar la clase en el array local\n        const index = this.clases.findIndex(c => c._id === clase._id);\n        if (index !== -1) {\n          this.clases[index] = claseActualizada;\n        }\n\n        // Mostrar mensaje de √©xito\n        const toast = await this.toastController.create({\n          message: 'Asistencia confirmada correctamente',\n          duration: 2000,\n          position: 'bottom',\n          color: 'success'\n        });\n        await toast.present();\n      }\n    } catch (error) {\n      console.error('Error al procesar asistencia:', error);\n      \n      // Mostrar mensaje de error\n      const toast = await this.toastController.create({\n        message: 'Error al confirmar la asistencia',\n        duration: 2000,\n        position: 'bottom',\n        color: 'danger'\n      });\n      await toast.present();\n    }\n  }\n\n  onImageError(event: Event) {\n    const img = event.target as HTMLImageElement;\n    img.src = 'assets/icon/avatar.svg';\n  }\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "apellidos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthResponse",
            "id": "interface-AuthResponse-8140bf91b4312c778bfd5149cdc826f83ef3ec1c5839b6ac82d14aa4a7c1bb0b88edfda30126df4b5043b1021504e72effde736de07b8ffb7b2e0a2316879eea",
            "file": "GiConnect/src/app/services/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { Platform } from '@ionic/angular';\nimport { catchError } from 'rxjs/operators';\n\ninterface AuthResponse {\n  token: string;\n  user: {\n    _id: string;\n    email: string;\n    nombre: string;\n    apellido1: string;\n    apellido2?: string;\n    role: string;\n    [key: string]: any;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl: string;\n  private userSubject = new BehaviorSubject<any>(null);\n  public user$ = this.userSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private platform: Platform\n  ) {\n    // Usar la URL de producci√≥n para todas las plataformas\n    this.apiUrl = 'https://giconnect-production.up.railway.app/api';\n    console.log('üåê URL base configurada:', this.apiUrl);\n    console.log('üì± Plataforma:', this.platform.platforms());\n    \n    // Inicializar el estado del usuario\n    this.checkStoredUser();\n  }\n\n  private checkStoredUser() {\n    const user = localStorage.getItem('user');\n    if (user) {\n      this.userSubject.next(JSON.parse(user));\n    }\n  }\n\n  async login(credentials: { email: string; password: string }) {\n    try {\n      console.log('üìù Intentando login con:', credentials);\n      console.log('üåê URL completa:', `${this.apiUrl}/auth/login`);\n      console.log('üîß Platform:', this.platform.platforms());\n      console.log('üì± Es Android:', this.platform.is('android'));\n      console.log('üçé Es iOS:', this.platform.is('ios'));\n      \n      if (!credentials.email || !credentials.password) {\n        throw new Error('Por favor, completa todos los campos');\n      }\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      });\n\n      console.log('üì§ Headers:', headers);\n      console.log('üì¶ Body:', JSON.stringify(credentials));\n\n      const response = await firstValueFrom(\n        this.http.post<AuthResponse>(\n          `${this.apiUrl}/auth/login`,\n          credentials,\n          { \n            headers,\n            withCredentials: true\n          }\n        ).pipe(\n          catchError((error: HttpErrorResponse) => {\n            console.error('‚ùå Error en la petici√≥n:', {\n              status: error.status,\n              statusText: error.statusText,\n              error: error.error,\n              url: error.url,\n              headers: error.headers,\n              message: error.message,\n              platform: this.platform.platforms(),\n              isAndroid: this.platform.is('android'),\n              isIOS: this.platform.is('ios')\n            });\n            throw error;\n          })\n        )\n      );\n\n      console.log('üì• Respuesta del servidor:', response);\n\n      if (response && response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        this.userSubject.next(response.user);\n        return response;\n      } else {\n        throw new Error('Respuesta del servidor inv√°lida');\n      }\n    } catch (error: any) {\n      console.error('‚ùå Error en login:', error);\n      if (error instanceof HttpErrorResponse) {\n        console.error('Detalles del error:', {\n          status: error.status,\n          statusText: error.statusText,\n          error: error.error,\n          url: error.url,\n          headers: error.headers\n        });\n        if (error.status === 401) {\n          throw new Error('Credenciales inv√°lidas');\n        } else if (error.status === 400) {\n          throw new Error(error.error?.error || 'Datos de entrada inv√°lidos');\n        }\n      }\n      throw new Error(error.message || 'Error al iniciar sesi√≥n');\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async register(userData: any) {\n    try {\n      console.log('üìù Intentando registro con:', userData);\n      console.log('üåê URL:', `${this.apiUrl}/auth/register`);\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n\n      console.log('üì§ Headers:', headers);\n      console.log('üì¶ Datos a enviar:', JSON.stringify(userData, null, 2));\n\n      const response = await firstValueFrom(\n        this.http.post<AuthResponse>(\n          `${this.apiUrl}/auth/register`,\n          userData,\n          { headers }\n        )\n      );\n\n      console.log('üì• Respuesta del servidor:', response);\n\n      if (response && response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        return response;\n      }\n      throw new Error('Error en el registro');\n    } catch (error: any) {\n      console.error('‚ùå Error en registro:', error);\n      if (error instanceof HttpErrorResponse) {\n        console.error('Detalles del error:', {\n          status: error.status,\n          statusText: error.statusText,\n          error: error.error,\n          url: error.url,\n          headers: error.headers\n        });\n        \n        if (error.status === 400) {\n          const errorMessage = error.error?.error || error.error?.message || '';\n          console.log('Mensaje de error recibido:', errorMessage);\n          console.log('Error completo:', JSON.stringify(error.error, null, 2));\n          \n          if (error.error?.errors) {\n            const validationErrors = error.error.errors;\n            const errorMessages = Object.values(validationErrors).map((err: any) => err.message);\n            throw new Error(errorMessages.join(', '));\n          }\n          \n          if (errorMessage.toLowerCase().includes('dni')) {\n            throw new Error('Ya existe un usuario con este DNI');\n          } else if (errorMessage.toLowerCase().includes('telefono')) {\n            throw new Error('Ya existe un usuario con este tel√©fono');\n          } else if (errorMessage.toLowerCase().includes('email')) {\n            throw new Error('Ya existe un usuario con este email');\n          }\n          throw new Error(errorMessage || 'Datos de entrada inv√°lidos');\n        }\n      }\n      throw new Error(error.message || 'Error en el registro');\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.userSubject.next(null);\n    // Limpiar el formulario de login\n    const loginForm = document.querySelector('app-login form');\n    if (loginForm) {\n      (loginForm as HTMLFormElement).reset();\n    }\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  getUser(): any {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  // Solicitar recuperaci√≥n de contrase√±a\n  requestPasswordReset(email: string): Observable<any> {\n    console.log('üåê URL de recuperaci√≥n:', `${this.apiUrl}/auth/request-password-reset`);\n    return this.http.post(`${this.apiUrl}/auth/request-password-reset`, { email });\n  }\n\n  // Verificar c√≥digo y actualizar contrase√±a\n  resetPassword(email: string, code: string, newPassword: string): Observable<any> {\n    console.log('üåê URL de reset:', `${this.apiUrl}/auth/reset-password`);\n    return this.http.post(`${this.apiUrl}/auth/reset-password`, {\n      email,\n      code,\n      newPassword\n    });\n  }\n\n  async compressImage(base64String: string, maxWidth: number = 600): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = base64String;\n      \n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        let width = img.width;\n        let height = img.height;\n        \n        // Calcular nuevas dimensiones manteniendo la proporci√≥n\n        if (width > maxWidth) {\n          height = Math.round((height * maxWidth) / width);\n          width = maxWidth;\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          reject(new Error('No se pudo crear el contexto del canvas'));\n          return;\n        }\n        \n        // Dibujar la imagen redimensionada\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // Funci√≥n para comprimir con diferentes calidades hasta alcanzar el tama√±o deseado\n        const compressWithQuality = (quality: number): string => {\n          return canvas.toDataURL('image/jpeg', quality);\n        };\n\n        // Intentar diferentes niveles de calidad hasta que la imagen sea lo suficientemente peque√±a\n        const maxSize = 500 * 1024; // 500KB m√°ximo\n        let quality = 0.7;\n        let compressedBase64 = compressWithQuality(quality);\n        \n        // Si la imagen es demasiado grande, reducir la calidad progresivamente\n        while (this.getBase64Size(compressedBase64) > maxSize && quality > 0.1) {\n          quality -= 0.1;\n          compressedBase64 = compressWithQuality(quality);\n        }\n\n        // Si a√∫n es demasiado grande, reducir el tama√±o\n        if (this.getBase64Size(compressedBase64) > maxSize) {\n          width = Math.round(width * 0.8);\n          height = Math.round(height * 0.8);\n          canvas.width = width;\n          canvas.height = height;\n          ctx.drawImage(img, 0, 0, width, height);\n          compressedBase64 = compressWithQuality(0.5);\n        }\n\n        console.log('Tama√±o final de la imagen:', this.getBase64Size(compressedBase64) / 1024, 'KB');\n        resolve(compressedBase64);\n      };\n      \n      img.onerror = () => {\n        reject(new Error('Error al cargar la imagen'));\n      };\n    });\n  }\n\n  private getBase64Size(base64String: string): number {\n    // Eliminar el prefijo de la cadena base64\n    const base64 = base64String.split(',')[1];\n    // Calcular el tama√±o aproximado en bytes\n    return Math.ceil((base64.length * 3) / 4);\n  }\n}\n\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ChatMessage",
            "id": "interface-ChatMessage-4adada38c9863104a8613e9bce58b1a78a6b53e996d72bf7e6b19496b433a7693f761c1fa105fbe1c7e101b0b3c973b4e5e2062e4c9b0f3a5543783e6d39a9e0",
            "file": "GiConnect/src/app/services/chat.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Database, ref, push, onValue, query, limitToLast } from 'firebase/database';\nimport { BehaviorSubject } from 'rxjs';\nimport { DataSnapshot } from 'firebase/database';\nimport { getDatabase } from 'firebase/database';\n\nexport interface ChatMessage {\n  user: string;\n  message: string;\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChatService {\n  private messages$ = new BehaviorSubject<ChatMessage[]>([]);\n  private db: Database;\n\n  constructor() {\n    this.db = getDatabase();\n    this.listenForMessages();\n  }\n\n  private listenForMessages() {\n    const messagesRef = query(ref(this.db, 'chat/messages'), limitToLast(50));\n    onValue(messagesRef, (snapshot: DataSnapshot) => {\n      const data = snapshot.val() || {};\n      const formatted = Object.values(data) as ChatMessage[];\n      this.messages$.next(formatted);\n    });\n  }\n\n  getMessages() {\n    return this.messages$.asObservable();\n  }\n\n  sendMessage(user: string, message: string) {\n    const messagesRef = ref(this.db, 'chat/messages');\n    const newMessage: ChatMessage = {\n      user,\n      message,\n      timestamp: Date.now(),\n    };\n    push(messagesRef, newMessage);\n  }\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Clase",
            "id": "interface-Clase-568df35ab2fcf24c596ef160df8f8af044e3dd0c57eb5e6541ffe77a0662f3aab2957b064d236724d8bb23c76ab3ee1e8ebbe0361dc12a9ae658a7b987c346a4",
            "file": "GiConnect/src/app/pages/pasar-lista/pasar-lista.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { ClaseService } from '../../services/clase.service';\nimport { AlertController } from '@ionic/angular';\nimport { ToastController } from '@ionic/angular';\nimport { firstValueFrom } from 'rxjs';\n\ninterface Atleta {\n  _id: string;\n  nombre: string;\n  apellidos: string;\n  foto?: string;\n}\n\ninterface Reserva {\n  _id: string;\n  atleta: Atleta;\n  status: string;\n  asistenciaConfirmada: boolean;\n}\n\ninterface Clase {\n  _id: string;\n  titulo: string;\n  instructor: {\n    nombre: string;\n    apellidos: string;\n    foto?: string;\n  };\n  horaInicio: string;\n  horaFin: string;\n  fecha: string;\n  reservas: Reserva[];\n  supervisada: boolean;\n}\n\n@Component({\n  selector: 'app-pasar-lista',\n  templateUrl: './pasar-lista.page.html',\n  styleUrls: ['./pasar-lista.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, FormsModule, RouterModule]\n})\nexport class PasarListaPage implements OnInit {\n  clases: Clase[] = [];\n  loading: boolean = true;\n  error: string | null = null;\n\n  constructor(\n    private claseService: ClaseService,\n    private alertController: AlertController,\n    private toastController: ToastController\n  ) { }\n\n  ngOnInit() {\n    this.cargarClases();\n  }\n\n  cargarClases() {\n    this.loading = true;\n    this.error = null;\n\n    this.claseService.getClasesParaPasarLista().subscribe({\n      next: (response) => {\n        console.log('=== FRONTEND DEBUG === Clases recibidas:', response);\n        this.clases = response;\n        this.clases.forEach(clase => {\n          console.log(`=== FRONTEND DEBUG === Clase \"${clase.titulo}\":`, {\n            id: clase._id,\n            reservas: clase.reservas.length,\n            reservasDetalle: clase.reservas.map(r => ({\n              id: r._id,\n              atleta: r.atleta.nombre + ' ' + r.atleta.apellidos,\n              status: r.status\n            }))\n          });\n        });\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Error al cargar las clases:', error);\n        this.error = 'Error al cargar las clases. Por favor, int√©ntalo de nuevo.';\n        this.loading = false;\n      }\n    });\n  }\n\n  marcarTodos(clase: Clase) {\n    clase.reservas.forEach(reserva => {\n      reserva.asistenciaConfirmada = true;\n    });\n  }\n\n  async confirmarAsistencia(clase: Clase) {\n    const alert = await this.alertController.create({\n      header: 'Confirmar Asistencia',\n      message: '¬øEst√°s seguro de que quieres confirmar la asistencia de esta clase?',\n      cssClass: 'custom-alert',\n      buttons: [\n        {\n          text: 'No',\n          role: 'cancel',\n          cssClass: 'alert-button-cancel'\n        },\n        {\n          text: 'S√≠',\n          cssClass: 'alert-button-confirm',\n          handler: () => {\n            this.procesarAsistencia(clase);\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  private async procesarAsistencia(clase: Clase) {\n    try {\n      console.log('Procesando asistencia para clase:', clase);\n      \n      const reservasActualizadas = clase.reservas.map(reserva => {\n        console.log('Reserva:', reserva);\n        return {\n          reservaId: reserva._id,\n          status: 'confirmada',\n          asistenciaConfirmada: reserva.asistenciaConfirmada\n        };\n      });\n\n      console.log('Reservas a actualizar:', reservasActualizadas);\n\n      if (reservasActualizadas.length === 0) {\n        console.error('No hay reservas para actualizar');\n        return;\n      }\n\n      const claseActualizada = await firstValueFrom(this.claseService.confirmarAsistencia(clase._id, {\n        reservas: reservasActualizadas,\n        supervisada: true\n      }));\n\n      if (claseActualizada) {\n        // Actualizar la clase en el array local\n        const index = this.clases.findIndex(c => c._id === clase._id);\n        if (index !== -1) {\n          this.clases[index] = claseActualizada;\n        }\n\n        // Mostrar mensaje de √©xito\n        const toast = await this.toastController.create({\n          message: 'Asistencia confirmada correctamente',\n          duration: 2000,\n          position: 'bottom',\n          color: 'success'\n        });\n        await toast.present();\n      }\n    } catch (error) {\n      console.error('Error al procesar asistencia:', error);\n      \n      // Mostrar mensaje de error\n      const toast = await this.toastController.create({\n        message: 'Error al confirmar la asistencia',\n        duration: 2000,\n        position: 'bottom',\n        color: 'danger'\n      });\n      await toast.present();\n    }\n  }\n\n  onImageError(event: Event) {\n    const img = event.target as HTMLImageElement;\n    img.src = 'assets/icon/avatar.svg';\n  }\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fecha",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "horaFin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "horaInicio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "instructor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "reservas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Reserva[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "supervisada",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "titulo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Clase",
            "id": "interface-Clase-3160ddff8136860d4d7cfaf69113f230d6e91331637d73a8508444ea08367edd47fd476dfdfc3ad9506d460ecc7b8f4549cd0e637628ef6f40ce0fc6a0b34d94-1",
            "file": "GiConnect/src/app/pages/reservas/reservas.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { addIcons } from 'ionicons';\nimport { calendarOutline, chevronForwardOutline, chevronBackOutline } from 'ionicons/icons';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from '../../services/auth.service';\nimport moment from 'moment';\nimport { ToastController } from '@ionic/angular';\nimport { interval, Subscription } from 'rxjs';\n\ninterface DiaSemana {\n  diaSemana: string;\n  diaMes: number;\n  mes: string;\n  clases: Clase[];\n}\n\ninterface Clase {\n  _id: string;\n  titulo: string;\n  horaInicio: string;\n  horaFin: string;\n  maxPlazas: number;\n  instructor: {\n    _id: string;\n    nombre: string;\n    foto?: string;\n  };\n  reservas: Reserva[];\n  diaSemana?: string;\n  fecha: Date;\n}\n\ninterface Reserva {\n  _id: string;\n  atleta: {\n    _id: string;\n    nombre: string;\n    foto?: string;\n  };\n  status: 'pendiente' | 'confirmada' | 'cancelada' | 'en_espera';\n}\n\n@Component({\n  selector: 'app-reservas',\n  templateUrl: './reservas.page.html',\n  styleUrls: ['./reservas.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, FormsModule]\n})\nexport class ReservasPage implements OnInit, OnDestroy {\n  apiUrl = environment.apiUrl;\n  diasSemana: { nombre: string; clases: any[] }[] = [];\n  clasesEspeciales: { nombre: string; clases: any[] }[] = [];\n  numeroSemana: number = 0;\n  fechaInicio: Date = new Date();\n  userId: string = '';\n  clasesPorDia: { [key: string]: any[] } = {};\n  private checkInterval: Subscription = new Subscription();\n  private reloadListener: any;\n  isAdminOrMaestro: boolean = false;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private toastController: ToastController\n  ) {\n    addIcons({ calendarOutline, chevronForwardOutline, chevronBackOutline });\n    const user = this.authService.getUser();\n    this.isAdminOrMaestro = user?.role === 'admin' || user?.role === 'maestro';\n  }\n\n  ngOnInit() {\n    const user = this.authService.getUser();\n    this.userId = user?._id || '';\n    this.cargarClasesSemana();\n    this.iniciarVerificacionSemanal();\n    this.setupReloadListener();\n  }\n\n  ngOnDestroy() {\n    if (this.checkInterval) {\n      this.checkInterval.unsubscribe();\n    }\n    if (this.reloadListener) {\n      window.removeEventListener('reloadReservas', this.reloadListener);\n    }\n  }\n\n  private iniciarVerificacionSemanal() {\n    // Verificar cada minuto si es domingo a las 22:00\n    this.checkInterval = interval(60000).subscribe(() => {\n      const ahora = new Date();\n      if (ahora.getDay() === 0 && ahora.getHours() === 22 && ahora.getMinutes() === 0) {\n        this.cargarClasesSemana();\n      }\n    });\n  }\n\n  private setupReloadListener() {\n    this.reloadListener = (event: Event) => {\n      if (event instanceof CustomEvent && event.type === 'reloadReservas') {\n        this.cargarClasesSemana();\n      }\n    };\n    window.addEventListener('reloadReservas', this.reloadListener);\n  }\n\n  getNumeroSemana(fecha: Date): number {\n    const inicio = new Date(fecha.getFullYear(), 0, 1);\n    const diff = fecha.getTime() - inicio.getTime();\n    return Math.ceil((diff / 86400000 + inicio.getDay() + 1) / 7);\n  }\n\n  obtenerFechaLunes(): string {\n    const hoy = new Date();\n    const dia = hoy.getDay();\n    // Si es domingo despu√©s de las 15:00, mostrar la semana siguiente\n    if (dia === 0 && hoy.getHours() >= 15) {\n      const lunes = new Date(hoy);\n      lunes.setDate(hoy.getDate() + 1); // Lunes de la semana siguiente\n      lunes.setHours(0, 0, 0, 0);\n      return lunes.toISOString();\n    }\n    // Si no, mostrar la semana actual\n    const diff = hoy.getDate() - dia + (dia === 0 ? -6 : 1);\n    const lunes = new Date(hoy.setDate(diff));\n    lunes.setHours(0, 0, 0, 0);\n    return lunes.toISOString();\n  }\n\n  getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('No hay token de autenticaci√≥n');\n    }\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n\n  async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message: message,\n      duration: 3000,\n      position: 'middle',\n      cssClass: 'custom-toast',\n      translucent: true\n    });\n    await toast.present();\n  }\n\n  async cargarClasesSemana() {\n    try {\n      // Obtener la fecha del lunes de la semana actual\n      const fechaLunes = this.obtenerFechaLunes();\n      console.log('=== FRONTEND DEBUG === Fecha lunes:', fechaLunes);\n\n      // Generar la semana actual\n      this.generarSemanaActual();\n\n      // Intentamos generar las clases de la semana\n      try {\n        const responseGeneracion = await this.http.post(\n          `${this.apiUrl}/clases/generar-semana?fecha=${fechaLunes}`,\n          {},\n          { headers: this.getHeaders() }\n        ).toPromise();\n        console.log('=== FRONTEND DEBUG === Clases generadas:', responseGeneracion);\n      } catch (error: any) {\n        console.error('Error al generar clases:', error);\n        // Si es un error 404, probablemente la ruta no est√° disponible en producci√≥n\n        if (error.status === 404) {\n          console.log('La ruta de generaci√≥n de clases no est√° disponible');\n        }\n      }\n\n      // Obtenemos las clases de la semana actual\n      const response: any = await this.http.get(\n        `${this.apiUrl}/clases/semana?fecha=${fechaLunes}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      console.log('=== FRONTEND DEBUG === Respuesta del servidor:', response);\n\n      if (response && response.clases) {\n        // Procesamos las clases de la semana actual\n        this.procesarClases(response.clases, []);\n\n        // Obtenemos las clases especiales (posteriores a la semana actual)\n        await this.cargarClasesEspeciales(fechaLunes);\n      } else {\n        console.error('Formato de respuesta inv√°lido:', response);\n        this.presentToast('Error al cargar las clases');\n      }\n    } catch (error) {\n      console.error('Error al cargar clases:', error);\n      this.presentToast('Error al cargar las clases');\n    }\n  }\n\n  async cargarClasesEspeciales(fechaLunes: string) {\n    try {\n      // Calculamos la fecha del fin de la semana actual\n      const fechaFinSemana = new Date(fechaLunes);\n      fechaFinSemana.setDate(fechaFinSemana.getDate() + 6);\n      fechaFinSemana.setHours(23, 59, 59, 999);\n\n      // Obtenemos las clases especiales (posteriores a la semana actual)\n      const response: any = await this.http.get(\n        `${this.apiUrl}/clases/especiales?fecha=${fechaFinSemana.toISOString()}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      console.log('=== FRONTEND DEBUG === Clases especiales recibidas:', response);\n\n      if (response && response.clases) {\n        // Procesamos las clases especiales\n        this.procesarClasesEspeciales(response.clases);\n      }\n    } catch (error) {\n      console.error('Error al cargar clases especiales:', error);\n    }\n  }\n\n  procesarClasesEspeciales(clases: Clase[]) {\n    if (!clases || clases.length === 0) {\n      this.clasesEspeciales = [];\n      return;\n    }\n\n    // Agrupar las clases especiales por fecha\n    const clasesPorFecha = new Map<string, Clase[]>();\n    \n    clases.forEach(clase => {\n      const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n      const fechaStr = fecha.toISOString().split('T')[0];\n      \n      if (!clasesPorFecha.has(fechaStr)) {\n        clasesPorFecha.set(fechaStr, []);\n      }\n      clasesPorFecha.get(fechaStr)?.push(clase);\n    });\n\n    // Convertir el Map a un array de objetos con nombre y clases\n    this.clasesEspeciales = Array.from(clasesPorFecha.entries()).map(([fechaStr, clases]) => {\n      const fecha = new Date(fechaStr);\n      const diaSemana = this.obtenerDiaSemana(fecha);\n      const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n      const nombre = `${diaSemana} ${fecha.getDate()} ${meses[fecha.getMonth()]}`;\n      \n      // Ordenar las clases por hora de inicio\n      clases.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));\n      \n      return { nombre, clases };\n    });\n\n    // Ordenar las fechas\n    this.clasesEspeciales.sort((a, b) => {\n      const fechaA = new Date(a.nombre.split(' ')[1] + ' ' + a.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n      const fechaB = new Date(b.nombre.split(' ')[1] + ' ' + b.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n      return fechaA.getTime() - fechaB.getTime();\n    });\n\n    console.log('=== FRONTEND DEBUG === Clases especiales procesadas:', this.clasesEspeciales);\n  }\n\n  generarSemanaActual() {\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    \n    const hoy = new Date();\n    const diaSemana = hoy.getDay();\n    const ajuste = diaSemana === 0 ? -6 : 1 - diaSemana;\n    const fechaLunes = new Date(hoy);\n    fechaLunes.setDate(hoy.getDate() + ajuste);\n    \n    this.numeroSemana = this.getNumeroSemana(fechaLunes);\n    \n    this.diasSemana = [];\n    for (let i = 0; i < 7; i++) {\n      const fecha = new Date(fechaLunes);\n      fecha.setDate(fechaLunes.getDate() + i);\n      \n      this.diasSemana.push({\n        nombre: `${dias[fecha.getDay()]} ${fecha.getDate()} ${meses[fecha.getMonth()]}`,\n        clases: []\n      });\n    }\n  }\n\n  procesarClases(clases: Clase[], clasesEspeciales: Clase[]) {\n    // Inicializar el objeto de clases por d√≠a\n    this.clasesPorDia = {\n      'Lunes': [], 'Martes': [], 'Mi√©rcoles': [], 'Jueves': [],\n      'Viernes': [], 'S√°bado': [], 'Domingo': []\n    };\n\n    // Inicializar array de clases especiales\n    this.clasesEspeciales = [];\n\n    console.log('=== FRONTEND DEBUG === Procesando clases:', clases.length);\n    console.log('=== FRONTEND DEBUG === Procesando clases especiales:', clasesEspeciales?.length || 0);\n\n    // Obtener la fecha del lunes de la semana actual\n    const fechaLunes = new Date(this.obtenerFechaLunes());\n    const fechaFinSemana = new Date(fechaLunes);\n    fechaFinSemana.setDate(fechaLunes.getDate() + 6);\n    fechaFinSemana.setHours(23, 59, 59, 999);\n\n    // Procesar clases de la semana actual\n    clases.forEach(clase => {\n      // Asegurarnos de que fecha es un objeto Date\n      const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n      \n      // Si la fecha est√° dentro de la semana actual\n      if (fecha >= fechaLunes && fecha <= fechaFinSemana) {\n        const diaSemana = this.obtenerDiaSemana(fecha);\n        if (this.clasesPorDia[diaSemana]) {\n          this.clasesPorDia[diaSemana].push(clase);\n        }\n      }\n    });\n\n    // Procesar clases especiales futuras\n    if (clasesEspeciales && clasesEspeciales.length > 0) {\n      // Agrupar las clases especiales por fecha\n      const clasesPorFecha = new Map<string, Clase[]>();\n      \n      clasesEspeciales.forEach(clase => {\n        // Asegurarnos de que fecha es un objeto Date\n        const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n        \n        // Solo incluir clases futuras (despu√©s del fin de la semana actual)\n        if (fecha > fechaFinSemana) {\n          const fechaStr = fecha.toISOString().split('T')[0];\n          \n          if (!clasesPorFecha.has(fechaStr)) {\n            clasesPorFecha.set(fechaStr, []);\n          }\n          clasesPorFecha.get(fechaStr)?.push(clase);\n        }\n      });\n\n      // Convertir el Map a un array de objetos con nombre y clases\n      this.clasesEspeciales = Array.from(clasesPorFecha.entries()).map(([fechaStr, clases]) => {\n        const fecha = new Date(fechaStr);\n        const diaSemana = this.obtenerDiaSemana(fecha);\n        const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n        const nombre = `${diaSemana} ${fecha.getDate()} ${meses[fecha.getMonth()]}`;\n        \n        // Ordenar las clases por hora de inicio\n        clases.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));\n        \n        return { nombre, clases };\n      });\n\n      // Ordenar las fechas\n      this.clasesEspeciales.sort((a, b) => {\n        const fechaA = new Date(a.nombre.split(' ')[1] + ' ' + a.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n        const fechaB = new Date(b.nombre.split(' ')[1] + ' ' + b.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n        return fechaA.getTime() - fechaB.getTime();\n      });\n    }\n\n    // Ordenar las clases por hora de inicio en cada d√≠a\n    Object.keys(this.clasesPorDia).forEach(dia => {\n      this.clasesPorDia[dia].sort((a, b) => {\n        return a.horaInicio.localeCompare(b.horaInicio);\n      });\n    });\n\n    // Actualizar el array de d√≠as de la semana con la fecha completa\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    \n    this.diasSemana = Object.keys(this.clasesPorDia).map((dia, index) => {\n      const fecha = new Date(fechaLunes);\n      fecha.setDate(fechaLunes.getDate() + index);\n      const clasesDelDia = this.clasesPorDia[dia];\n      \n      return {\n        nombre: `${dia} ${fecha.getDate()} ${meses[fecha.getMonth()]}`,\n        clases: clasesDelDia\n      };\n    });\n\n    console.log('=== FRONTEND DEBUG === D√≠as de la semana:', this.diasSemana);\n    console.log('=== FRONTEND DEBUG === Clases especiales finales:', this.clasesEspeciales);\n  }\n\n  obtenerDiaSemana(fecha: Date): string {\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];\n    return dias[fecha.getDay()];\n  }\n\n  getMesNombre(mes: number): string {\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    return meses[mes];\n  }\n\n  async reservarClase(claseId: string) {\n    try {\n      const endpoint = this.isAdminOrMaestro ? '/reservas/multiple' : '/reservas';\n      console.log('=== FRONTEND DEBUG === Iniciando reserva:', {\n        endpoint,\n        isAdminOrMaestro: this.isAdminOrMaestro,\n        claseId,\n        headers: this.getHeaders()\n      });\n\n      console.log('=== FRONTEND DEBUG === Enviando petici√≥n a:', `${this.apiUrl}${endpoint}`);\n      \n      const response = await this.http.post(\n        `${this.apiUrl}${endpoint}`,\n        { claseId },\n        { headers: this.getHeaders() }\n      ).toPromise();\n      \n      console.log('=== FRONTEND DEBUG === Respuesta del servidor:', response);\n      this.presentToast('Clase reservada correctamente');\n      this.cargarClasesSemana();\n    } catch (error: any) {\n      console.error('=== FRONTEND DEBUG === Error completo:', error);\n      console.error('=== FRONTEND DEBUG === Error status:', error.status);\n      console.error('=== FRONTEND DEBUG === Error message:', error.error);\n      console.error('=== FRONTEND DEBUG === Error headers:', error.headers);\n      this.presentToast(error.error?.message || 'Error al reservar la clase');\n    }\n  }\n\n  async cancelarReserva(reservaId: string) {\n    try {\n      const response = await this.http.delete(\n        `${this.apiUrl}/reservas/${reservaId}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n      \n      this.presentToast('Reserva cancelada correctamente');\n      // Recargar las clases para actualizar la interfaz\n      await this.cargarClasesSemana();\n    } catch (error: any) {\n      console.error('Error al cancelar:', error);\n      this.presentToast(error.error?.message || 'Error al cancelar la reserva');\n    }\n  }\n\n  tieneReserva(clase: any): boolean {\n    if (this.isAdminOrMaestro) {\n      return false; // Los maestros y admins siempre pueden reservar\n    }\n    return clase.reservas?.some((r: any) => r.atleta._id === this.userId) || false;\n  }\n\n  getReservaUsuario(clase: any): any {\n    if (this.isAdminOrMaestro) {\n      // Para admin/maestro, obtener la √∫ltima reserva que hizo en esta clase\n      return clase.reservas\n        ?.filter((r: any) => r.atleta._id === this.userId)\n        .sort((a: any, b: any) => new Date(b.fechaReserva).getTime() - new Date(a.fechaReserva).getTime())[0];\n    }\n    // Para usuarios normales, obtener su reserva\n    return clase.reservas?.find((r: any) => r.atleta._id === this.userId);\n  }\n}",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "diaSemana",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fecha",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "horaFin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "horaInicio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "instructor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "maxPlazas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "reservas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Reserva[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "titulo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Clase-1"
        },
        {
            "name": "ConfirmarAsistenciaData",
            "id": "interface-ConfirmarAsistenciaData-c4acc9646a84341e48e680dd478bc0ff95a8bc300751c21a910838184ac1cd4fddcccd3f1e7523bd83425c8f84ec4ba990d3c8593baf360487a721454d997867",
            "file": "GiConnect/src/app/services/clase.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\ninterface ConfirmarAsistenciaData {\n  reservas: {\n    reservaId: string;\n    status: string;\n    asistenciaConfirmada: boolean;\n  }[];\n  supervisada: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClaseService {\n  private apiUrl = `${environment.apiUrl}/clases`;\n\n  constructor(private http: HttpClient) { }\n\n  getClasesParaPasarLista(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/para-pasar-lista`);\n  }\n\n  confirmarAsistencia(claseId: string, data: ConfirmarAsistenciaData): Observable<any> {\n    return this.http.post(`${this.apiUrl}/${claseId}/confirmar-asistencia`, data);\n  }\n} ",
            "properties": [
                {
                    "name": "reservas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "supervisada",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DiaSemana",
            "id": "interface-DiaSemana-3160ddff8136860d4d7cfaf69113f230d6e91331637d73a8508444ea08367edd47fd476dfdfc3ad9506d460ecc7b8f4549cd0e637628ef6f40ce0fc6a0b34d94",
            "file": "GiConnect/src/app/pages/reservas/reservas.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { addIcons } from 'ionicons';\nimport { calendarOutline, chevronForwardOutline, chevronBackOutline } from 'ionicons/icons';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from '../../services/auth.service';\nimport moment from 'moment';\nimport { ToastController } from '@ionic/angular';\nimport { interval, Subscription } from 'rxjs';\n\ninterface DiaSemana {\n  diaSemana: string;\n  diaMes: number;\n  mes: string;\n  clases: Clase[];\n}\n\ninterface Clase {\n  _id: string;\n  titulo: string;\n  horaInicio: string;\n  horaFin: string;\n  maxPlazas: number;\n  instructor: {\n    _id: string;\n    nombre: string;\n    foto?: string;\n  };\n  reservas: Reserva[];\n  diaSemana?: string;\n  fecha: Date;\n}\n\ninterface Reserva {\n  _id: string;\n  atleta: {\n    _id: string;\n    nombre: string;\n    foto?: string;\n  };\n  status: 'pendiente' | 'confirmada' | 'cancelada' | 'en_espera';\n}\n\n@Component({\n  selector: 'app-reservas',\n  templateUrl: './reservas.page.html',\n  styleUrls: ['./reservas.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, FormsModule]\n})\nexport class ReservasPage implements OnInit, OnDestroy {\n  apiUrl = environment.apiUrl;\n  diasSemana: { nombre: string; clases: any[] }[] = [];\n  clasesEspeciales: { nombre: string; clases: any[] }[] = [];\n  numeroSemana: number = 0;\n  fechaInicio: Date = new Date();\n  userId: string = '';\n  clasesPorDia: { [key: string]: any[] } = {};\n  private checkInterval: Subscription = new Subscription();\n  private reloadListener: any;\n  isAdminOrMaestro: boolean = false;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private toastController: ToastController\n  ) {\n    addIcons({ calendarOutline, chevronForwardOutline, chevronBackOutline });\n    const user = this.authService.getUser();\n    this.isAdminOrMaestro = user?.role === 'admin' || user?.role === 'maestro';\n  }\n\n  ngOnInit() {\n    const user = this.authService.getUser();\n    this.userId = user?._id || '';\n    this.cargarClasesSemana();\n    this.iniciarVerificacionSemanal();\n    this.setupReloadListener();\n  }\n\n  ngOnDestroy() {\n    if (this.checkInterval) {\n      this.checkInterval.unsubscribe();\n    }\n    if (this.reloadListener) {\n      window.removeEventListener('reloadReservas', this.reloadListener);\n    }\n  }\n\n  private iniciarVerificacionSemanal() {\n    // Verificar cada minuto si es domingo a las 22:00\n    this.checkInterval = interval(60000).subscribe(() => {\n      const ahora = new Date();\n      if (ahora.getDay() === 0 && ahora.getHours() === 22 && ahora.getMinutes() === 0) {\n        this.cargarClasesSemana();\n      }\n    });\n  }\n\n  private setupReloadListener() {\n    this.reloadListener = (event: Event) => {\n      if (event instanceof CustomEvent && event.type === 'reloadReservas') {\n        this.cargarClasesSemana();\n      }\n    };\n    window.addEventListener('reloadReservas', this.reloadListener);\n  }\n\n  getNumeroSemana(fecha: Date): number {\n    const inicio = new Date(fecha.getFullYear(), 0, 1);\n    const diff = fecha.getTime() - inicio.getTime();\n    return Math.ceil((diff / 86400000 + inicio.getDay() + 1) / 7);\n  }\n\n  obtenerFechaLunes(): string {\n    const hoy = new Date();\n    const dia = hoy.getDay();\n    // Si es domingo despu√©s de las 15:00, mostrar la semana siguiente\n    if (dia === 0 && hoy.getHours() >= 15) {\n      const lunes = new Date(hoy);\n      lunes.setDate(hoy.getDate() + 1); // Lunes de la semana siguiente\n      lunes.setHours(0, 0, 0, 0);\n      return lunes.toISOString();\n    }\n    // Si no, mostrar la semana actual\n    const diff = hoy.getDate() - dia + (dia === 0 ? -6 : 1);\n    const lunes = new Date(hoy.setDate(diff));\n    lunes.setHours(0, 0, 0, 0);\n    return lunes.toISOString();\n  }\n\n  getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('No hay token de autenticaci√≥n');\n    }\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n\n  async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message: message,\n      duration: 3000,\n      position: 'middle',\n      cssClass: 'custom-toast',\n      translucent: true\n    });\n    await toast.present();\n  }\n\n  async cargarClasesSemana() {\n    try {\n      // Obtener la fecha del lunes de la semana actual\n      const fechaLunes = this.obtenerFechaLunes();\n      console.log('=== FRONTEND DEBUG === Fecha lunes:', fechaLunes);\n\n      // Generar la semana actual\n      this.generarSemanaActual();\n\n      // Intentamos generar las clases de la semana\n      try {\n        const responseGeneracion = await this.http.post(\n          `${this.apiUrl}/clases/generar-semana?fecha=${fechaLunes}`,\n          {},\n          { headers: this.getHeaders() }\n        ).toPromise();\n        console.log('=== FRONTEND DEBUG === Clases generadas:', responseGeneracion);\n      } catch (error: any) {\n        console.error('Error al generar clases:', error);\n        // Si es un error 404, probablemente la ruta no est√° disponible en producci√≥n\n        if (error.status === 404) {\n          console.log('La ruta de generaci√≥n de clases no est√° disponible');\n        }\n      }\n\n      // Obtenemos las clases de la semana actual\n      const response: any = await this.http.get(\n        `${this.apiUrl}/clases/semana?fecha=${fechaLunes}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      console.log('=== FRONTEND DEBUG === Respuesta del servidor:', response);\n\n      if (response && response.clases) {\n        // Procesamos las clases de la semana actual\n        this.procesarClases(response.clases, []);\n\n        // Obtenemos las clases especiales (posteriores a la semana actual)\n        await this.cargarClasesEspeciales(fechaLunes);\n      } else {\n        console.error('Formato de respuesta inv√°lido:', response);\n        this.presentToast('Error al cargar las clases');\n      }\n    } catch (error) {\n      console.error('Error al cargar clases:', error);\n      this.presentToast('Error al cargar las clases');\n    }\n  }\n\n  async cargarClasesEspeciales(fechaLunes: string) {\n    try {\n      // Calculamos la fecha del fin de la semana actual\n      const fechaFinSemana = new Date(fechaLunes);\n      fechaFinSemana.setDate(fechaFinSemana.getDate() + 6);\n      fechaFinSemana.setHours(23, 59, 59, 999);\n\n      // Obtenemos las clases especiales (posteriores a la semana actual)\n      const response: any = await this.http.get(\n        `${this.apiUrl}/clases/especiales?fecha=${fechaFinSemana.toISOString()}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      console.log('=== FRONTEND DEBUG === Clases especiales recibidas:', response);\n\n      if (response && response.clases) {\n        // Procesamos las clases especiales\n        this.procesarClasesEspeciales(response.clases);\n      }\n    } catch (error) {\n      console.error('Error al cargar clases especiales:', error);\n    }\n  }\n\n  procesarClasesEspeciales(clases: Clase[]) {\n    if (!clases || clases.length === 0) {\n      this.clasesEspeciales = [];\n      return;\n    }\n\n    // Agrupar las clases especiales por fecha\n    const clasesPorFecha = new Map<string, Clase[]>();\n    \n    clases.forEach(clase => {\n      const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n      const fechaStr = fecha.toISOString().split('T')[0];\n      \n      if (!clasesPorFecha.has(fechaStr)) {\n        clasesPorFecha.set(fechaStr, []);\n      }\n      clasesPorFecha.get(fechaStr)?.push(clase);\n    });\n\n    // Convertir el Map a un array de objetos con nombre y clases\n    this.clasesEspeciales = Array.from(clasesPorFecha.entries()).map(([fechaStr, clases]) => {\n      const fecha = new Date(fechaStr);\n      const diaSemana = this.obtenerDiaSemana(fecha);\n      const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n      const nombre = `${diaSemana} ${fecha.getDate()} ${meses[fecha.getMonth()]}`;\n      \n      // Ordenar las clases por hora de inicio\n      clases.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));\n      \n      return { nombre, clases };\n    });\n\n    // Ordenar las fechas\n    this.clasesEspeciales.sort((a, b) => {\n      const fechaA = new Date(a.nombre.split(' ')[1] + ' ' + a.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n      const fechaB = new Date(b.nombre.split(' ')[1] + ' ' + b.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n      return fechaA.getTime() - fechaB.getTime();\n    });\n\n    console.log('=== FRONTEND DEBUG === Clases especiales procesadas:', this.clasesEspeciales);\n  }\n\n  generarSemanaActual() {\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    \n    const hoy = new Date();\n    const diaSemana = hoy.getDay();\n    const ajuste = diaSemana === 0 ? -6 : 1 - diaSemana;\n    const fechaLunes = new Date(hoy);\n    fechaLunes.setDate(hoy.getDate() + ajuste);\n    \n    this.numeroSemana = this.getNumeroSemana(fechaLunes);\n    \n    this.diasSemana = [];\n    for (let i = 0; i < 7; i++) {\n      const fecha = new Date(fechaLunes);\n      fecha.setDate(fechaLunes.getDate() + i);\n      \n      this.diasSemana.push({\n        nombre: `${dias[fecha.getDay()]} ${fecha.getDate()} ${meses[fecha.getMonth()]}`,\n        clases: []\n      });\n    }\n  }\n\n  procesarClases(clases: Clase[], clasesEspeciales: Clase[]) {\n    // Inicializar el objeto de clases por d√≠a\n    this.clasesPorDia = {\n      'Lunes': [], 'Martes': [], 'Mi√©rcoles': [], 'Jueves': [],\n      'Viernes': [], 'S√°bado': [], 'Domingo': []\n    };\n\n    // Inicializar array de clases especiales\n    this.clasesEspeciales = [];\n\n    console.log('=== FRONTEND DEBUG === Procesando clases:', clases.length);\n    console.log('=== FRONTEND DEBUG === Procesando clases especiales:', clasesEspeciales?.length || 0);\n\n    // Obtener la fecha del lunes de la semana actual\n    const fechaLunes = new Date(this.obtenerFechaLunes());\n    const fechaFinSemana = new Date(fechaLunes);\n    fechaFinSemana.setDate(fechaLunes.getDate() + 6);\n    fechaFinSemana.setHours(23, 59, 59, 999);\n\n    // Procesar clases de la semana actual\n    clases.forEach(clase => {\n      // Asegurarnos de que fecha es un objeto Date\n      const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n      \n      // Si la fecha est√° dentro de la semana actual\n      if (fecha >= fechaLunes && fecha <= fechaFinSemana) {\n        const diaSemana = this.obtenerDiaSemana(fecha);\n        if (this.clasesPorDia[diaSemana]) {\n          this.clasesPorDia[diaSemana].push(clase);\n        }\n      }\n    });\n\n    // Procesar clases especiales futuras\n    if (clasesEspeciales && clasesEspeciales.length > 0) {\n      // Agrupar las clases especiales por fecha\n      const clasesPorFecha = new Map<string, Clase[]>();\n      \n      clasesEspeciales.forEach(clase => {\n        // Asegurarnos de que fecha es un objeto Date\n        const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n        \n        // Solo incluir clases futuras (despu√©s del fin de la semana actual)\n        if (fecha > fechaFinSemana) {\n          const fechaStr = fecha.toISOString().split('T')[0];\n          \n          if (!clasesPorFecha.has(fechaStr)) {\n            clasesPorFecha.set(fechaStr, []);\n          }\n          clasesPorFecha.get(fechaStr)?.push(clase);\n        }\n      });\n\n      // Convertir el Map a un array de objetos con nombre y clases\n      this.clasesEspeciales = Array.from(clasesPorFecha.entries()).map(([fechaStr, clases]) => {\n        const fecha = new Date(fechaStr);\n        const diaSemana = this.obtenerDiaSemana(fecha);\n        const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n        const nombre = `${diaSemana} ${fecha.getDate()} ${meses[fecha.getMonth()]}`;\n        \n        // Ordenar las clases por hora de inicio\n        clases.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));\n        \n        return { nombre, clases };\n      });\n\n      // Ordenar las fechas\n      this.clasesEspeciales.sort((a, b) => {\n        const fechaA = new Date(a.nombre.split(' ')[1] + ' ' + a.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n        const fechaB = new Date(b.nombre.split(' ')[1] + ' ' + b.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n        return fechaA.getTime() - fechaB.getTime();\n      });\n    }\n\n    // Ordenar las clases por hora de inicio en cada d√≠a\n    Object.keys(this.clasesPorDia).forEach(dia => {\n      this.clasesPorDia[dia].sort((a, b) => {\n        return a.horaInicio.localeCompare(b.horaInicio);\n      });\n    });\n\n    // Actualizar el array de d√≠as de la semana con la fecha completa\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    \n    this.diasSemana = Object.keys(this.clasesPorDia).map((dia, index) => {\n      const fecha = new Date(fechaLunes);\n      fecha.setDate(fechaLunes.getDate() + index);\n      const clasesDelDia = this.clasesPorDia[dia];\n      \n      return {\n        nombre: `${dia} ${fecha.getDate()} ${meses[fecha.getMonth()]}`,\n        clases: clasesDelDia\n      };\n    });\n\n    console.log('=== FRONTEND DEBUG === D√≠as de la semana:', this.diasSemana);\n    console.log('=== FRONTEND DEBUG === Clases especiales finales:', this.clasesEspeciales);\n  }\n\n  obtenerDiaSemana(fecha: Date): string {\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];\n    return dias[fecha.getDay()];\n  }\n\n  getMesNombre(mes: number): string {\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    return meses[mes];\n  }\n\n  async reservarClase(claseId: string) {\n    try {\n      const endpoint = this.isAdminOrMaestro ? '/reservas/multiple' : '/reservas';\n      console.log('=== FRONTEND DEBUG === Iniciando reserva:', {\n        endpoint,\n        isAdminOrMaestro: this.isAdminOrMaestro,\n        claseId,\n        headers: this.getHeaders()\n      });\n\n      console.log('=== FRONTEND DEBUG === Enviando petici√≥n a:', `${this.apiUrl}${endpoint}`);\n      \n      const response = await this.http.post(\n        `${this.apiUrl}${endpoint}`,\n        { claseId },\n        { headers: this.getHeaders() }\n      ).toPromise();\n      \n      console.log('=== FRONTEND DEBUG === Respuesta del servidor:', response);\n      this.presentToast('Clase reservada correctamente');\n      this.cargarClasesSemana();\n    } catch (error: any) {\n      console.error('=== FRONTEND DEBUG === Error completo:', error);\n      console.error('=== FRONTEND DEBUG === Error status:', error.status);\n      console.error('=== FRONTEND DEBUG === Error message:', error.error);\n      console.error('=== FRONTEND DEBUG === Error headers:', error.headers);\n      this.presentToast(error.error?.message || 'Error al reservar la clase');\n    }\n  }\n\n  async cancelarReserva(reservaId: string) {\n    try {\n      const response = await this.http.delete(\n        `${this.apiUrl}/reservas/${reservaId}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n      \n      this.presentToast('Reserva cancelada correctamente');\n      // Recargar las clases para actualizar la interfaz\n      await this.cargarClasesSemana();\n    } catch (error: any) {\n      console.error('Error al cancelar:', error);\n      this.presentToast(error.error?.message || 'Error al cancelar la reserva');\n    }\n  }\n\n  tieneReserva(clase: any): boolean {\n    if (this.isAdminOrMaestro) {\n      return false; // Los maestros y admins siempre pueden reservar\n    }\n    return clase.reservas?.some((r: any) => r.atleta._id === this.userId) || false;\n  }\n\n  getReservaUsuario(clase: any): any {\n    if (this.isAdminOrMaestro) {\n      // Para admin/maestro, obtener la √∫ltima reserva que hizo en esta clase\n      return clase.reservas\n        ?.filter((r: any) => r.atleta._id === this.userId)\n        .sort((a: any, b: any) => new Date(b.fechaReserva).getTime() - new Date(a.fechaReserva).getTime())[0];\n    }\n    // Para usuarios normales, obtener su reserva\n    return clase.reservas?.find((r: any) => r.atleta._id === this.userId);\n  }\n}",
            "properties": [
                {
                    "name": "clases",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Clase[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "diaMes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "diaSemana",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "mes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FirebaseConfig",
            "id": "interface-FirebaseConfig-6ac1ae77117787f96503f822c1f693d48eae056f07f184ba27481bcce7f323ebcb9d3db83e97322f84b986adf9fd6f977811b4c53bbc63bd22e2e19a8f3e8d1c",
            "file": "GiConnect/src/environments/environment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Platform } from '@ionic/angular';\n\ninterface FirebaseConfig {\n  apiKey: string;\n  authDomain: string;\n  databaseURL: string;\n  projectId: string;\n  storageBucket: string;\n  messagingSenderId: string;\n  appId: string;\n  measurementId: string;\n}\n\n// Funci√≥n para determinar la URL base seg√∫n la plataforma\nfunction getBaseUrl() {\n  // Detectar si estamos en un emulador o dispositivo m√≥vil\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  \n  if (isMobile) {\n    // Para emuladores y dispositivos m√≥viles, usar la IP real de la m√°quina\n    return 'https://giconnect-production.up.railway.app/api';\n  }\n  // Para web, usar la URL de producci√≥n\n  return 'https://giconnect-production.up.railway.app/api';\n}\n\nexport const environment = {\n  production: false,\n  apiUrl: getBaseUrl(),\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'http://192.168.1.252:4000',\n    'http://10.0.2.2:4000',\n    'http://10.0.2.2:8100',\n    'http://10.0.2.2:4200'\n  ],\n  firebaseConfig: {\n    apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n    authDomain: \"giconnect-36d94.firebaseapp.com\",\n    databaseURL: \"https://giconnect-36d94-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"giconnect-36d94\",\n    storageBucket: \"giconnect-36d94.firebasestorage.app\",\n    messagingSenderId: \"428486646092\",\n    appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n    measurementId: \"G-1FX12BTWVW\"\n  } as FirebaseConfig\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n",
            "properties": [
                {
                    "name": "apiKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "appId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "authDomain",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "databaseURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "measurementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "messagingSenderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "storageBucket",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NuevaSuscripcion",
            "id": "interface-NuevaSuscripcion-ecbcae4daacf3f2398a79b1f76f96398bb86a605b8d3bc67f939f632084cb8e2616386adb307ebfc807a75947c9de9cedcb5283036119c1d2672bf35aa541ba1",
            "file": "GiConnect/src/app/interfaces/suscripcion.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Suscripcion {\n  _id: string;\n  tipo: string;\n  fechaInicio: Date;\n  fechaFin: Date;\n  precio: number;\n  atleta: string;\n  pagado: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface NuevaSuscripcion {\n  tipo: string;\n  fechaInicio: Date;\n  fechaFin: Date;\n  precio: number;\n  atleta: string;\n  pagado: boolean;\n}\n\nexport interface TipoSuscripcion {\n  id: string;\n  nombre: string;\n  descripcion: string;\n  precio: number;\n  meses: number;\n  caracteristicas: string[];\n} ",
            "properties": [
                {
                    "name": "atleta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "fechaFin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "fechaInicio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pagado",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "precio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tipo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Reserva",
            "id": "interface-Reserva-568df35ab2fcf24c596ef160df8f8af044e3dd0c57eb5e6541ffe77a0662f3aab2957b064d236724d8bb23c76ab3ee1e8ebbe0361dc12a9ae658a7b987c346a4",
            "file": "GiConnect/src/app/pages/pasar-lista/pasar-lista.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { ClaseService } from '../../services/clase.service';\nimport { AlertController } from '@ionic/angular';\nimport { ToastController } from '@ionic/angular';\nimport { firstValueFrom } from 'rxjs';\n\ninterface Atleta {\n  _id: string;\n  nombre: string;\n  apellidos: string;\n  foto?: string;\n}\n\ninterface Reserva {\n  _id: string;\n  atleta: Atleta;\n  status: string;\n  asistenciaConfirmada: boolean;\n}\n\ninterface Clase {\n  _id: string;\n  titulo: string;\n  instructor: {\n    nombre: string;\n    apellidos: string;\n    foto?: string;\n  };\n  horaInicio: string;\n  horaFin: string;\n  fecha: string;\n  reservas: Reserva[];\n  supervisada: boolean;\n}\n\n@Component({\n  selector: 'app-pasar-lista',\n  templateUrl: './pasar-lista.page.html',\n  styleUrls: ['./pasar-lista.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, FormsModule, RouterModule]\n})\nexport class PasarListaPage implements OnInit {\n  clases: Clase[] = [];\n  loading: boolean = true;\n  error: string | null = null;\n\n  constructor(\n    private claseService: ClaseService,\n    private alertController: AlertController,\n    private toastController: ToastController\n  ) { }\n\n  ngOnInit() {\n    this.cargarClases();\n  }\n\n  cargarClases() {\n    this.loading = true;\n    this.error = null;\n\n    this.claseService.getClasesParaPasarLista().subscribe({\n      next: (response) => {\n        console.log('=== FRONTEND DEBUG === Clases recibidas:', response);\n        this.clases = response;\n        this.clases.forEach(clase => {\n          console.log(`=== FRONTEND DEBUG === Clase \"${clase.titulo}\":`, {\n            id: clase._id,\n            reservas: clase.reservas.length,\n            reservasDetalle: clase.reservas.map(r => ({\n              id: r._id,\n              atleta: r.atleta.nombre + ' ' + r.atleta.apellidos,\n              status: r.status\n            }))\n          });\n        });\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Error al cargar las clases:', error);\n        this.error = 'Error al cargar las clases. Por favor, int√©ntalo de nuevo.';\n        this.loading = false;\n      }\n    });\n  }\n\n  marcarTodos(clase: Clase) {\n    clase.reservas.forEach(reserva => {\n      reserva.asistenciaConfirmada = true;\n    });\n  }\n\n  async confirmarAsistencia(clase: Clase) {\n    const alert = await this.alertController.create({\n      header: 'Confirmar Asistencia',\n      message: '¬øEst√°s seguro de que quieres confirmar la asistencia de esta clase?',\n      cssClass: 'custom-alert',\n      buttons: [\n        {\n          text: 'No',\n          role: 'cancel',\n          cssClass: 'alert-button-cancel'\n        },\n        {\n          text: 'S√≠',\n          cssClass: 'alert-button-confirm',\n          handler: () => {\n            this.procesarAsistencia(clase);\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  private async procesarAsistencia(clase: Clase) {\n    try {\n      console.log('Procesando asistencia para clase:', clase);\n      \n      const reservasActualizadas = clase.reservas.map(reserva => {\n        console.log('Reserva:', reserva);\n        return {\n          reservaId: reserva._id,\n          status: 'confirmada',\n          asistenciaConfirmada: reserva.asistenciaConfirmada\n        };\n      });\n\n      console.log('Reservas a actualizar:', reservasActualizadas);\n\n      if (reservasActualizadas.length === 0) {\n        console.error('No hay reservas para actualizar');\n        return;\n      }\n\n      const claseActualizada = await firstValueFrom(this.claseService.confirmarAsistencia(clase._id, {\n        reservas: reservasActualizadas,\n        supervisada: true\n      }));\n\n      if (claseActualizada) {\n        // Actualizar la clase en el array local\n        const index = this.clases.findIndex(c => c._id === clase._id);\n        if (index !== -1) {\n          this.clases[index] = claseActualizada;\n        }\n\n        // Mostrar mensaje de √©xito\n        const toast = await this.toastController.create({\n          message: 'Asistencia confirmada correctamente',\n          duration: 2000,\n          position: 'bottom',\n          color: 'success'\n        });\n        await toast.present();\n      }\n    } catch (error) {\n      console.error('Error al procesar asistencia:', error);\n      \n      // Mostrar mensaje de error\n      const toast = await this.toastController.create({\n        message: 'Error al confirmar la asistencia',\n        duration: 2000,\n        position: 'bottom',\n        color: 'danger'\n      });\n      await toast.present();\n    }\n  }\n\n  onImageError(event: Event) {\n    const img = event.target as HTMLImageElement;\n    img.src = 'assets/icon/avatar.svg';\n  }\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "asistenciaConfirmada",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "atleta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Atleta",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Reserva",
            "id": "interface-Reserva-3160ddff8136860d4d7cfaf69113f230d6e91331637d73a8508444ea08367edd47fd476dfdfc3ad9506d460ecc7b8f4549cd0e637628ef6f40ce0fc6a0b34d94-1",
            "file": "GiConnect/src/app/pages/reservas/reservas.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { addIcons } from 'ionicons';\nimport { calendarOutline, chevronForwardOutline, chevronBackOutline } from 'ionicons/icons';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from '../../services/auth.service';\nimport moment from 'moment';\nimport { ToastController } from '@ionic/angular';\nimport { interval, Subscription } from 'rxjs';\n\ninterface DiaSemana {\n  diaSemana: string;\n  diaMes: number;\n  mes: string;\n  clases: Clase[];\n}\n\ninterface Clase {\n  _id: string;\n  titulo: string;\n  horaInicio: string;\n  horaFin: string;\n  maxPlazas: number;\n  instructor: {\n    _id: string;\n    nombre: string;\n    foto?: string;\n  };\n  reservas: Reserva[];\n  diaSemana?: string;\n  fecha: Date;\n}\n\ninterface Reserva {\n  _id: string;\n  atleta: {\n    _id: string;\n    nombre: string;\n    foto?: string;\n  };\n  status: 'pendiente' | 'confirmada' | 'cancelada' | 'en_espera';\n}\n\n@Component({\n  selector: 'app-reservas',\n  templateUrl: './reservas.page.html',\n  styleUrls: ['./reservas.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, FormsModule]\n})\nexport class ReservasPage implements OnInit, OnDestroy {\n  apiUrl = environment.apiUrl;\n  diasSemana: { nombre: string; clases: any[] }[] = [];\n  clasesEspeciales: { nombre: string; clases: any[] }[] = [];\n  numeroSemana: number = 0;\n  fechaInicio: Date = new Date();\n  userId: string = '';\n  clasesPorDia: { [key: string]: any[] } = {};\n  private checkInterval: Subscription = new Subscription();\n  private reloadListener: any;\n  isAdminOrMaestro: boolean = false;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private toastController: ToastController\n  ) {\n    addIcons({ calendarOutline, chevronForwardOutline, chevronBackOutline });\n    const user = this.authService.getUser();\n    this.isAdminOrMaestro = user?.role === 'admin' || user?.role === 'maestro';\n  }\n\n  ngOnInit() {\n    const user = this.authService.getUser();\n    this.userId = user?._id || '';\n    this.cargarClasesSemana();\n    this.iniciarVerificacionSemanal();\n    this.setupReloadListener();\n  }\n\n  ngOnDestroy() {\n    if (this.checkInterval) {\n      this.checkInterval.unsubscribe();\n    }\n    if (this.reloadListener) {\n      window.removeEventListener('reloadReservas', this.reloadListener);\n    }\n  }\n\n  private iniciarVerificacionSemanal() {\n    // Verificar cada minuto si es domingo a las 22:00\n    this.checkInterval = interval(60000).subscribe(() => {\n      const ahora = new Date();\n      if (ahora.getDay() === 0 && ahora.getHours() === 22 && ahora.getMinutes() === 0) {\n        this.cargarClasesSemana();\n      }\n    });\n  }\n\n  private setupReloadListener() {\n    this.reloadListener = (event: Event) => {\n      if (event instanceof CustomEvent && event.type === 'reloadReservas') {\n        this.cargarClasesSemana();\n      }\n    };\n    window.addEventListener('reloadReservas', this.reloadListener);\n  }\n\n  getNumeroSemana(fecha: Date): number {\n    const inicio = new Date(fecha.getFullYear(), 0, 1);\n    const diff = fecha.getTime() - inicio.getTime();\n    return Math.ceil((diff / 86400000 + inicio.getDay() + 1) / 7);\n  }\n\n  obtenerFechaLunes(): string {\n    const hoy = new Date();\n    const dia = hoy.getDay();\n    // Si es domingo despu√©s de las 15:00, mostrar la semana siguiente\n    if (dia === 0 && hoy.getHours() >= 15) {\n      const lunes = new Date(hoy);\n      lunes.setDate(hoy.getDate() + 1); // Lunes de la semana siguiente\n      lunes.setHours(0, 0, 0, 0);\n      return lunes.toISOString();\n    }\n    // Si no, mostrar la semana actual\n    const diff = hoy.getDate() - dia + (dia === 0 ? -6 : 1);\n    const lunes = new Date(hoy.setDate(diff));\n    lunes.setHours(0, 0, 0, 0);\n    return lunes.toISOString();\n  }\n\n  getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('No hay token de autenticaci√≥n');\n    }\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n\n  async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message: message,\n      duration: 3000,\n      position: 'middle',\n      cssClass: 'custom-toast',\n      translucent: true\n    });\n    await toast.present();\n  }\n\n  async cargarClasesSemana() {\n    try {\n      // Obtener la fecha del lunes de la semana actual\n      const fechaLunes = this.obtenerFechaLunes();\n      console.log('=== FRONTEND DEBUG === Fecha lunes:', fechaLunes);\n\n      // Generar la semana actual\n      this.generarSemanaActual();\n\n      // Intentamos generar las clases de la semana\n      try {\n        const responseGeneracion = await this.http.post(\n          `${this.apiUrl}/clases/generar-semana?fecha=${fechaLunes}`,\n          {},\n          { headers: this.getHeaders() }\n        ).toPromise();\n        console.log('=== FRONTEND DEBUG === Clases generadas:', responseGeneracion);\n      } catch (error: any) {\n        console.error('Error al generar clases:', error);\n        // Si es un error 404, probablemente la ruta no est√° disponible en producci√≥n\n        if (error.status === 404) {\n          console.log('La ruta de generaci√≥n de clases no est√° disponible');\n        }\n      }\n\n      // Obtenemos las clases de la semana actual\n      const response: any = await this.http.get(\n        `${this.apiUrl}/clases/semana?fecha=${fechaLunes}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      console.log('=== FRONTEND DEBUG === Respuesta del servidor:', response);\n\n      if (response && response.clases) {\n        // Procesamos las clases de la semana actual\n        this.procesarClases(response.clases, []);\n\n        // Obtenemos las clases especiales (posteriores a la semana actual)\n        await this.cargarClasesEspeciales(fechaLunes);\n      } else {\n        console.error('Formato de respuesta inv√°lido:', response);\n        this.presentToast('Error al cargar las clases');\n      }\n    } catch (error) {\n      console.error('Error al cargar clases:', error);\n      this.presentToast('Error al cargar las clases');\n    }\n  }\n\n  async cargarClasesEspeciales(fechaLunes: string) {\n    try {\n      // Calculamos la fecha del fin de la semana actual\n      const fechaFinSemana = new Date(fechaLunes);\n      fechaFinSemana.setDate(fechaFinSemana.getDate() + 6);\n      fechaFinSemana.setHours(23, 59, 59, 999);\n\n      // Obtenemos las clases especiales (posteriores a la semana actual)\n      const response: any = await this.http.get(\n        `${this.apiUrl}/clases/especiales?fecha=${fechaFinSemana.toISOString()}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      console.log('=== FRONTEND DEBUG === Clases especiales recibidas:', response);\n\n      if (response && response.clases) {\n        // Procesamos las clases especiales\n        this.procesarClasesEspeciales(response.clases);\n      }\n    } catch (error) {\n      console.error('Error al cargar clases especiales:', error);\n    }\n  }\n\n  procesarClasesEspeciales(clases: Clase[]) {\n    if (!clases || clases.length === 0) {\n      this.clasesEspeciales = [];\n      return;\n    }\n\n    // Agrupar las clases especiales por fecha\n    const clasesPorFecha = new Map<string, Clase[]>();\n    \n    clases.forEach(clase => {\n      const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n      const fechaStr = fecha.toISOString().split('T')[0];\n      \n      if (!clasesPorFecha.has(fechaStr)) {\n        clasesPorFecha.set(fechaStr, []);\n      }\n      clasesPorFecha.get(fechaStr)?.push(clase);\n    });\n\n    // Convertir el Map a un array de objetos con nombre y clases\n    this.clasesEspeciales = Array.from(clasesPorFecha.entries()).map(([fechaStr, clases]) => {\n      const fecha = new Date(fechaStr);\n      const diaSemana = this.obtenerDiaSemana(fecha);\n      const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n      const nombre = `${diaSemana} ${fecha.getDate()} ${meses[fecha.getMonth()]}`;\n      \n      // Ordenar las clases por hora de inicio\n      clases.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));\n      \n      return { nombre, clases };\n    });\n\n    // Ordenar las fechas\n    this.clasesEspeciales.sort((a, b) => {\n      const fechaA = new Date(a.nombre.split(' ')[1] + ' ' + a.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n      const fechaB = new Date(b.nombre.split(' ')[1] + ' ' + b.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n      return fechaA.getTime() - fechaB.getTime();\n    });\n\n    console.log('=== FRONTEND DEBUG === Clases especiales procesadas:', this.clasesEspeciales);\n  }\n\n  generarSemanaActual() {\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    \n    const hoy = new Date();\n    const diaSemana = hoy.getDay();\n    const ajuste = diaSemana === 0 ? -6 : 1 - diaSemana;\n    const fechaLunes = new Date(hoy);\n    fechaLunes.setDate(hoy.getDate() + ajuste);\n    \n    this.numeroSemana = this.getNumeroSemana(fechaLunes);\n    \n    this.diasSemana = [];\n    for (let i = 0; i < 7; i++) {\n      const fecha = new Date(fechaLunes);\n      fecha.setDate(fechaLunes.getDate() + i);\n      \n      this.diasSemana.push({\n        nombre: `${dias[fecha.getDay()]} ${fecha.getDate()} ${meses[fecha.getMonth()]}`,\n        clases: []\n      });\n    }\n  }\n\n  procesarClases(clases: Clase[], clasesEspeciales: Clase[]) {\n    // Inicializar el objeto de clases por d√≠a\n    this.clasesPorDia = {\n      'Lunes': [], 'Martes': [], 'Mi√©rcoles': [], 'Jueves': [],\n      'Viernes': [], 'S√°bado': [], 'Domingo': []\n    };\n\n    // Inicializar array de clases especiales\n    this.clasesEspeciales = [];\n\n    console.log('=== FRONTEND DEBUG === Procesando clases:', clases.length);\n    console.log('=== FRONTEND DEBUG === Procesando clases especiales:', clasesEspeciales?.length || 0);\n\n    // Obtener la fecha del lunes de la semana actual\n    const fechaLunes = new Date(this.obtenerFechaLunes());\n    const fechaFinSemana = new Date(fechaLunes);\n    fechaFinSemana.setDate(fechaLunes.getDate() + 6);\n    fechaFinSemana.setHours(23, 59, 59, 999);\n\n    // Procesar clases de la semana actual\n    clases.forEach(clase => {\n      // Asegurarnos de que fecha es un objeto Date\n      const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n      \n      // Si la fecha est√° dentro de la semana actual\n      if (fecha >= fechaLunes && fecha <= fechaFinSemana) {\n        const diaSemana = this.obtenerDiaSemana(fecha);\n        if (this.clasesPorDia[diaSemana]) {\n          this.clasesPorDia[diaSemana].push(clase);\n        }\n      }\n    });\n\n    // Procesar clases especiales futuras\n    if (clasesEspeciales && clasesEspeciales.length > 0) {\n      // Agrupar las clases especiales por fecha\n      const clasesPorFecha = new Map<string, Clase[]>();\n      \n      clasesEspeciales.forEach(clase => {\n        // Asegurarnos de que fecha es un objeto Date\n        const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n        \n        // Solo incluir clases futuras (despu√©s del fin de la semana actual)\n        if (fecha > fechaFinSemana) {\n          const fechaStr = fecha.toISOString().split('T')[0];\n          \n          if (!clasesPorFecha.has(fechaStr)) {\n            clasesPorFecha.set(fechaStr, []);\n          }\n          clasesPorFecha.get(fechaStr)?.push(clase);\n        }\n      });\n\n      // Convertir el Map a un array de objetos con nombre y clases\n      this.clasesEspeciales = Array.from(clasesPorFecha.entries()).map(([fechaStr, clases]) => {\n        const fecha = new Date(fechaStr);\n        const diaSemana = this.obtenerDiaSemana(fecha);\n        const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n        const nombre = `${diaSemana} ${fecha.getDate()} ${meses[fecha.getMonth()]}`;\n        \n        // Ordenar las clases por hora de inicio\n        clases.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));\n        \n        return { nombre, clases };\n      });\n\n      // Ordenar las fechas\n      this.clasesEspeciales.sort((a, b) => {\n        const fechaA = new Date(a.nombre.split(' ')[1] + ' ' + a.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n        const fechaB = new Date(b.nombre.split(' ')[1] + ' ' + b.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n        return fechaA.getTime() - fechaB.getTime();\n      });\n    }\n\n    // Ordenar las clases por hora de inicio en cada d√≠a\n    Object.keys(this.clasesPorDia).forEach(dia => {\n      this.clasesPorDia[dia].sort((a, b) => {\n        return a.horaInicio.localeCompare(b.horaInicio);\n      });\n    });\n\n    // Actualizar el array de d√≠as de la semana con la fecha completa\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    \n    this.diasSemana = Object.keys(this.clasesPorDia).map((dia, index) => {\n      const fecha = new Date(fechaLunes);\n      fecha.setDate(fechaLunes.getDate() + index);\n      const clasesDelDia = this.clasesPorDia[dia];\n      \n      return {\n        nombre: `${dia} ${fecha.getDate()} ${meses[fecha.getMonth()]}`,\n        clases: clasesDelDia\n      };\n    });\n\n    console.log('=== FRONTEND DEBUG === D√≠as de la semana:', this.diasSemana);\n    console.log('=== FRONTEND DEBUG === Clases especiales finales:', this.clasesEspeciales);\n  }\n\n  obtenerDiaSemana(fecha: Date): string {\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];\n    return dias[fecha.getDay()];\n  }\n\n  getMesNombre(mes: number): string {\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    return meses[mes];\n  }\n\n  async reservarClase(claseId: string) {\n    try {\n      const endpoint = this.isAdminOrMaestro ? '/reservas/multiple' : '/reservas';\n      console.log('=== FRONTEND DEBUG === Iniciando reserva:', {\n        endpoint,\n        isAdminOrMaestro: this.isAdminOrMaestro,\n        claseId,\n        headers: this.getHeaders()\n      });\n\n      console.log('=== FRONTEND DEBUG === Enviando petici√≥n a:', `${this.apiUrl}${endpoint}`);\n      \n      const response = await this.http.post(\n        `${this.apiUrl}${endpoint}`,\n        { claseId },\n        { headers: this.getHeaders() }\n      ).toPromise();\n      \n      console.log('=== FRONTEND DEBUG === Respuesta del servidor:', response);\n      this.presentToast('Clase reservada correctamente');\n      this.cargarClasesSemana();\n    } catch (error: any) {\n      console.error('=== FRONTEND DEBUG === Error completo:', error);\n      console.error('=== FRONTEND DEBUG === Error status:', error.status);\n      console.error('=== FRONTEND DEBUG === Error message:', error.error);\n      console.error('=== FRONTEND DEBUG === Error headers:', error.headers);\n      this.presentToast(error.error?.message || 'Error al reservar la clase');\n    }\n  }\n\n  async cancelarReserva(reservaId: string) {\n    try {\n      const response = await this.http.delete(\n        `${this.apiUrl}/reservas/${reservaId}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n      \n      this.presentToast('Reserva cancelada correctamente');\n      // Recargar las clases para actualizar la interfaz\n      await this.cargarClasesSemana();\n    } catch (error: any) {\n      console.error('Error al cancelar:', error);\n      this.presentToast(error.error?.message || 'Error al cancelar la reserva');\n    }\n  }\n\n  tieneReserva(clase: any): boolean {\n    if (this.isAdminOrMaestro) {\n      return false; // Los maestros y admins siempre pueden reservar\n    }\n    return clase.reservas?.some((r: any) => r.atleta._id === this.userId) || false;\n  }\n\n  getReservaUsuario(clase: any): any {\n    if (this.isAdminOrMaestro) {\n      // Para admin/maestro, obtener la √∫ltima reserva que hizo en esta clase\n      return clase.reservas\n        ?.filter((r: any) => r.atleta._id === this.userId)\n        .sort((a: any, b: any) => new Date(b.fechaReserva).getTime() - new Date(a.fechaReserva).getTime())[0];\n    }\n    // Para usuarios normales, obtener su reserva\n    return clase.reservas?.find((r: any) => r.atleta._id === this.userId);\n  }\n}",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "atleta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"pendiente\" | \"confirmada\" | \"cancelada\" | \"en_espera\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Reserva-1"
        },
        {
            "name": "Subscription",
            "id": "interface-Subscription-057261eabbd2973af627e8bc6dd8c63c4307671ae8ee388d32893f05affa76ede1967525532203b9b9c536b2ad08865f2c3e51dcff7aa6cf243fad30b9fce168",
            "file": "GiConnect/src/app/pages/perfil/perfil.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule, Platform, AlertController, ToastController } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { addIcons } from 'ionicons';\nimport { createOutline, cameraOutline, saveOutline } from 'ionicons/icons';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { AuthService } from '../../services/auth.service';\nimport { SuscripcionService } from '../../services/suscripcion.service';\nimport { Suscripcion } from '../../interfaces/suscripcion.interface';\n\ninterface UserData {\n  nombre: string;\n  apellido1: string;\n  apellido2: string;\n  email: string;\n  telefono: string;\n  dni: string;\n  numIBJJF: string;\n  fechaInicio: string | null;\n  cinturon: string;\n  grado: string;\n  fechaDesde: string | null;\n  clasesAsistidas: number;\n  clasesImpartidas: number;\n  role: string;\n  foto: string | null;\n}\n\ninterface Subscription {\n  tipo: string;\n  fechaFin: string;\n}\n\n@Component({\n  selector: 'app-perfil',\n  templateUrl: './perfil.page.html',\n  styleUrls: ['./perfil.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule,\n    FormsModule\n  ]\n})\nexport class PerfilPage implements OnInit {\n  userData: UserData = {\n    nombre: '',\n    apellido1: '',\n    apellido2: '',\n    email: '',\n    telefono: '',\n    dni: '',\n    numIBJJF: '',\n    fechaInicio: null,\n    cinturon: '',\n    grado: '',\n    fechaDesde: null,\n    clasesAsistidas: 0,\n    clasesImpartidas: 0,\n    role: '',\n    foto: null\n  };\n\n  userName: string = '';\n  userRole: string = '';\n  userPhoto: string | null = null;\n  activeSubscription: Suscripcion | null = null;\n\n  constructor(\n    private router: Router,\n    private http: HttpClient,\n    private alertController: AlertController,\n    private toastController: ToastController,\n    private platform: Platform,\n    private authService: AuthService,\n    private suscripcionService: SuscripcionService\n  ) {\n    addIcons({ createOutline, cameraOutline, saveOutline });\n  }\n\n  ngOnInit() {\n    this.loadUserData();\n    this.loadSubscription();\n  }\n\n  loadUserData() {\n    const userInfo = localStorage.getItem('user');\n    if (userInfo) {\n      try {\n        const user = JSON.parse(userInfo);\n        console.log('Usuario cargado:', user); // Para debug\n        this.userData = {\n          ...this.userData,\n          ...user,\n          fechaInicio: user.fechaInicio || null,\n          fechaDesde: user.fechaDesde || null\n        };\n        this.userName = `${user.nombre} ${user.apellido1}`;\n        this.userRole = this.getRoleName(user.role);\n        this.userPhoto = user.foto || null;\n      } catch (error) {\n        console.error('Error parsing user info:', error);\n      }\n    }\n  }\n\n  loadSubscription() {\n    console.log('Cargando suscripciones activas...');\n    this.suscripcionService.getSuscripcionesActivas().subscribe({\n      next: (suscripciones: Suscripcion[]) => {\n        console.log('Suscripciones recibidas:', suscripciones);\n        if (suscripciones && suscripciones.length > 0) {\n          // Ordenar por fecha de fin y tomar la m√°s reciente\n          suscripciones.sort((a, b) => new Date(b.fechaFin).getTime() - new Date(a.fechaFin).getTime());\n          this.activeSubscription = suscripciones[0];\n          console.log('Suscripci√≥n activa:', this.activeSubscription);\n        } else {\n          this.activeSubscription = null;\n          console.log('No hay suscripciones activas');\n        }\n      },\n      error: (error) => {\n        console.error('Error al cargar suscripciones:', error);\n        this.activeSubscription = null;\n      }\n    });\n  }\n\n  isSubscriptionExpired(): boolean {\n    if (!this.activeSubscription) return true;\n    const fechaFin = new Date(this.activeSubscription.fechaFin);\n    const hoy = new Date();\n    return fechaFin < hoy;\n  }\n\n  getSubscriptionStatus(): string {\n    if (!this.activeSubscription) {\n      return 'Sin suscripci√≥n activa';\n    }\n    if (this.isSubscriptionExpired()) {\n      return 'Suscripci√≥n expirada';\n    }\n    return `Suscripci√≥n ${this.activeSubscription.tipo} activa hasta ${new Date(this.activeSubscription.fechaFin).toLocaleDateString('es-ES')}`;\n  }\n\n  getRoleName(role: string): string {\n    switch (role?.toLowerCase()) {\n      case 'admin':\n        return 'Administrador';\n      case 'maestro':\n        return 'Maestro';\n      case 'instructor':\n        return 'Instructor';\n      case 'atleta':\n        return 'Atleta';\n      default:\n        console.warn('Rol no reconocido:', role);\n        return 'Usuario';\n    }\n  }\n\n  async updateField(field: keyof UserData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No hay token de autenticaci√≥n');\n      }\n\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/${field}`,\n        { [field]: this.userData[field] },\n        { headers }\n      ).toPromise();\n\n      // Actualizar el localStorage\n      const userInfo = localStorage.getItem('user');\n      if (userInfo) {\n        const user = JSON.parse(userInfo);\n        user[field] = this.userData[field];\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n\n      this.presentToast('Campo actualizado correctamente');\n    } catch (error) {\n      console.error(`Error al actualizar ${field}:`, error);\n      this.presentToast(`Error al actualizar ${field}`);\n    }\n  }\n\n  async changePhoto() {\n    if (this.platform.is('hybrid')) {\n      const alert = await this.alertController.create({\n        header: 'Seleccionar fuente',\n        cssClass: 'image-source-alert',\n        buttons: [\n          {\n            text: 'C√°mara',\n            cssClass: 'alert-button',\n            handler: () => {\n              this.takePicture();\n            }\n          },\n          {\n            text: 'Galer√≠a',\n            cssClass: 'alert-button',\n            handler: () => {\n              this.pickFromGallery();\n            }\n          },\n          {\n            text: 'Cancelar',\n            cssClass: 'alert-button-cancel',\n            role: 'cancel'\n          }\n        ],\n        backdropDismiss: true\n      });\n\n      await alert.present();\n    } else {\n      // En web, usamos el input file\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      input.onchange = (event: any) => {\n        const file = event.target.files[0];\n        if (file) {\n          this.handleFile(file);\n        }\n      };\n      input.click();\n    }\n  }\n\n  private async handleFile(file: File) {\n    try {\n      const base64 = await this.fileToBase64(file);\n      await this.updateUserPhoto(base64);\n    } catch (error) {\n      console.error('Error al procesar el archivo:', error);\n      this.presentToast('Error al procesar la imagen');\n    }\n  }\n\n  private fileToBase64(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  private async updateUserPhoto(base64Image: string) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No hay token de autenticaci√≥n');\n      }\n\n      // Comprimir la imagen antes de enviarla\n      const compressedImage = await this.authService.compressImage(base64Image);\n      console.log('Tama√±o de la imagen comprimida:', compressedImage.length);\n\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/me/photo`,\n        { foto: compressedImage },\n        { headers }\n      ).toPromise();\n\n      // Actualizar la foto en el localStorage\n      const userInfo = localStorage.getItem('user');\n      if (userInfo) {\n        const user = JSON.parse(userInfo);\n        user.foto = compressedImage;\n        localStorage.setItem('user', JSON.stringify(user));\n        this.userPhoto = compressedImage;\n      }\n\n      this.presentToast('Foto actualizada correctamente');\n    } catch (error: any) {\n      console.error('Error al actualizar la foto:', error);\n      if (error.status === 413) {\n        this.presentToast('La imagen es demasiado grande. Por favor, selecciona una imagen m√°s peque√±a.');\n      } else {\n        this.presentToast(error.error?.error || 'Error al actualizar la foto. Por favor, int√©ntalo de nuevo.');\n      }\n    }\n  }\n\n  private async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message,\n      duration: 2000,\n      position: 'middle',\n      cssClass: 'success-toast'\n    });\n    await toast.present();\n  }\n\n  async saveChanges() {\n    try {\n      const userInfo = localStorage.getItem('user');\n      if (!userInfo) {\n        throw new Error('No hay usuario registrado');\n      }\n\n      const user = JSON.parse(userInfo);\n      console.log('Usuario a actualizar:', user); // Para debug\n      const token = localStorage.getItem('token');\n\n      if (!user._id) { // Cambiado de user.id a user._id\n        throw new Error('ID de usuario no encontrado');\n      }\n\n      if (!token) {\n        throw new Error('Token de autorizaci√≥n no encontrado');\n      }\n\n      // Configurar headers con el token\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n      \n      // Actualizar en la base de datos\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/${user._id}`, // Cambiado de user.id a user._id\n        this.userData,\n        { headers }\n      ).toPromise();\n      \n      if (response) {\n        // Actualizar localStorage con los nuevos datos\n        const updatedUser = { ...user, ...this.userData };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        \n        // Actualizar las variables locales\n        this.userName = `${this.userData.nombre} ${this.userData.apellido1}`;\n        this.userRole = this.getRoleName(this.userData.role);\n        \n        // Mostrar alerta de √©xito\n        const alert = await this.alertController.create({\n          header: '√âxito',\n          message: 'Los cambios se han guardado correctamente',\n          buttons: [\n            {\n              text: 'OK',\n              handler: () => {\n                this.router.navigate(['/home']);\n              }\n            }\n          ]\n        });\n\n        await alert.present();\n      }\n    } catch (error) {\n      console.error('Error al guardar los cambios:', error);\n      // Mostrar alerta de error\n      const alert = await this.alertController.create({\n        header: 'Error',\n        message: 'Ha ocurrido un error al guardar los cambios. Por favor, int√©ntalo de nuevo.',\n        buttons: ['OK']\n      });\n\n      await alert.present();\n    }\n  }\n\n  async pickFromGallery() {\n    try {\n      console.log('Iniciando selecci√≥n de foto desde galer√≠a');\n      \n      // Verificar permisos espec√≠ficamente para la galer√≠a\n      const permissionStatus = await Camera.checkPermissions();\n      console.log('Estado de permisos:', permissionStatus);\n      \n      if (permissionStatus.photos !== 'granted') {\n        console.log('Solicitando permisos de galer√≠a');\n        const requestResult = await Camera.requestPermissions({\n          permissions: ['photos']\n        });\n        console.log('Resultado de solicitud de permisos:', requestResult);\n        \n        if (requestResult.photos !== 'granted') {\n          this.presentToast('Se necesita permiso para acceder a la galer√≠a');\n          return;\n        }\n      }\n\n      console.log('Configurando opciones de la galer√≠a');\n      const options: any = {\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Photos,\n        correctOrientation: true\n      };\n      \n      console.log('Opciones de la galer√≠a:', options);\n      console.log('Intentando obtener foto');\n      \n      const image = await Camera.getPhoto(options);\n      console.log('Foto obtenida:', image);\n\n      if (image.base64String) {\n        console.log('Procesando imagen base64');\n        const base64Image = `data:image/${image.format};base64,${image.base64String}`;\n        await this.updateUserPhoto(base64Image);\n        console.log('Imagen procesada y enviada al servidor');\n      }\n    } catch (error: any) {\n      console.error('Error detallado al seleccionar la foto:', error);\n      if (error.message === 'User cancelled photos app' || error.message === 'User cancelled photos') {\n        console.log('Usuario cancel√≥ la selecci√≥n');\n        return;\n      }\n      this.presentToast('Error al seleccionar la foto. Por favor, int√©ntalo de nuevo.');\n    }\n  }\n\n  async takePicture() {\n    try {\n      console.log('Iniciando captura de foto');\n      \n      // Verificar permisos espec√≠ficamente para la c√°mara\n      const permissionStatus = await Camera.checkPermissions();\n      console.log('Estado de permisos:', permissionStatus);\n      \n      if (permissionStatus.camera !== 'granted') {\n        console.log('Solicitando permisos de c√°mara');\n        const requestResult = await Camera.requestPermissions({\n          permissions: ['camera']\n        });\n        console.log('Resultado de solicitud de permisos:', requestResult);\n        \n        if (requestResult.camera !== 'granted') {\n          this.presentToast('Se necesita permiso para acceder a la c√°mara');\n          return;\n        }\n      }\n\n      console.log('Configurando opciones de la c√°mara');\n      const options: any = {\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Camera,\n        correctOrientation: true\n      };\n      \n      console.log('Opciones de la c√°mara:', options);\n      console.log('Intentando obtener foto');\n      \n      const image = await Camera.getPhoto(options);\n      console.log('Foto obtenida:', image);\n\n      if (image.base64String) {\n        console.log('Procesando imagen base64');\n        const base64Image = `data:image/${image.format};base64,${image.base64String}`;\n        await this.updateUserPhoto(base64Image);\n        console.log('Imagen procesada y enviada al servidor');\n      }\n    } catch (error: any) {\n      console.error('Error detallado al tomar la foto:', error);\n      if (error.message === 'User cancelled photos app' || error.message === 'User cancelled photos') {\n        console.log('Usuario cancel√≥ la captura');\n        return;\n      }\n      this.presentToast('Error al tomar la foto. Por favor, int√©ntalo de nuevo.');\n    }\n  }\n} ",
            "properties": [
                {
                    "name": "fechaFin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tipo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Suscripcion",
            "id": "interface-Suscripcion-ecbcae4daacf3f2398a79b1f76f96398bb86a605b8d3bc67f939f632084cb8e2616386adb307ebfc807a75947c9de9cedcb5283036119c1d2672bf35aa541ba1",
            "file": "GiConnect/src/app/interfaces/suscripcion.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Suscripcion {\n  _id: string;\n  tipo: string;\n  fechaInicio: Date;\n  fechaFin: Date;\n  precio: number;\n  atleta: string;\n  pagado: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface NuevaSuscripcion {\n  tipo: string;\n  fechaInicio: Date;\n  fechaFin: Date;\n  precio: number;\n  atleta: string;\n  pagado: boolean;\n}\n\nexport interface TipoSuscripcion {\n  id: string;\n  nombre: string;\n  descripcion: string;\n  precio: number;\n  meses: number;\n  caracteristicas: string[];\n} ",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "atleta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "fechaFin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fechaInicio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pagado",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "precio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tipo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TipoSuscripcion",
            "id": "interface-TipoSuscripcion-576d1ad12315679024bd03b5a937d010964f5903cf064f898564b32ed5078d59563d0adaec1262a55ab79d733fb12e78ae0f8e27d33aed4ced33ad29ab996378",
            "file": "GiConnect/src/app/constants/suscripciones.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TipoSuscripcion {\n  id: string;\n  nombre: string;\n  precio: number;\n  meses: number;\n}\n\nexport const TIPOS_SUSCRIPCION: TipoSuscripcion[] = [\n  {\n    id: 'mensual',\n    nombre: 'Mensual',\n    precio: 50.00,\n    meses: 1\n  },\n  {\n    id: 'trimestral',\n    nombre: 'Trimestral',\n    precio: 125.00,\n    meses: 3\n  },\n  {\n    id: 'semestral',\n    nombre: 'Semestral',\n    precio: 255.00,\n    meses: 6\n  },\n  {\n    id: 'anual',\n    nombre: 'Anual',\n    precio: 510.00,\n    meses: 12\n  }\n]; ",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "meses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "precio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TipoSuscripcion",
            "id": "interface-TipoSuscripcion-ecbcae4daacf3f2398a79b1f76f96398bb86a605b8d3bc67f939f632084cb8e2616386adb307ebfc807a75947c9de9cedcb5283036119c1d2672bf35aa541ba1-1",
            "file": "GiConnect/src/app/interfaces/suscripcion.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Suscripcion {\n  _id: string;\n  tipo: string;\n  fechaInicio: Date;\n  fechaFin: Date;\n  precio: number;\n  atleta: string;\n  pagado: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface NuevaSuscripcion {\n  tipo: string;\n  fechaInicio: Date;\n  fechaFin: Date;\n  precio: number;\n  atleta: string;\n  pagado: boolean;\n}\n\nexport interface TipoSuscripcion {\n  id: string;\n  nombre: string;\n  descripcion: string;\n  precio: number;\n  meses: number;\n  caracteristicas: string[];\n} ",
            "properties": [
                {
                    "name": "caracteristicas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "descripcion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "meses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "precio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TipoSuscripcion-1"
        },
        {
            "name": "User",
            "id": "interface-User-9eee6e9b0dc7eaf78f8bad73cec7f7e20dbbc0323360c97ec2fe2940e2e724eb3307cb4a36d55f34ef33740447014866567fe280b759f0ecfdd012478f69b131",
            "file": "GiConnect/src/app/interfaces/user.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  _id: string;\n  foto: string;\n  nombre: string;\n  apellido1: string;\n  apellido2?: string;\n  dni: string;\n  telefono: string;\n  email: string;\n  role: 'atleta' | 'instructor' | 'maestro' | 'admin';\n  numIBJJF?: string;\n  fechaInicio?: Date;\n  cinturon?: string;\n  grado?: number;\n  fechaDesde?: Date;\n  clasesAsistidas?: number;\n  clasesImpartidas?: number;\n  activo: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n} ",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "apellido1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "apellido2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cinturon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "clasesAsistidas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "clasesImpartidas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "fechaDesde",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "fechaInicio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "grado",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "numIBJJF",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"atleta\" | \"instructor\" | \"maestro\" | \"admin\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "telefono",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserData",
            "id": "interface-UserData-057261eabbd2973af627e8bc6dd8c63c4307671ae8ee388d32893f05affa76ede1967525532203b9b9c536b2ad08865f2c3e51dcff7aa6cf243fad30b9fce168",
            "file": "GiConnect/src/app/pages/perfil/perfil.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule, Platform, AlertController, ToastController } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { addIcons } from 'ionicons';\nimport { createOutline, cameraOutline, saveOutline } from 'ionicons/icons';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { AuthService } from '../../services/auth.service';\nimport { SuscripcionService } from '../../services/suscripcion.service';\nimport { Suscripcion } from '../../interfaces/suscripcion.interface';\n\ninterface UserData {\n  nombre: string;\n  apellido1: string;\n  apellido2: string;\n  email: string;\n  telefono: string;\n  dni: string;\n  numIBJJF: string;\n  fechaInicio: string | null;\n  cinturon: string;\n  grado: string;\n  fechaDesde: string | null;\n  clasesAsistidas: number;\n  clasesImpartidas: number;\n  role: string;\n  foto: string | null;\n}\n\ninterface Subscription {\n  tipo: string;\n  fechaFin: string;\n}\n\n@Component({\n  selector: 'app-perfil',\n  templateUrl: './perfil.page.html',\n  styleUrls: ['./perfil.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule,\n    FormsModule\n  ]\n})\nexport class PerfilPage implements OnInit {\n  userData: UserData = {\n    nombre: '',\n    apellido1: '',\n    apellido2: '',\n    email: '',\n    telefono: '',\n    dni: '',\n    numIBJJF: '',\n    fechaInicio: null,\n    cinturon: '',\n    grado: '',\n    fechaDesde: null,\n    clasesAsistidas: 0,\n    clasesImpartidas: 0,\n    role: '',\n    foto: null\n  };\n\n  userName: string = '';\n  userRole: string = '';\n  userPhoto: string | null = null;\n  activeSubscription: Suscripcion | null = null;\n\n  constructor(\n    private router: Router,\n    private http: HttpClient,\n    private alertController: AlertController,\n    private toastController: ToastController,\n    private platform: Platform,\n    private authService: AuthService,\n    private suscripcionService: SuscripcionService\n  ) {\n    addIcons({ createOutline, cameraOutline, saveOutline });\n  }\n\n  ngOnInit() {\n    this.loadUserData();\n    this.loadSubscription();\n  }\n\n  loadUserData() {\n    const userInfo = localStorage.getItem('user');\n    if (userInfo) {\n      try {\n        const user = JSON.parse(userInfo);\n        console.log('Usuario cargado:', user); // Para debug\n        this.userData = {\n          ...this.userData,\n          ...user,\n          fechaInicio: user.fechaInicio || null,\n          fechaDesde: user.fechaDesde || null\n        };\n        this.userName = `${user.nombre} ${user.apellido1}`;\n        this.userRole = this.getRoleName(user.role);\n        this.userPhoto = user.foto || null;\n      } catch (error) {\n        console.error('Error parsing user info:', error);\n      }\n    }\n  }\n\n  loadSubscription() {\n    console.log('Cargando suscripciones activas...');\n    this.suscripcionService.getSuscripcionesActivas().subscribe({\n      next: (suscripciones: Suscripcion[]) => {\n        console.log('Suscripciones recibidas:', suscripciones);\n        if (suscripciones && suscripciones.length > 0) {\n          // Ordenar por fecha de fin y tomar la m√°s reciente\n          suscripciones.sort((a, b) => new Date(b.fechaFin).getTime() - new Date(a.fechaFin).getTime());\n          this.activeSubscription = suscripciones[0];\n          console.log('Suscripci√≥n activa:', this.activeSubscription);\n        } else {\n          this.activeSubscription = null;\n          console.log('No hay suscripciones activas');\n        }\n      },\n      error: (error) => {\n        console.error('Error al cargar suscripciones:', error);\n        this.activeSubscription = null;\n      }\n    });\n  }\n\n  isSubscriptionExpired(): boolean {\n    if (!this.activeSubscription) return true;\n    const fechaFin = new Date(this.activeSubscription.fechaFin);\n    const hoy = new Date();\n    return fechaFin < hoy;\n  }\n\n  getSubscriptionStatus(): string {\n    if (!this.activeSubscription) {\n      return 'Sin suscripci√≥n activa';\n    }\n    if (this.isSubscriptionExpired()) {\n      return 'Suscripci√≥n expirada';\n    }\n    return `Suscripci√≥n ${this.activeSubscription.tipo} activa hasta ${new Date(this.activeSubscription.fechaFin).toLocaleDateString('es-ES')}`;\n  }\n\n  getRoleName(role: string): string {\n    switch (role?.toLowerCase()) {\n      case 'admin':\n        return 'Administrador';\n      case 'maestro':\n        return 'Maestro';\n      case 'instructor':\n        return 'Instructor';\n      case 'atleta':\n        return 'Atleta';\n      default:\n        console.warn('Rol no reconocido:', role);\n        return 'Usuario';\n    }\n  }\n\n  async updateField(field: keyof UserData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No hay token de autenticaci√≥n');\n      }\n\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/${field}`,\n        { [field]: this.userData[field] },\n        { headers }\n      ).toPromise();\n\n      // Actualizar el localStorage\n      const userInfo = localStorage.getItem('user');\n      if (userInfo) {\n        const user = JSON.parse(userInfo);\n        user[field] = this.userData[field];\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n\n      this.presentToast('Campo actualizado correctamente');\n    } catch (error) {\n      console.error(`Error al actualizar ${field}:`, error);\n      this.presentToast(`Error al actualizar ${field}`);\n    }\n  }\n\n  async changePhoto() {\n    if (this.platform.is('hybrid')) {\n      const alert = await this.alertController.create({\n        header: 'Seleccionar fuente',\n        cssClass: 'image-source-alert',\n        buttons: [\n          {\n            text: 'C√°mara',\n            cssClass: 'alert-button',\n            handler: () => {\n              this.takePicture();\n            }\n          },\n          {\n            text: 'Galer√≠a',\n            cssClass: 'alert-button',\n            handler: () => {\n              this.pickFromGallery();\n            }\n          },\n          {\n            text: 'Cancelar',\n            cssClass: 'alert-button-cancel',\n            role: 'cancel'\n          }\n        ],\n        backdropDismiss: true\n      });\n\n      await alert.present();\n    } else {\n      // En web, usamos el input file\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      input.onchange = (event: any) => {\n        const file = event.target.files[0];\n        if (file) {\n          this.handleFile(file);\n        }\n      };\n      input.click();\n    }\n  }\n\n  private async handleFile(file: File) {\n    try {\n      const base64 = await this.fileToBase64(file);\n      await this.updateUserPhoto(base64);\n    } catch (error) {\n      console.error('Error al procesar el archivo:', error);\n      this.presentToast('Error al procesar la imagen');\n    }\n  }\n\n  private fileToBase64(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  private async updateUserPhoto(base64Image: string) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No hay token de autenticaci√≥n');\n      }\n\n      // Comprimir la imagen antes de enviarla\n      const compressedImage = await this.authService.compressImage(base64Image);\n      console.log('Tama√±o de la imagen comprimida:', compressedImage.length);\n\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/me/photo`,\n        { foto: compressedImage },\n        { headers }\n      ).toPromise();\n\n      // Actualizar la foto en el localStorage\n      const userInfo = localStorage.getItem('user');\n      if (userInfo) {\n        const user = JSON.parse(userInfo);\n        user.foto = compressedImage;\n        localStorage.setItem('user', JSON.stringify(user));\n        this.userPhoto = compressedImage;\n      }\n\n      this.presentToast('Foto actualizada correctamente');\n    } catch (error: any) {\n      console.error('Error al actualizar la foto:', error);\n      if (error.status === 413) {\n        this.presentToast('La imagen es demasiado grande. Por favor, selecciona una imagen m√°s peque√±a.');\n      } else {\n        this.presentToast(error.error?.error || 'Error al actualizar la foto. Por favor, int√©ntalo de nuevo.');\n      }\n    }\n  }\n\n  private async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message,\n      duration: 2000,\n      position: 'middle',\n      cssClass: 'success-toast'\n    });\n    await toast.present();\n  }\n\n  async saveChanges() {\n    try {\n      const userInfo = localStorage.getItem('user');\n      if (!userInfo) {\n        throw new Error('No hay usuario registrado');\n      }\n\n      const user = JSON.parse(userInfo);\n      console.log('Usuario a actualizar:', user); // Para debug\n      const token = localStorage.getItem('token');\n\n      if (!user._id) { // Cambiado de user.id a user._id\n        throw new Error('ID de usuario no encontrado');\n      }\n\n      if (!token) {\n        throw new Error('Token de autorizaci√≥n no encontrado');\n      }\n\n      // Configurar headers con el token\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n      \n      // Actualizar en la base de datos\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/${user._id}`, // Cambiado de user.id a user._id\n        this.userData,\n        { headers }\n      ).toPromise();\n      \n      if (response) {\n        // Actualizar localStorage con los nuevos datos\n        const updatedUser = { ...user, ...this.userData };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        \n        // Actualizar las variables locales\n        this.userName = `${this.userData.nombre} ${this.userData.apellido1}`;\n        this.userRole = this.getRoleName(this.userData.role);\n        \n        // Mostrar alerta de √©xito\n        const alert = await this.alertController.create({\n          header: '√âxito',\n          message: 'Los cambios se han guardado correctamente',\n          buttons: [\n            {\n              text: 'OK',\n              handler: () => {\n                this.router.navigate(['/home']);\n              }\n            }\n          ]\n        });\n\n        await alert.present();\n      }\n    } catch (error) {\n      console.error('Error al guardar los cambios:', error);\n      // Mostrar alerta de error\n      const alert = await this.alertController.create({\n        header: 'Error',\n        message: 'Ha ocurrido un error al guardar los cambios. Por favor, int√©ntalo de nuevo.',\n        buttons: ['OK']\n      });\n\n      await alert.present();\n    }\n  }\n\n  async pickFromGallery() {\n    try {\n      console.log('Iniciando selecci√≥n de foto desde galer√≠a');\n      \n      // Verificar permisos espec√≠ficamente para la galer√≠a\n      const permissionStatus = await Camera.checkPermissions();\n      console.log('Estado de permisos:', permissionStatus);\n      \n      if (permissionStatus.photos !== 'granted') {\n        console.log('Solicitando permisos de galer√≠a');\n        const requestResult = await Camera.requestPermissions({\n          permissions: ['photos']\n        });\n        console.log('Resultado de solicitud de permisos:', requestResult);\n        \n        if (requestResult.photos !== 'granted') {\n          this.presentToast('Se necesita permiso para acceder a la galer√≠a');\n          return;\n        }\n      }\n\n      console.log('Configurando opciones de la galer√≠a');\n      const options: any = {\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Photos,\n        correctOrientation: true\n      };\n      \n      console.log('Opciones de la galer√≠a:', options);\n      console.log('Intentando obtener foto');\n      \n      const image = await Camera.getPhoto(options);\n      console.log('Foto obtenida:', image);\n\n      if (image.base64String) {\n        console.log('Procesando imagen base64');\n        const base64Image = `data:image/${image.format};base64,${image.base64String}`;\n        await this.updateUserPhoto(base64Image);\n        console.log('Imagen procesada y enviada al servidor');\n      }\n    } catch (error: any) {\n      console.error('Error detallado al seleccionar la foto:', error);\n      if (error.message === 'User cancelled photos app' || error.message === 'User cancelled photos') {\n        console.log('Usuario cancel√≥ la selecci√≥n');\n        return;\n      }\n      this.presentToast('Error al seleccionar la foto. Por favor, int√©ntalo de nuevo.');\n    }\n  }\n\n  async takePicture() {\n    try {\n      console.log('Iniciando captura de foto');\n      \n      // Verificar permisos espec√≠ficamente para la c√°mara\n      const permissionStatus = await Camera.checkPermissions();\n      console.log('Estado de permisos:', permissionStatus);\n      \n      if (permissionStatus.camera !== 'granted') {\n        console.log('Solicitando permisos de c√°mara');\n        const requestResult = await Camera.requestPermissions({\n          permissions: ['camera']\n        });\n        console.log('Resultado de solicitud de permisos:', requestResult);\n        \n        if (requestResult.camera !== 'granted') {\n          this.presentToast('Se necesita permiso para acceder a la c√°mara');\n          return;\n        }\n      }\n\n      console.log('Configurando opciones de la c√°mara');\n      const options: any = {\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Camera,\n        correctOrientation: true\n      };\n      \n      console.log('Opciones de la c√°mara:', options);\n      console.log('Intentando obtener foto');\n      \n      const image = await Camera.getPhoto(options);\n      console.log('Foto obtenida:', image);\n\n      if (image.base64String) {\n        console.log('Procesando imagen base64');\n        const base64Image = `data:image/${image.format};base64,${image.base64String}`;\n        await this.updateUserPhoto(base64Image);\n        console.log('Imagen procesada y enviada al servidor');\n      }\n    } catch (error: any) {\n      console.error('Error detallado al tomar la foto:', error);\n      if (error.message === 'User cancelled photos app' || error.message === 'User cancelled photos') {\n        console.log('Usuario cancel√≥ la captura');\n        return;\n      }\n      this.presentToast('Error al tomar la foto. Por favor, int√©ntalo de nuevo.');\n    }\n  }\n} ",
            "properties": [
                {
                    "name": "apellido1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "apellido2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "cinturon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "clasesAsistidas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "clasesImpartidas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fechaDesde",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "fechaInicio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "grado",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "numIBJJF",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "telefono",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Usuario",
            "id": "interface-Usuario-d605f949aaeb502f1a6aee5db50a9676ce8de95218067016a128b4af4baf32aeb45416d9294808ef9f46dd8de78cdc0391267c44ec0af64c02cf3932e9970e70",
            "file": "GiConnect/src/app/pages/modificar-usuario/modificar-usuario.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from '../../services/auth.service';\n\ninterface Usuario {\n  _id: string;\n  nombre: string;\n  apellido1: string;\n  apellido2?: string;\n  email: string;\n  role: string;\n  foto?: string;\n}\n\n@Component({\n  selector: 'app-modificar-usuario',\n  templateUrl: './modificar-usuario.page.html',\n  styleUrls: ['./modificar-usuario.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule,\n    RouterModule\n  ]\n})\nexport class ModificarUsuarioPage implements OnInit {\n  usuarios: Usuario[] = [];\n  loading: boolean = true;\n  error: string | null = null;\n  currentUserRole: string = '';\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit() {\n    this.loadUsers();\n  }\n\n  private getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('No hay token de autenticaci√≥n');\n    }\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n\n  async loadUsers() {\n    try {\n      this.loading = true;\n      const currentUser = this.authService.getUser();\n      this.currentUserRole = currentUser?.role || '';\n\n      const response = await this.http.get<Usuario[]>(\n        `${environment.apiUrl}/users`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      if (response) {\n        // Filtrar usuarios seg√∫n el rol del usuario actual\n        this.usuarios = response.filter(user => {\n          if (this.currentUserRole === 'admin') {\n            return user.role !== 'admin';\n          } else if (this.currentUserRole === 'maestro') {\n            return user.role !== 'admin' && user.role !== 'maestro';\n          }\n          return false;\n        });\n      }\n    } catch (error: any) {\n      console.error('Error al cargar usuarios:', error);\n      this.error = 'Error al cargar la lista de usuarios';\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  getRoleName(role: string): string {\n    switch (role?.toLowerCase()) {\n      case 'admin':\n        return 'Administrador';\n      case 'maestro':\n        return 'Maestro';\n      case 'instructor':\n        return 'Instructor';\n      case 'atleta':\n        return 'Atleta';\n      default:\n        return 'Usuario';\n    }\n  }\n} ",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "apellido1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "apellido2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-8140bf91b4312c778bfd5149cdc826f83ef3ec1c5839b6ac82d14aa4a7c1bb0b88edfda30126df4b5043b1021504e72effde736de07b8ffb7b2e0a2316879eea",
            "file": "GiConnect/src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user$",
                    "defaultValue": "this.userSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkStoredUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "compressImage",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "600"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "600",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBase64Size",
                    "args": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "base64String",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValidEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "userData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "userData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requestPasswordReset",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { Platform } from '@ionic/angular';\nimport { catchError } from 'rxjs/operators';\n\ninterface AuthResponse {\n  token: string;\n  user: {\n    _id: string;\n    email: string;\n    nombre: string;\n    apellido1: string;\n    apellido2?: string;\n    role: string;\n    [key: string]: any;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl: string;\n  private userSubject = new BehaviorSubject<any>(null);\n  public user$ = this.userSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private platform: Platform\n  ) {\n    // Usar la URL de producci√≥n para todas las plataformas\n    this.apiUrl = 'https://giconnect-production.up.railway.app/api';\n    console.log('üåê URL base configurada:', this.apiUrl);\n    console.log('üì± Plataforma:', this.platform.platforms());\n    \n    // Inicializar el estado del usuario\n    this.checkStoredUser();\n  }\n\n  private checkStoredUser() {\n    const user = localStorage.getItem('user');\n    if (user) {\n      this.userSubject.next(JSON.parse(user));\n    }\n  }\n\n  async login(credentials: { email: string; password: string }) {\n    try {\n      console.log('üìù Intentando login con:', credentials);\n      console.log('üåê URL completa:', `${this.apiUrl}/auth/login`);\n      console.log('üîß Platform:', this.platform.platforms());\n      console.log('üì± Es Android:', this.platform.is('android'));\n      console.log('üçé Es iOS:', this.platform.is('ios'));\n      \n      if (!credentials.email || !credentials.password) {\n        throw new Error('Por favor, completa todos los campos');\n      }\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      });\n\n      console.log('üì§ Headers:', headers);\n      console.log('üì¶ Body:', JSON.stringify(credentials));\n\n      const response = await firstValueFrom(\n        this.http.post<AuthResponse>(\n          `${this.apiUrl}/auth/login`,\n          credentials,\n          { \n            headers,\n            withCredentials: true\n          }\n        ).pipe(\n          catchError((error: HttpErrorResponse) => {\n            console.error('‚ùå Error en la petici√≥n:', {\n              status: error.status,\n              statusText: error.statusText,\n              error: error.error,\n              url: error.url,\n              headers: error.headers,\n              message: error.message,\n              platform: this.platform.platforms(),\n              isAndroid: this.platform.is('android'),\n              isIOS: this.platform.is('ios')\n            });\n            throw error;\n          })\n        )\n      );\n\n      console.log('üì• Respuesta del servidor:', response);\n\n      if (response && response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        this.userSubject.next(response.user);\n        return response;\n      } else {\n        throw new Error('Respuesta del servidor inv√°lida');\n      }\n    } catch (error: any) {\n      console.error('‚ùå Error en login:', error);\n      if (error instanceof HttpErrorResponse) {\n        console.error('Detalles del error:', {\n          status: error.status,\n          statusText: error.statusText,\n          error: error.error,\n          url: error.url,\n          headers: error.headers\n        });\n        if (error.status === 401) {\n          throw new Error('Credenciales inv√°lidas');\n        } else if (error.status === 400) {\n          throw new Error(error.error?.error || 'Datos de entrada inv√°lidos');\n        }\n      }\n      throw new Error(error.message || 'Error al iniciar sesi√≥n');\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async register(userData: any) {\n    try {\n      console.log('üìù Intentando registro con:', userData);\n      console.log('üåê URL:', `${this.apiUrl}/auth/register`);\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n\n      console.log('üì§ Headers:', headers);\n      console.log('üì¶ Datos a enviar:', JSON.stringify(userData, null, 2));\n\n      const response = await firstValueFrom(\n        this.http.post<AuthResponse>(\n          `${this.apiUrl}/auth/register`,\n          userData,\n          { headers }\n        )\n      );\n\n      console.log('üì• Respuesta del servidor:', response);\n\n      if (response && response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user));\n        return response;\n      }\n      throw new Error('Error en el registro');\n    } catch (error: any) {\n      console.error('‚ùå Error en registro:', error);\n      if (error instanceof HttpErrorResponse) {\n        console.error('Detalles del error:', {\n          status: error.status,\n          statusText: error.statusText,\n          error: error.error,\n          url: error.url,\n          headers: error.headers\n        });\n        \n        if (error.status === 400) {\n          const errorMessage = error.error?.error || error.error?.message || '';\n          console.log('Mensaje de error recibido:', errorMessage);\n          console.log('Error completo:', JSON.stringify(error.error, null, 2));\n          \n          if (error.error?.errors) {\n            const validationErrors = error.error.errors;\n            const errorMessages = Object.values(validationErrors).map((err: any) => err.message);\n            throw new Error(errorMessages.join(', '));\n          }\n          \n          if (errorMessage.toLowerCase().includes('dni')) {\n            throw new Error('Ya existe un usuario con este DNI');\n          } else if (errorMessage.toLowerCase().includes('telefono')) {\n            throw new Error('Ya existe un usuario con este tel√©fono');\n          } else if (errorMessage.toLowerCase().includes('email')) {\n            throw new Error('Ya existe un usuario con este email');\n          }\n          throw new Error(errorMessage || 'Datos de entrada inv√°lidos');\n        }\n      }\n      throw new Error(error.message || 'Error en el registro');\n    }\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.userSubject.next(null);\n    // Limpiar el formulario de login\n    const loginForm = document.querySelector('app-login form');\n    if (loginForm) {\n      (loginForm as HTMLFormElement).reset();\n    }\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  getUser(): any {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  // Solicitar recuperaci√≥n de contrase√±a\n  requestPasswordReset(email: string): Observable<any> {\n    console.log('üåê URL de recuperaci√≥n:', `${this.apiUrl}/auth/request-password-reset`);\n    return this.http.post(`${this.apiUrl}/auth/request-password-reset`, { email });\n  }\n\n  // Verificar c√≥digo y actualizar contrase√±a\n  resetPassword(email: string, code: string, newPassword: string): Observable<any> {\n    console.log('üåê URL de reset:', `${this.apiUrl}/auth/reset-password`);\n    return this.http.post(`${this.apiUrl}/auth/reset-password`, {\n      email,\n      code,\n      newPassword\n    });\n  }\n\n  async compressImage(base64String: string, maxWidth: number = 600): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.src = base64String;\n      \n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        let width = img.width;\n        let height = img.height;\n        \n        // Calcular nuevas dimensiones manteniendo la proporci√≥n\n        if (width > maxWidth) {\n          height = Math.round((height * maxWidth) / width);\n          width = maxWidth;\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          reject(new Error('No se pudo crear el contexto del canvas'));\n          return;\n        }\n        \n        // Dibujar la imagen redimensionada\n        ctx.drawImage(img, 0, 0, width, height);\n        \n        // Funci√≥n para comprimir con diferentes calidades hasta alcanzar el tama√±o deseado\n        const compressWithQuality = (quality: number): string => {\n          return canvas.toDataURL('image/jpeg', quality);\n        };\n\n        // Intentar diferentes niveles de calidad hasta que la imagen sea lo suficientemente peque√±a\n        const maxSize = 500 * 1024; // 500KB m√°ximo\n        let quality = 0.7;\n        let compressedBase64 = compressWithQuality(quality);\n        \n        // Si la imagen es demasiado grande, reducir la calidad progresivamente\n        while (this.getBase64Size(compressedBase64) > maxSize && quality > 0.1) {\n          quality -= 0.1;\n          compressedBase64 = compressWithQuality(quality);\n        }\n\n        // Si a√∫n es demasiado grande, reducir el tama√±o\n        if (this.getBase64Size(compressedBase64) > maxSize) {\n          width = Math.round(width * 0.8);\n          height = Math.round(height * 0.8);\n          canvas.width = width;\n          canvas.height = height;\n          ctx.drawImage(img, 0, 0, width, height);\n          compressedBase64 = compressWithQuality(0.5);\n        }\n\n        console.log('Tama√±o final de la imagen:', this.getBase64Size(compressedBase64) / 1024, 'KB');\n        resolve(compressedBase64);\n      };\n      \n      img.onerror = () => {\n        reject(new Error('Error al cargar la imagen'));\n      };\n    });\n  }\n\n  private getBase64Size(base64String: string): number {\n    // Eliminar el prefijo de la cadena base64\n    const base64 = base64String.split(',')[1];\n    // Calcular el tama√±o aproximado en bytes\n    return Math.ceil((base64.length * 3) / 4);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ChatService",
            "id": "injectable-ChatService-4adada38c9863104a8613e9bce58b1a78a6b53e996d72bf7e6b19496b433a7693f761c1fa105fbe1c7e101b0b3c973b4e5e2062e4c9b0f3a5543783e6d39a9e0",
            "file": "GiConnect/src/app/services/chat.service.ts",
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Database",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messages$",
                    "defaultValue": "new BehaviorSubject<ChatMessage[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "listenForMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "user",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Database, ref, push, onValue, query, limitToLast } from 'firebase/database';\nimport { BehaviorSubject } from 'rxjs';\nimport { DataSnapshot } from 'firebase/database';\nimport { getDatabase } from 'firebase/database';\n\nexport interface ChatMessage {\n  user: string;\n  message: string;\n  timestamp: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChatService {\n  private messages$ = new BehaviorSubject<ChatMessage[]>([]);\n  private db: Database;\n\n  constructor() {\n    this.db = getDatabase();\n    this.listenForMessages();\n  }\n\n  private listenForMessages() {\n    const messagesRef = query(ref(this.db, 'chat/messages'), limitToLast(50));\n    onValue(messagesRef, (snapshot: DataSnapshot) => {\n      const data = snapshot.val() || {};\n      const formatted = Object.values(data) as ChatMessage[];\n      this.messages$.next(formatted);\n    });\n  }\n\n  getMessages() {\n    return this.messages$.asObservable();\n  }\n\n  sendMessage(user: string, message: string) {\n    const messagesRef = ref(this.db, 'chat/messages');\n    const newMessage: ChatMessage = {\n      user,\n      message,\n      timestamp: Date.now(),\n    };\n    push(messagesRef, newMessage);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ClaseService",
            "id": "injectable-ClaseService-c4acc9646a84341e48e680dd478bc0ff95a8bc300751c21a910838184ac1cd4fddcccd3f1e7523bd83425c8f84ec4ba990d3c8593baf360487a721454d997867",
            "file": "GiConnect/src/app/services/clase.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "`${environment.apiUrl}/clases`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "confirmarAsistencia",
                    "args": [
                        {
                            "name": "claseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "ConfirmarAsistenciaData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "claseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "ConfirmarAsistenciaData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getClasesParaPasarLista",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\ninterface ConfirmarAsistenciaData {\n  reservas: {\n    reservaId: string;\n    status: string;\n    asistenciaConfirmada: boolean;\n  }[];\n  supervisada: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClaseService {\n  private apiUrl = `${environment.apiUrl}/clases`;\n\n  constructor(private http: HttpClient) { }\n\n  getClasesParaPasarLista(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/para-pasar-lista`);\n  }\n\n  confirmarAsistencia(claseId: string, data: ConfirmarAsistenciaData): Observable<any> {\n    return this.http.post(`${this.apiUrl}/${claseId}/confirmar-asistencia`, data);\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SuscripcionService",
            "id": "injectable-SuscripcionService-794c4c47a055cd92f01af09f625e79af9503a526280c3b5f6257f02b06d4a3a72df3403787ca2f38cf77eadd44611666270404061bf13cffe31fea7756f48e05",
            "file": "GiConnect/src/app/services/suscripcion.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "`${environment.apiUrl}/suscripciones`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createSuscripcion",
                    "args": [
                        {
                            "name": "suscripcion",
                            "type": "NuevaSuscripcion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Suscripcion>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "suscripcion",
                            "type": "NuevaSuscripcion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSuscripcionesActivas",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Suscripcion[]>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "marcarComoPagada",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Suscripcion>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, tap, catchError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Suscripcion, NuevaSuscripcion } from '../interfaces/suscripcion.interface';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SuscripcionService {\n  private apiUrl = `${environment.apiUrl}/suscripciones`;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {}\n\n  private getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n\n  getSuscripcionesActivas(): Observable<Suscripcion[]> {\n    return this.http.get<Suscripcion[]>(`${this.apiUrl}/activas`, { headers: this.getHeaders() });\n  }\n\n  createSuscripcion(suscripcion: NuevaSuscripcion): Observable<Suscripcion> {\n    console.log('URL de la API:', this.apiUrl);\n    console.log('Datos de la suscripci√≥n a crear:', suscripcion);\n    console.log('Token:', this.authService.getToken());\n    \n    return this.http.post<Suscripcion>(this.apiUrl, suscripcion, { headers: this.getHeaders() }).pipe(\n      tap(response => {\n        console.log('Respuesta del servidor:', response);\n      }),\n      catchError(error => {\n        console.error('Error completo:', error);\n        console.error('Mensaje de error:', error.error?.message);\n        console.error('Estado del error:', error.status);\n        throw error;\n      })\n    );\n  }\n\n  marcarComoPagada(id: string): Observable<Suscripcion> {\n    return this.http.patch<Suscripcion>(`${this.apiUrl}/${id}/pagar`, {}, { headers: this.getHeaders() });\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-688658ff83d8c1ec99fd3e5f61a31039bf5cdd862c9cc332c134c1834b2dccb40bb33e63cccb97de16f6aca4542ee926c65bef0a8481a409ded0bfb113933cb4",
            "file": "GiConnect/src/app/services/user.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "`${environment.apiUrl}/users`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUserById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userData",
                            "type": "Partial<User>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userData",
                            "type": "Partial<User>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from '../interfaces/user.interface';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl = `${environment.apiUrl}/users`;\n\n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.apiUrl);\n  }\n\n  getUserById(id: string): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/${id}`);\n  }\n\n  updateUser(id: string, userData: Partial<User>): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/${id}`, userData);\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserStateService",
            "id": "injectable-UserStateService-9d5026fc6bed294ef4e802d40b14a9fe5d577643a2051d24ca2ab29c82d00639cfb153d006849d43eccb2bcb10fa7fd64e2a42b2949dc362b1df3501dd23af7d",
            "file": "GiConnect/src/app/services/user-state.service.ts",
            "properties": [
                {
                    "name": "userState",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserState",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUserState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserStateService {\n  private userState = new BehaviorSubject<any>(null);\n\n  constructor(private authService: AuthService) {\n    // Inicializar el estado\n    this.updateUserState();\n    \n    // Suscribirse a los cambios en el localStorage\n    window.addEventListener('storage', (event) => {\n      if (event.key === 'user' || event.key === 'token') {\n        this.updateUserState();\n      }\n    });\n  }\n\n  private updateUserState() {\n    if (this.authService.isLoggedIn()) {\n      const user = this.authService.getUser();\n      this.userState.next(user);\n    } else {\n      this.userState.next(null);\n    }\n  }\n\n  getUserState(): Observable<any> {\n    return this.userState.asObservable();\n  }\n\n  getCurrentUser() {\n    return this.userState.value;\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "AuthInterceptor",
            "id": "injectable-AuthInterceptor-1d960cded4b7898a723dca8bd0a20d4148b367b43bef539a2fac2dd6d376d9d966c85553c4e4b04ac9d219941eabb2f7d44fde212277334a921bd55dcef01efa",
            "file": "GiConnect/src/app/interceptors/auth.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = this.authService.getToken();\n    \n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    \n    return next.handle(request);\n  }\n} ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7ee71cccb3af9df2f0e92346891a30a7f8f24586622305316ed037d58859d2bddf8a5b164f0a755b96e88cbd308dcd9e9e332d19b3cf34df72deaf2755943d11",
            "file": "GiConnect/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "beltColors",
                    "defaultValue": "{\n    'Blanco': '#FFFFFF',\n    'Gris': '#808080',\n    'Blanco-Amarillo': 'linear-gradient(to right, #FFFFFF 50%, #FFFF00 50%)',\n    'Amarillo': '#FFFF00',\n    'Amarillo-Naranja': 'linear-gradient(to right, #FFFF00 50%, #FFA500 50%)',\n    'Naranja': '#FFA500',\n    'Naranja-Verde': 'linear-gradient(to right, #FFA500 50%, #00FF00 50%)',\n    'Verde': '#00FF00',\n    'Verde-Azul': 'linear-gradient(to right, #00FF00 50%, #0000FF 50%)',\n    'Azul': '#0000FF',\n    'Morado': '#800080',\n    'Marr√≥n': '#8B4513',\n    'Negro': '#000000',\n    'Negro-Rojo': 'linear-gradient(to right, #000000 50%, #FF0000 50%)',\n    'Rojo-Blanco': 'linear-gradient(to right, #FF0000 50%, #FFFFFF 50%)',\n    'Rojo': '#FF0000'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAdminOrMaestro",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "isAndroid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "isMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "routerSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userBeltColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "userName",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "userPhoto",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkUserRole",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "exitApp",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getBeltColor",
                    "args": [
                        {
                            "name": "beltName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "beltName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickOutside",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetUserInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setupRouterListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 173
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, HostListener, AfterViewInit, OnDestroy, ElementRef } from '@angular/core';\nimport { Router, RouterOutlet, NavigationEnd } from '@angular/router';\nimport { Platform, IonicModule } from '@ionic/angular';\nimport { addIcons } from 'ionicons';\nimport { \n  menu, \n  personOutline,\n  logInOutline, \n  powerOutline,\n  homeOutline,\n  timeOutline,\n  newspaperOutline,\n  chatbubbleOutline,\n  cartOutline,\n  logOutOutline,\n  medalOutline,\n  calendarOutline,\n  cardOutline,\n  checkboxOutline,\n  calendarNumberOutline,\n  createOutline,\n  bagAddOutline,\n  personAddOutline,\n  saveOutline,\n  chevronUpOutline,\n  chevronDownOutline\n} from 'ionicons/icons';\nimport { App } from '@capacitor/app';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from './services/auth.service';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    IonicModule,\n    RouterOutlet,\n    CommonModule\n  ],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, AfterViewInit, OnDestroy {\n  isMenuOpen = false;\n  userName: string | null = null;\n  userPhoto: string | null = null;\n  userBeltColor: string | null = null;\n  isAndroid = false;\n  isAdminOrMaestro = false;\n  private userSubscription: any;\n  private routerSubscription: any;\n  \n  private beltColors: { [key: string]: string } = {\n    'Blanco': '#FFFFFF',\n    'Gris': '#808080',\n    'Blanco-Amarillo': 'linear-gradient(to right, #FFFFFF 50%, #FFFF00 50%)',\n    'Amarillo': '#FFFF00',\n    'Amarillo-Naranja': 'linear-gradient(to right, #FFFF00 50%, #FFA500 50%)',\n    'Naranja': '#FFA500',\n    'Naranja-Verde': 'linear-gradient(to right, #FFA500 50%, #00FF00 50%)',\n    'Verde': '#00FF00',\n    'Verde-Azul': 'linear-gradient(to right, #00FF00 50%, #0000FF 50%)',\n    'Azul': '#0000FF',\n    'Morado': '#800080',\n    'Marr√≥n': '#8B4513',\n    'Negro': '#000000',\n    'Negro-Rojo': 'linear-gradient(to right, #000000 50%, #FF0000 50%)',\n    'Rojo-Blanco': 'linear-gradient(to right, #FF0000 50%, #FFFFFF 50%)',\n    'Rojo': '#FF0000'\n  };\n\n  constructor(\n    private router: Router,\n    private platform: Platform,\n    private authService: AuthService,\n    private el: ElementRef\n  ) {\n    this.isAndroid = this.platform.is('android');\n    addIcons({ \n      personOutline, \n      personAddOutline, \n      logOutOutline, \n      homeOutline, \n      calendarOutline, \n      timeOutline, \n      saveOutline,\n      chevronUpOutline,\n      chevronDownOutline\n    });\n  }\n\n  ngOnInit() {\n    this.checkUserRole();\n    this.setupRouterListener();\n  }\n\n  private setupRouterListener() {\n    this.routerSubscription = this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd)\n    ).subscribe((event: any) => {\n      // Si estamos en la p√°gina de reservas, recargamos los datos\n      if (event.url === '/reservas') {\n        // Emitimos un evento personalizado que la p√°gina de reservas escuchar√°\n        window.dispatchEvent(new CustomEvent('reloadReservas'));\n      }\n    });\n  }\n\n  private checkUserRole() {\n    this.userSubscription = this.authService.user$.subscribe(user => {\n      console.log('Usuario actualizado:', user);\n      if (user) {\n        this.userName = user.nombre ? `${user.nombre} ${user.apellido1}` : null;\n        this.userPhoto = user.foto || null;\n        this.userBeltColor = user.cinturon || null;\n        this.isAdminOrMaestro = user.role === 'admin' || user.role === 'maestro';\n        console.log('Informaci√≥n del men√∫ actualizada:', {\n          name: this.userName,\n          photo: this.userPhoto,\n          belt: this.userBeltColor,\n          isAdminOrMaestro: this.isAdminOrMaestro\n        });\n      } else {\n        this.resetUserInfo();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.userSubscription) {\n      this.userSubscription.unsubscribe();\n    }\n    if (this.routerSubscription) {\n      this.routerSubscription.unsubscribe();\n    }\n  }\n\n  ngAfterViewInit() {\n    addIcons({\n      menu, \n      personOutline,\n      logInOutline, \n      powerOutline,\n      homeOutline,\n      timeOutline,\n      newspaperOutline,\n      chatbubbleOutline,\n      cartOutline,\n      logOutOutline,\n      medalOutline,\n      calendarOutline,\n      cardOutline,\n      checkboxOutline,\n      calendarNumberOutline,\n      createOutline,\n      bagAddOutline\n    });\n  }\n\n  private resetUserInfo() {\n    this.userName = null;\n    this.userPhoto = null;\n    this.userBeltColor = null;\n    this.isAdminOrMaestro = false;\n  }\n\n  toggleMenu() {\n    this.isMenuOpen = !this.isMenuOpen;\n  }\n\n  @HostListener('document:click', ['$event.target'])\n  onClickOutside(target: HTMLElement) {\n    const menuEl = this.el.nativeElement.querySelector('.menu-content');\n    const buttonEl = this.el.nativeElement.querySelector('.menu-button');\n    if (\n      this.isMenuOpen &&\n      menuEl && !menuEl.contains(target) &&\n      buttonEl && !buttonEl.contains(target)\n    ) {\n      this.isMenuOpen = false;\n    }\n  }\n\n  navigateToLogin() {\n    this.router.navigateByUrl('/auth/login');\n    this.isMenuOpen = false;\n  }\n\n  navigateTo(path: string) {\n    this.router.navigateByUrl(path);\n    this.isMenuOpen = false;\n  }\n\n  logout() {\n    this.authService.logout();\n    this.router.navigateByUrl('/auth/login');\n    this.isMenuOpen = false;\n  }\n\n  async exitApp() {\n    await App.exitApp();\n  }\n\n  getBeltColor(beltName: string): string {\n    return this.beltColors[beltName] || '#FFFFFF';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* src/app/app.component.scss */\n\n/* Estilos del toolbar */\nion-header ion-toolbar.toolbar-flex {\n  --background: #153ae0 !important;\n  --color: white !important;\n  background: #153ae0 !important;\n  color: white !important;\n}\n\n/* 1) Flex para centrar el t√≠tulo */\n.toolbar-flex {\n  display: flex !important;\n  justify-content: center !important;\n  align-items: center !important;\n  position: relative;      /* para logos absolutos */\n  padding: 0 16px !important;\n}\n\n/* 3) Logos absolutos */\n.logo {\n  width: 28px;\n  height: 28px;\n  object-fit: contain;\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n.left-logo { left: 16px; }\n.right-logo { right: 16px; }\n\n/* 4) T√≠tulo centrado */\n.app-title {\n  flex: 1;\n  text-align: center;\n  font-size: 1.75rem;\n  font-weight: bold;\n  margin: 0;\n  color: inherit; /* hereda el --color del toolbar */\n}\n\n.menu-bar {\n  background-color: white;\n  padding: 2px 16px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 28px;\n}\n\n.menu-button {\n  background-color: #153ae0;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  width: 20px;\n  height: 20px;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n\n  ion-icon {\n    font-size: 14px;\n    color: white;\n  }\n\n  &:hover {\n    opacity: 0.9;\n  }\n}\n\n.menu-content {\n  position: absolute;\n  top: 68px;       /* justo debajo del toolbar */\n  left: 0;\n  right: 0;\n  background-color: white;\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n  z-index: 1000;\n  background-color: rgba(255, 255, 255, 0.8);\n\n  /* OCULTO fuera de pantalla */\n  transform: translateY(-100%);\n  opacity: 0;\n  pointer-events: none;\n  \n  /* ANIMACI√ìN suave */\n  transition: transform 0.3s ease, opacity 0.3s ease;\n  max-height: calc(100vh - 68px);\n  overflow-y: auto;\n\n  &.show {\n    /* VISIBLE en su posici√≥n */\n    transform: translateY(0);\n    opacity: 1;\n    pointer-events: all;\n  }\n}\n\n\n\n\n.menu-header {\n  padding: 16px;\n  background-color: rgba(255, 255, 255, 0);\n  border-bottom: 1px solid #e0e0e0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n}\n\n.user-avatar {\n  width: 64px;\n  height: 64px;\n  border-radius: 50%;\n  overflow: hidden;\n  background-color: #e0e0e0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n\n  .default-avatar {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #e0e0e0;\n    color: #666;\n\n    svg {\n      width: 48px;\n      height: 48px;\n    }\n  }\n}\n\n.user-info {\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n\n  .user-name {\n    font-size: 16px;\n    font-weight: 500;\n    color: #333;\n  }\n\n  .belt-stripe {\n    width: 100%;\n    height: 10px;\n    border-radius: 5px;\n    margin-top: 4px;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  }\n}\n\nion-button {\n  --color: #153ae0;\n}\n\nion-list {\n  padding: 0;\n  margin: 0;\n  background: transparent;\n\n  ion-item {\n    --padding-start: 16px;\n    --padding-end: 16px;\n    --min-height: 48px;\n    --background: transparent;\n    --color: var(--ion-color-dark);\n    margin: 8px 0;\n    display: flex;\n    align-items: center;\n    width: 100%;\n\n    ion-icon {\n      font-size: 24px;\n      margin-right: 16px;\n      color: var(--ion-color-primary);\n      min-width: 24px;\n    }\n\n    ion-label {\n      font-size: 16px;\n      font-weight: 500;\n      margin: 0;\n      white-space: nowrap;\n    }\n\n    &:hover {\n      --background: rgba(var(--ion-color-primary-rgb), 0.1);\n    }\n  }\n}\n\n.menu-item {\n  --padding-start: 16px;\n  --padding-end: 16px;\n  --min-height: 48px;\n  --background: transparent;\n  --color: var(--ion-color-dark);\n  margin: 8px 0;\n\n  .menu-item-content {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    gap: 12px;\n\n    ion-icon {\n      font-size: 24px;\n      color: var(--ion-color-primary);\n      min-width: 24px;\n    }\n\n    span {\n      font-size: 16px;\n      font-weight: 500;\n      color: var(--ion-color-dark);\n    }\n  }\n\n  &:hover {\n    --background: rgba(var(--ion-color-primary-rgb), 0.1);\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<ion-app>\n  <ion-header>\n    <ion-toolbar class=\"toolbar-flex\" color=\"primary\" style=\"--background: #153ae0; --color: white;\">\n      <img src=\"assets/logoRedondo.svg\" class=\"logo left-logo\" alt=\"Logo Izda\" />\n      <ion-title class=\"app-title\">GiConnect</ion-title>\n      <img src=\"assets/logoRedondo.svg\" class=\"logo right-logo\" alt=\"Logo Dcha\" />\n    </ion-toolbar>\n  </ion-header>\n\n  <div class=\"menu-bar\">\n    <button class=\"menu-button\" (click)=\"toggleMenu()\">\n      <ion-icon name=\"menu\"></ion-icon>\n    </button>\n  </div>\n\n  <div class=\"menu-content\" [class.show]=\"isMenuOpen\">\n    <div class=\"menu-header\">\n      <div class=\"user-avatar\">\n        <img *ngIf=\"userPhoto\" [src]=\"userPhoto\" alt=\"Foto de usuario\">\n        <div *ngIf=\"!userPhoto\" class=\"default-avatar\">\n          <ion-icon name=\"person-outline\"></ion-icon>\n        </div>\n      </div>\n      <div class=\"user-info\">\n        <span class=\"user-name\">{{ userName || 'Invitado' }}</span>\n        <div *ngIf=\"userBeltColor\" class=\"belt-stripe\" [style.background]=\"getBeltColor(userBeltColor)\"></div>\n      </div>\n    </div>\n    <ion-list>\n      <ng-container *ngIf=\"!userName\">\n        <ion-item button (click)=\"navigateToLogin()\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"log-in-outline\"></ion-icon>\n            <span>Iniciar Sesi√≥n</span>\n          </div>\n        </ion-item>\n        <ion-item *ngIf=\"isAndroid\" button (click)=\"exitApp()\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"power-outline\"></ion-icon>\n            <span>Salir</span>\n          </div>\n        </ion-item>\n      </ng-container>\n\n      <ng-container *ngIf=\"userName\">\n        <ion-item *ngIf=\"isAdminOrMaestro\" button (click)=\"navigateTo('/mestre-portal')\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"medal-outline\"></ion-icon>\n            <span>Portal del Maestro</span>\n          </div>\n        </ion-item>\n        <ion-item button (click)=\"navigateTo('/perfil')\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"person-outline\"></ion-icon>\n            <span>Perfil</span>\n          </div>\n        </ion-item>\n        <ion-item button (click)=\"navigateTo('/home')\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"home-outline\"></ion-icon>\n            <span>Home</span>\n          </div>\n        </ion-item>\n        <ion-item button (click)=\"navigateTo('/reservas')\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"calendar-outline\"></ion-icon>\n            <span>Reservar Clases</span>\n          </div>\n        </ion-item>\n        <ion-item *ngIf=\"!isAdminOrMaestro\" button (click)=\"navigateTo('/suscripciones')\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"card-outline\"></ion-icon>\n            <span>Suscripciones</span>\n          </div>\n        </ion-item>\n        <ion-item button (click)=\"navigateTo('/prueba')\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"newspaper-outline\"></ion-icon>\n            <span>Enlaces de inter√©s</span>\n          </div>\n        </ion-item>\n        <ion-item button (click)=\"navigateTo('/chat')\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"chatbubble-outline\"></ion-icon>\n            <span>Chat</span>\n          </div>\n        </ion-item>\n        <ion-item button (click)=\"navigateTo('/prueba')\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"cart-outline\"></ion-icon>\n            <span>Tienda</span>\n          </div>\n        </ion-item>\n        <ion-item button (click)=\"logout()\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"log-out-outline\"></ion-icon>\n            <span>Cerrar Sesi√≥n</span>\n          </div>\n        </ion-item>\n        <ion-item *ngIf=\"isAndroid\" button (click)=\"exitApp()\" lines=\"none\" class=\"menu-item\">\n          <div class=\"menu-item-content\">\n            <ion-icon name=\"power-outline\"></ion-icon>\n            <span>Salir</span>\n          </div>\n        </ion-item>\n      </ng-container>\n    </ion-list>\n  </div>\n\n  <ion-content>\n    <ion-router-outlet></ion-router-outlet>\n  </ion-content>\n</ion-app>"
        },
        {
            "name": "ChatPage",
            "id": "component-ChatPage-7828dc695c7be4a7d7c8ece0f585be5c81f2f1d3cc2736781ba49f3d65fdab4e6479f6978dade0014d6ee632a2a8700c0efc9948f8bf5b122d59867f3e5f807d",
            "file": "GiConnect/src/app/pages/chat/chat.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat",
            "styleUrls": [
                "./chat.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chat.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messages$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ChatMessage[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "newMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "user",
                    "defaultValue": "'Usuario1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "send",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "IonFooter"
                },
                {
                    "name": "IonButton"
                },
                {
                    "name": "IonLabel"
                },
                {
                    "name": "IonList"
                },
                {
                    "name": "IonItem"
                },
                {
                    "name": "IonContent"
                },
                {
                    "name": "IonHeader"
                },
                {
                    "name": "IonTitle"
                },
                {
                    "name": "IonToolbar"
                },
                {
                    "name": "IonInput"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonContent, IonHeader, IonTitle, IonToolbar, IonItem, IonList, IonLabel, IonButton, IonFooter } from '@ionic/angular/standalone';\nimport { Observable } from 'rxjs';\nimport { ChatMessage, ChatService } from 'src/app/services/chat.service';\nimport { UserStateService } from 'src/app/services/user-state.service';\nimport { IonInput } from '@ionic/angular/standalone'; \n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.page.html',\n  styleUrls: ['./chat.page.scss'],\n  standalone: true,\n  imports: [IonFooter, IonButton, IonLabel, IonList, IonItem, IonContent, IonHeader, IonTitle, IonToolbar, IonInput, CommonModule, FormsModule]\n})\nexport class ChatPage {\n  messages$: Observable<ChatMessage[]>;\n  user = 'Usuario1'; // puedes obtenerlo de auth\n  newMessage = '';\n\n  constructor(private chatService: ChatService, private userStateService: UserStateService) {\n    this.messages$ = this.chatService.getMessages();\n    this.user = this.userStateService.getCurrentUser().nombre;\n  }\n\n  send() {\n    if (this.newMessage.trim()) {\n      this.chatService.sendMessage(this.user, this.newMessage.trim());\n      this.newMessage = '';\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-background {\n  position: relative;\n  width: 100%;\n  height: calc(100vh - 56px - 56px); /* Altura total menos header y footer */\n  display: flex;\n  flex-direction: column;\n  background: transparent;\n}\n\n/* Logo cuadrado transl√∫cido centrado */\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\nion-header {\n  --background: transparent;\n  padding-top: 0.5rem;\n  \n}\n\nion-title {\n  color: #153ae0;\n  text-align: center;\n  font-size: 1.5rem;\n}\n\n#chat-content {\n  --padding-start: 10px;\n  --padding-end: 10px;\n  --padding-top: 10px;\n  --padding-bottom: 10px;\n  display: flex;\n  flex-direction: column-reverse;\n  width: 100%;\n  overflow-y: auto;\n  padding: 10px;\n  padding-bottom: 160px;\n  flex: 1;\n}\n\n.messages {\n  display: flex;\n  flex-direction: column;\n}\n\n.message {\n  display: flex;\n  margin: 5px 0;\n  margin-bottom: 10px;\n}\n\n.message.me {\n  justify-content: flex-end;\n}\n\n.bubble {\n  max-width: 70%;\n  padding: 10px;\n  border-radius: 10px;\n  background-color: #e5e5ea;\n  color: #000;\n  word-wrap: break-word;\n}\n\n.message.me .bubble {\n  background-color: #dcf8c6;\n  color: #000;\n}\n\n.message-input {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 8px 8px;\n  padding-bottom: 10px;\n}\n\n.message-input-item {\n  padding-bottom: 2rem;\n}\n\nion-footer {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  z-index: 10;\n  --background: transparent;\n}\n\nion-footer ion-toolbar {\n  --background: transparent;\n}\n\nion-button {\n  margin-bottom: 2rem;\n  margin-left: 1rem;\n}\n",
                    "styleUrl": "./chat.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "chatService",
                        "type": "ChatService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userStateService",
                        "type": "UserStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "chatService",
                        "type": "ChatService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userStateService",
                        "type": "UserStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ion-header>\n  <ion-toolbar>\n    <ion-title>Chat</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n    \n<div id=\"chat-content\">\n  <div class=\"messages\">\n    <div \n      class=\"message\" \n      *ngFor=\"let msg of messages$ | async\"\n      [class.me]=\"msg.user === user\"\n    >\n      <div class=\"bubble\">\n        <strong>{{ msg.user }}</strong><br />\n        <span>{{ msg.message }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n</div>\n<ion-footer>\n  <ion-toolbar>\n    <div class=\"message-input\">\n      <ion-item lines=\"none\" class=\"message-input-item\">\n        <ion-input\n          name=\"newMessage\"\n          [(ngModel)]=\"newMessage\"\n          placeholder=\"Escribe un mensaje...\"\n        ></ion-input>\n      </ion-item>\n      <ion-button (click)=\"send()\">Enviar</ion-button>\n    </div>\n  </ion-toolbar>\n</ion-footer>\n"
        },
        {
            "name": "CrearClasePage",
            "id": "component-CrearClasePage-e72f4a01fbae53366077edf2593ee40610a2252df442ecddf82382b316dd709ee01428f31ea1cf3da864cf1920b6a27f9bee8e6bda4d07d9a23ecb5acbd44f9f",
            "file": "GiConnect/src/app/pages/crear-clase/crear-clase.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MAT_DATE_LOCALE, useValue:  }"
                },
                {
                    "name": "{ provide: MAT_DATE_FORMATS, useValue: DD_MM_YYYY_FORMAT }"
                }
            ],
            "selector": "app-crear-clase",
            "styleUrls": [
                "./crear-clase.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./crear-clase.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "claseForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "diasSemana",
                    "defaultValue": "[\n    { id: 'Lunes', nombre: 'Lunes' },\n    { id: 'Martes', nombre: 'Martes' },\n    { id: 'Mi√©rcoles', nombre: 'Mi√©rcoles' },\n    { id: 'Jueves', nombre: 'Jueves' },\n    { id: 'Viernes', nombre: 'Viernes' },\n    { id: 'S√°bado', nombre: 'S√°bado' },\n    { id: 'Domingo', nombre: 'Domingo' }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "instructores",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "instructorSeleccionado",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "isAdmin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "isMaestro",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "minDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "tipoClase",
                    "defaultValue": "'fija'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "capitalizarPrimeraLetra",
                    "args": [
                        {
                            "name": "texto",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "texto",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cargarInstructores",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "decrementarHora",
                    "args": [
                        {
                            "name": "campo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decrementarMinuto",
                    "args": [
                        {
                            "name": "campo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "incrementarHora",
                    "args": [
                        {
                            "name": "campo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "incrementarMinuto",
                    "args": [
                        {
                            "name": "campo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "campo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDiaSeleccionado",
                    "args": [
                        {
                            "name": "diaId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "diaId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "limpiarFormulario",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mostrarSelectorInstructor",
                    "args": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "obtenerNombreInstructor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "toggleDia",
                    "args": [
                        {
                            "name": "diaId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "diaId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "InstructorPopoverComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule, AlertController, LoadingController, PopoverController, ToastController } from '@ionic/angular';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { UserService } from '../../services/user.service';\nimport { User } from '../../interfaces/user.interface';\nimport { InstructorPopoverComponent } from '../../components/instructor-popover/instructor-popover.component';\nimport { addIcons } from 'ionicons';\nimport { calendarOutline, timeOutline, personOutline, saveOutline } from 'ionicons/icons';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { HttpClient } from '@angular/common/http';\nimport { firstValueFrom } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport localeEs from '@angular/common/locales/es';\nimport { registerLocaleData } from '@angular/common';\n\nregisterLocaleData(localeEs);\n\nexport const DD_MM_YYYY_FORMAT = {\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@Component({\n  selector: 'app-crear-clase',\n  templateUrl: './crear-clase.page.html',\n  styleUrls: ['./crear-clase.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    InstructorPopoverComponent\n  ],\n  providers: [\n    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },\n    { provide: MAT_DATE_FORMATS, useValue: DD_MM_YYYY_FORMAT }\n  ]\n})\nexport class CrearClasePage implements OnInit {\n  claseForm: FormGroup;\n  tipoClase: string = 'fija';\n  instructores: User[] = [];\n  isAdmin = false;\n  isMaestro = false;\n  minDate = new Date();\n  diasSemana = [\n    { id: 'Lunes', nombre: 'Lunes' },\n    { id: 'Martes', nombre: 'Martes' },\n    { id: 'Mi√©rcoles', nombre: 'Mi√©rcoles' },\n    { id: 'Jueves', nombre: 'Jueves' },\n    { id: 'Viernes', nombre: 'Viernes' },\n    { id: 'S√°bado', nombre: 'S√°bado' },\n    { id: 'Domingo', nombre: 'Domingo' }\n  ];\n  instructorSeleccionado: User | null = null;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private alertController: AlertController,\n    private loadingController: LoadingController,\n    private authService: AuthService,\n    private userService: UserService,\n    private popoverController: PopoverController,\n    private http: HttpClient,\n    private toastController: ToastController\n  ) {\n    addIcons({ calendarOutline, timeOutline, personOutline, saveOutline });\n    this.claseForm = this.formBuilder.group({\n      titulo: ['', [Validators.required]],\n      descripcion: [''],\n      tipoClase: ['fija', [Validators.required]],\n      diasSeleccionados: [[], [Validators.required]],\n      fecha: [''],\n      horaInicio: ['', [\n        Validators.required,\n        Validators.pattern(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)\n      ]],\n      horaFin: ['', [\n        Validators.required,\n        Validators.pattern(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/)\n      ]],\n      maxPlazas: [10, [Validators.required, Validators.min(1)]],\n      instructor: [null, [Validators.required]]\n    });\n\n    // Suscribirse a cambios en el tipo de clase\n    this.claseForm.get('tipoClase')?.valueChanges.subscribe(tipo => {\n      this.tipoClase = tipo;\n      if (tipo === 'fija') {\n        this.claseForm.get('fecha')?.clearValidators();\n        this.claseForm.get('diasSeleccionados')?.setValidators([Validators.required]);\n      } else {\n        this.claseForm.get('diasSeleccionados')?.clearValidators();\n        this.claseForm.get('fecha')?.setValidators([Validators.required]);\n      }\n      this.claseForm.get('fecha')?.updateValueAndValidity();\n      this.claseForm.get('diasSeleccionados')?.updateValueAndValidity();\n    });\n  }\n\n  async ngOnInit() {\n    const user = this.authService.getUser();\n    this.isAdmin = user?.role === 'admin';\n    this.isMaestro = user?.role === 'maestro';\n    if (user?.nombre) {\n      this.claseForm.patchValue({\n        instructor: user.nombre\n      });\n    }\n    this.limpiarFormulario();\n    await this.cargarInstructores();\n  }\n\n  async cargarInstructores() {\n    try {\n      const instructores = await firstValueFrom(this.userService.getUsers());\n      this.instructores = instructores.filter(user => \n        user.role === 'instructor' || user.role === 'maestro'\n      );\n    } catch (error) {\n      console.error('Error al cargar instructores:', error);\n    }\n  }\n\n  async mostrarSelectorInstructor(ev: any) {\n    const popover = await this.popoverController.create({\n      component: InstructorPopoverComponent,\n      event: ev,\n      translucent: true,\n      cssClass: 'instructor-popover',\n      componentProps: {\n        instructores: this.instructores\n      }\n    });\n\n    await popover.present();\n\n    const { data } = await popover.onDidDismiss();\n    if (data) {\n      this.claseForm.patchValue({\n        instructor: data._id\n      });\n      this.instructorSeleccionado = data;\n    }\n  }\n\n  incrementarHora(campo: string) {\n    const valorActual = this.claseForm.get(campo)?.value || '00:00';\n    const [horas, minutos] = valorActual.split(':').map(Number);\n    const nuevaHora = (horas + 1) % 24;\n    this.claseForm.get(campo)?.setValue(`${nuevaHora.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`);\n  }\n\n  decrementarHora(campo: string) {\n    const valorActual = this.claseForm.get(campo)?.value || '00:00';\n    const [horas, minutos] = valorActual.split(':').map(Number);\n    const nuevaHora = (horas - 1 + 24) % 24;\n    this.claseForm.get(campo)?.setValue(`${nuevaHora.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`);\n  }\n\n  incrementarMinuto(campo: string) {\n    const valorActual = this.claseForm.get(campo)?.value || '00:00';\n    const [horas, minutos] = valorActual.split(':').map(Number);\n    const nuevoMinuto = (minutos + 1) % 60;\n    this.claseForm.get(campo)?.setValue(`${horas.toString().padStart(2, '0')}:${nuevoMinuto.toString().padStart(2, '0')}`);\n  }\n\n  decrementarMinuto(campo: string) {\n    const valorActual = this.claseForm.get(campo)?.value || '00:00';\n    const [horas, minutos] = valorActual.split(':').map(Number);\n    const nuevoMinuto = (minutos - 1 + 60) % 60;\n    this.claseForm.get(campo)?.setValue(`${horas.toString().padStart(2, '0')}:${nuevoMinuto.toString().padStart(2, '0')}`);\n  }\n\n  toggleDia(diaId: string) {\n    const diasSeleccionados = this.claseForm.get('diasSeleccionados')?.value || [];\n    const index = diasSeleccionados.indexOf(diaId);\n    \n    if (index === -1) {\n      diasSeleccionados.push(diaId);\n    } else {\n      diasSeleccionados.splice(index, 1);\n    }\n    \n    this.claseForm.patchValue({ diasSeleccionados });\n  }\n\n  isDiaSeleccionado(diaId: string): boolean {\n    const diasSeleccionados = this.claseForm.get('diasSeleccionados')?.value || [];\n    return diasSeleccionados.includes(diaId);\n  }\n\n  // Funci√≥n para capitalizar la primera letra de cada palabra\n  private capitalizarPrimeraLetra(texto: string): string {\n    return texto.charAt(0).toUpperCase() + texto.slice(1).toLowerCase();\n  }\n\n  async onSubmit() {\n    if (this.claseForm.valid) {\n      const loading = await this.loadingController.create({\n        message: 'Creando clase...'\n      });\n      await loading.present();\n\n      try {\n        const formData = this.claseForm.value;\n        console.log('Datos del formulario:', formData);\n        \n        // Validar que tenemos un instructor seleccionado\n        if (!formData.instructor) {\n          throw new Error('Debes seleccionar un instructor');\n        }\n\n        // Preparar los datos seg√∫n el tipo de clase\n        const claseData: any = {\n          titulo: formData.titulo,\n          descripcion: formData.descripcion || '',\n          horaInicio: formData.horaInicio,\n          horaFin: formData.horaFin,\n          maxPlazas: parseInt(formData.maxPlazas) || 10,\n          instructor: formData.instructor\n        };\n\n        // A√±adir diaSemana o fecha seg√∫n el tipo de clase\n        if (formData.tipoClase === 'fija') {\n          if (!formData.diasSeleccionados || formData.diasSeleccionados.length === 0) {\n            throw new Error('Debes seleccionar al menos un d√≠a de la semana');\n          }\n          // Crear una clase para cada d√≠a seleccionado\n          const clasesPromises = formData.diasSeleccionados.map((dia: string) => {\n            const clasePorDia = {\n              ...claseData,\n              diaSemana: dia\n            };\n            return firstValueFrom(this.http.post(`${environment.apiUrl}/clases`, clasePorDia));\n          });\n\n          const responses = await Promise.all(clasesPromises);\n          console.log('Clases creadas:', responses);\n\n          await loading.dismiss();\n          \n          const toast = await this.toastController.create({\n            message: `Se han creado ${responses.length} clases correctamente`,\n            duration: 2000,\n            position: 'middle',\n            color: 'success',\n            cssClass: 'toast-top',\n            buttons: []\n          });\n          await toast.present();\n          \n          this.limpiarFormulario();\n          this.router.navigate(['/mestre-portal']);\n        } else {\n          // Clase especial\n          if (!formData.fecha) {\n            throw new Error('Debes seleccionar una fecha para la clase especial');\n          }\n          const claseEspecial = {\n            ...claseData,\n            fecha: formData.fecha\n          };\n          const response = await firstValueFrom(this.http.post(`${environment.apiUrl}/clases`, claseEspecial));\n          console.log('Clase especial creada:', response);\n\n          await loading.dismiss();\n          \n          const toast = await this.toastController.create({\n            message: 'Clase especial creada correctamente',\n            duration: 2000,\n            position: 'middle',\n            color: 'success',\n            cssClass: 'toast-top',\n            buttons: []\n          });\n          await toast.present();\n          \n          this.limpiarFormulario();\n          this.router.navigate(['/mestre-portal']);\n        }\n      } catch (error: any) {\n        await loading.dismiss();\n        console.error('Error al crear la clase:', error);\n        console.error('Detalles del error:', error.error);\n        \n        const alert = await this.alertController.create({\n          header: 'Error',\n          message: error.error?.message || error.message || 'No se pudo crear la clase. Por favor, int√©ntalo de nuevo.',\n          buttons: ['OK']\n        });\n        await alert.present();\n      }\n    } else {\n      console.log('Formulario inv√°lido:', this.claseForm.errors);\n      console.log('Estado del formulario:', this.claseForm.getRawValue());\n    }\n  }\n\n  private limpiarFormulario() {\n    this.claseForm.reset({\n      tipoClase: 'fija',\n      maxPlazas: 10\n    });\n    this.instructorSeleccionado = null;\n    this.tipoClase = 'fija';\n  }\n\n  obtenerNombreInstructor(): string {\n    if (this.instructorSeleccionado) {\n      return `${this.instructorSeleccionado.nombre} ${this.instructorSeleccionado.apellido1}`;\n    }\n    return 'Seleccionar Instructor';\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-background {\n    position: relative;\n    width: 100%;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    background: transparent;\n    padding-top: 2rem;\n    overflow-y: auto;\n  }\n  \n  .backdrop-logo {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url('/assets/logoCuadradoPNG.png');\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    opacity: 0.15;\n    z-index: 1;\n    pointer-events: none;\n  }\n\n.header-section {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  position: relative;\n  z-index: 1;\n\n  ion-back-button {\n    --color: white;\n  }\n\n  .welcome-title {\n    color: white;\n    margin: 0;\n    font-size: 24px;\n    font-weight: 600;\n    margin-left: 10px;\n  }\n}\n\n.create-form {\n  padding: 16px;\n  padding-bottom: 120px;\n  max-width: 600px;\n  margin: 0 auto;\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  ion-item {\n    --background: transparent;\n    --border-color: var(--ion-color-light);\n    --border-radius: 8px;\n    --padding-start: 16px;\n    --padding-end: 16px;\n    --inner-padding-end: 16px;\n    margin-bottom: 16px;\n\n    &.item-has-focus {\n      --border-color: var(--ion-color-primary);\n    }\n  }\n\n  ion-button {\n    --border-radius: 8px;\n    margin-top: 20px;\n    height: 48px;\n    font-weight: 500;\n  }\n\n  ion-button.submit-button {\n    margin: 48px 0;\n    width: 90%;\n    max-width: 400px;\n    --border-radius: 8px;\n    height: 48px;\n    font-weight: 500;\n    --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n    \n    &:hover {\n      --background: var(--ion-color-primary-shade);\n    }\n  }\n}\n\n.section-container {\n  background: rgba(42, 82, 152, 0.05);\n  border-radius: 10px;\n  padding: 10px;\n  margin: 10px 0;\n}\n\n.time-control {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n\n  .time-buttons {\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n  }\n\n  ion-button {\n    --padding-start: 4px;\n    --padding-end: 4px;\n    height: 24px;\n    margin: 0;\n  }\n\n  ion-input {\n    flex: 1;\n    text-align: center;\n    --padding-start: 8px;\n    --padding-end: 8px;\n  }\n}\n\n.form-actions {\n  margin-top: 20px;\n\n  ion-button {\n    --background: #1e3c72;\n    --background-hover: #2a5298;\n    --background-activated: #2a5298;\n    --border-radius: 10px;\n    font-weight: 600;\n    height: 48px;\n\n    ion-icon {\n      margin-right: 8px;\n    }\n  }\n}\n\nion-segment {\n  --background: rgba(42, 82, 152, 0.1);\n  border-radius: 8px;\n  padding: 4px;\n\n  ion-segment-button {\n    --color: #1e3c72;\n    --color-checked: white;\n    --background-checked: #1e3c72;\n    --indicator-color: transparent;\n    border-radius: 6px;\n    font-weight: 500;\n  }\n}\n\nion-select {\n  --placeholder-color: #1e3c72;\n  --placeholder-opacity: 0.7;\n}\n\n.tipo-clase-segment {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  max-width: 300px;\n  margin: 0 auto;\n\n  ion-segment-button {\n    flex: 1;\n    min-width: 120px;\n  }\n}\n\n.custom-mat-field {\n  width: 100%;\n  margin: 0;\n  padding: 0;\n\n  ::ng-deep {\n    .mat-form-field-wrapper {\n      margin: 0;\n      padding: 0;\n    }\n\n    .mat-form-field-flex {\n      background: transparent;\n      padding: 0;\n    }\n\n    .mat-form-field-underline {\n      display: none;\n    }\n\n    .mat-form-field-infix {\n      padding: 0;\n      border: none;\n    }\n\n    .mat-form-field-suffix {\n      top: 0;\n    }\n\n    .mat-datepicker-toggle {\n      color: #153ae0;\n    }\n  }\n}\n\n.login-background {\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: transparent;\n  padding-top: 2rem;\n  overflow-y: auto;\n}\n\n.header-section {\n  display: flex;\n  align-items: center;\n  padding: 0;\n  margin: 1rem 0 0.5rem 0;\n  margin-bottom: 3rem;\n  position: relative;\n\n  ion-buttons {\n    margin: 0;\n    padding: 0;\n    height: 24px;\n    margin-left: 0.5rem;\n    position: absolute;\n    left: 0;\n    z-index: 1;\n\n    ion-back-button {\n      --background: #153ae0;\n      --color: white;\n      --opacity: 1;\n      --padding-start: 0;\n      --padding-end: 0;\n      --min-width: 24px;\n      --min-height: 24px;\n      --icon-font-size: 24px;\n      --icon-margin-start: 0;\n      --icon-margin-end: 0;\n      --icon-padding-start: 0;\n      --icon-padding-end: 0;\n      border-radius: 4px;\n      --background-hover: #153ae0;\n      --background-activated: #153ae0;\n      --background-focused: #153ae0;\n      --ripple-color: transparent;\n      --border-radius: 4px;\n      --box-shadow: none;\n    }\n\n    ion-back-button::part(native) {\n      background: #153ae0;\n      color: white;\n      border-radius: 4px;\n    }\n  }\n\n  .welcome-title {\n    text-align: center;\n    margin: 0;\n    font-size: 1.5rem;\n    color: #153ae0;\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    width: auto;\n  }\n}\n\n.create-form {\n  position: relative;\n  z-index: 1;\n  background: rgba(255, 255, 255, 0.5);\n  border-radius: 12px;\n  padding: 1rem;\n  margin-bottom: 1rem;\n\n  ion-list {\n    background: transparent;\n    padding: 0;\n  }\n\n  ion-item {\n    --background: transparent;\n    --padding-start: 0;\n    --inner-padding-end: 0;\n    margin-bottom: 1rem;\n\n    ion-label {\n      color: #153ae0;\n      font-size: 0.9rem;\n      margin-bottom: 0.5rem;\n    }\n\n    ion-input, ion-textarea, ion-select, ion-datetime {\n      --padding-start: 0;\n      --padding-end: 0;\n      --color: #333;\n      font-size: 1rem;\n    }\n\n    ion-select {\n      --padding-end: 40px;\n      --padding-start: 16px;\n      --icon-margin-end: 0;\n      --icon-margin-start: 0;\n      --icon-color: #153ae0;\n      --icon-opacity: 1;\n      position: relative;\n      width: 100%;\n\n      &::part(icon) {\n        position: absolute;\n        right: 8px;\n        top: 50%;\n        transform: translateY(-50%);\n        margin: 0;\n      }\n\n      &::part(placeholder),\n      &::part(text) {\n        color: #333;\n        font-size: 1rem;\n      }\n    }\n  }\n}\n\n.form-actions {\n  margin-top: 2rem;\n  padding: 0 1rem;\n  padding-bottom: 3.5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  ion-button {\n    --background: #153ae0;\n    --background-hover: #153ae0;\n    --background-activated: #153ae0;\n    --background-focused: #153ae0;\n    --color: white;\n    --border-radius: 8px;\n    --box-shadow: none;\n    margin: 0;\n    height: 48px;\n    font-weight: 500;\n    width: 100%;\n    max-width: 300px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 3rem;\n\n    &[disabled] {\n      --background: #ccc;\n      --color: #666;\n    }\n\n    ion-icon {\n      margin-right: 8px;\n    }\n  }\n}\n\n.dias-checkbox-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 8px;\n  padding: 8px 0;\n\n  ion-checkbox {\n    --size: 20px;\n    --checkbox-background-checked: var(--ion-color-primary);\n    --border-color: var(--ion-color-medium);\n    --border-color-checked: var(--ion-color-primary);\n    --checkmark-color: transparent;\n    margin-right: 8px;\n  }\n}\n\n.dias-chips-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 8px;\n  padding: 8px 0;\n\n  ion-chip {\n    --background: var(--ion-color-light);\n    --color: var(--ion-color-medium);\n    font-size: 14px;\n    height: 32px;\n    margin: 0;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    user-select: none;\n    border: 2px solid var(--ion-color-light);\n    padding-top: 3px;\n    padding-bottom: 2px;\n    padding-left: 10px;\n    padding-right: 10px;\n    justify-content: center;\n\n    &:hover {\n      opacity: 0.8;\n    }\n\n    &.selected {\n      --background: var(--ion-color-primary);\n      --color: white;\n      border-color: var(--ion-color-primary);\n      font-weight: 500;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n  }\n}\n\nion-content {\n  --padding-top: 16px;\n  --padding-bottom: 32px;\n  --overflow: auto;\n}\n\nion-page {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n::ng-deep {\n  .instructor-popover {\n    --width: 90%;\n    --max-width: 400px;\n    --background: white;\n    --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    position: fixed;\n    top: 50% !important;\n    left: 50% !important;\n    transform: translate(-50%, -50%) !important;\n    margin: 0;\n    padding: 1rem;\n    background: white;\n    overflow: hidden;\n    border-radius: 12px;\n\n    ion-list {\n      padding: 0;\n      margin: 0;\n    }\n\n    ion-item {\n      --min-height: 48px;\n      --background: transparent;\n      --background-hover: var(--ion-color-light);\n      --color: var(--ion-color-dark);\n      font-size: 16px;\n      cursor: pointer;\n      padding: 0.5rem;\n\n      &:hover {\n        --background: var(--ion-color-light);\n      }\n    }\n  }\n}\n\n.instructor-button {\n  margin: 0 16px 16px;\n  --border-color: var(--ion-color-medium);\n  --color: var(--ion-color-medium);\n  font-weight: 500;\n  height: 48px;\n  \n  &:hover {\n    --border-color: var(--ion-color-primary);\n    --color: var(--ion-color-primary);\n  }\n}\n\n.toast-top {\n  --top: 120px !important;\n  --min-width: 90%;\n  --max-width: 90%;\n  --border-radius: 8px;\n  --box-shadow: 0 3px 12px rgba(0, 0, 0, 0.15);\n  margin: 0 auto;\n  text-align: center;\n}\n\n.submit-button-container {\n  margin-top: -20px;\n  width: 100%;\n  display: flex;\n  justify-content: left;\n  padding-bottom: 3rem;\n\n  .submit-button {\n    width: 90%;\n    max-width: 400px;\n    --border-radius: 8px;\n    height: 48px;\n    font-weight: 500;\n    --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n    padding-bottom: 2rem;\n    \n    &:hover {\n      --background: var(--ion-color-primary-shade);\n    }\n  }\n} ",
                    "styleUrl": "./crear-clase.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadingController",
                        "type": "LoadingController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "popoverController",
                        "type": "PopoverController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadingController",
                        "type": "LoadingController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "popoverController",
                        "type": "PopoverController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-background\">\n    <div class=\"backdrop-logo\"></div>\n\n    <div class=\"ion-padding\">\n        <div class=\"header-section\">\n            <ion-buttons slot=\"start\">\n                <ion-back-button defaultHref=\"/mestre-portal\" text=\"\"></ion-back-button>\n            </ion-buttons>\n            <h1 class=\"welcome-title\">Crear Nueva Clase</h1>\n        </div>\n\n        <form [formGroup]=\"claseForm\" (ngSubmit)=\"onSubmit()\" class=\"create-form\">\n            <ion-list>\n                <!-- Nombre de la clase -->\n                <ion-item>\n                    <ion-label position=\"stacked\">T√≠tulo de la Clase</ion-label>\n                    <ion-input formControlName=\"titulo\" type=\"text\" placeholder=\"Ej: Jiu-Jitsu B√°sico\"></ion-input>\n                </ion-item>\n\n                <!-- Descripci√≥n -->\n                <ion-item>\n                    <ion-label position=\"stacked\">Descripci√≥n</ion-label>\n                    <ion-textarea formControlName=\"descripcion\" placeholder=\"Describe la clase...\"></ion-textarea>\n                </ion-item>\n\n                <!-- Tipo de Clase -->\n                <ion-item>\n                    <ion-label position=\"stacked\">Tipo de Clase: </ion-label>\n                    <ion-segment formControlName=\"tipoClase\" class=\"tipo-clase-segment\">\n                        <ion-segment-button value=\"fija\">\n                            <ion-label>Fija</ion-label>\n                        </ion-segment-button>\n                        <ion-segment-button value=\"especial\">\n                            <ion-label>Especial</ion-label>\n                        </ion-segment-button>\n                    </ion-segment>\n                </ion-item>\n\n                <!-- Secci√≥n para clase fija -->\n                <ng-container *ngIf=\"tipoClase === 'fija'\">\n                    <ion-item>\n                        <ion-label position=\"stacked\">D√≠as de la Semana</ion-label>\n                        <div class=\"dias-chips-container\">\n                            <ion-chip *ngFor=\"let dia of diasSemana\"\n                                [color]=\"isDiaSeleccionado(dia.id) ? 'primary' : 'medium'\"\n                                (click)=\"toggleDia(dia.id)\" \n                                [class.selected]=\"isDiaSeleccionado(dia.id)\">\n                                {{dia.nombre}}\n                            </ion-chip>\n                        </div>\n                    </ion-item>\n                </ng-container>\n\n                <!-- Secci√≥n para clase especial -->\n                <ng-container *ngIf=\"tipoClase === 'especial'\">\n                    <ion-item>\n                        <ion-label position=\"stacked\">Fecha</ion-label>\n                        <mat-form-field appearance=\"fill\" class=\"custom-mat-field\">\n                            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                            <mat-datepicker #picker></mat-datepicker>\n                            <input matInput\n                                [matDatepicker]=\"picker\"\n                                formControlName=\"fecha\"\n                                [min]=\"minDate\"\n                                placeholder=\"Selecciona una fecha\">\n                        </mat-form-field>\n                    </ion-item>\n                </ng-container>\n\n                <!-- Hora de Inicio -->\n                <ion-item>\n                    <ion-label position=\"stacked\">Hora de Inicio</ion-label>\n                    <div class=\"time-control\">\n                        <div class=\"time-buttons\">\n                            <ion-button fill=\"clear\" (click)=\"incrementarHora('horaInicio')\">\n                                <ion-icon name=\"chevron-up-outline\"></ion-icon>\n                            </ion-button>\n                            <ion-button fill=\"clear\" (click)=\"decrementarHora('horaInicio')\">\n                                <ion-icon name=\"chevron-down-outline\"></ion-icon>\n                            </ion-button>\n                        </div>\n                        <ion-input formControlName=\"horaInicio\" type=\"text\" placeholder=\"HH:mm\"></ion-input>\n                        <div class=\"time-buttons\">\n                            <ion-button fill=\"clear\" (click)=\"incrementarMinuto('horaInicio')\">\n                                <ion-icon name=\"chevron-up-outline\"></ion-icon>\n                            </ion-button>\n                            <ion-button fill=\"clear\" (click)=\"decrementarMinuto('horaInicio')\">\n                                <ion-icon name=\"chevron-down-outline\"></ion-icon>\n                            </ion-button>\n                        </div>\n                    </div>\n                </ion-item>\n                <ion-note color=\"danger\" *ngIf=\"claseForm.get('horaInicio')?.errors?.['pattern']\">\n                    Formato de hora inv√°lido. Use HH:mm (ej: 09:30)\n                </ion-note>\n\n                <!-- Hora de Fin -->\n                <ion-item>\n                    <ion-label position=\"stacked\">Hora de Fin</ion-label>\n                    <div class=\"time-control\">\n                        <div class=\"time-buttons\">\n                            <ion-button fill=\"clear\" (click)=\"incrementarHora('horaFin')\">\n                                <ion-icon name=\"chevron-up-outline\"></ion-icon>\n                            </ion-button>\n                            <ion-button fill=\"clear\" (click)=\"decrementarHora('horaFin')\">\n                                <ion-icon name=\"chevron-down-outline\"></ion-icon>\n                            </ion-button>\n                        </div>\n                        <ion-input formControlName=\"horaFin\" type=\"text\" placeholder=\"HH:mm\"></ion-input>\n                        <div class=\"time-buttons\">\n                            <ion-button fill=\"clear\" (click)=\"incrementarMinuto('horaFin')\">\n                                <ion-icon name=\"chevron-up-outline\"></ion-icon>\n                            </ion-button>\n                            <ion-button fill=\"clear\" (click)=\"decrementarMinuto('horaFin')\">\n                                <ion-icon name=\"chevron-down-outline\"></ion-icon>\n                            </ion-button>\n                        </div>\n                    </div>\n                </ion-item>\n                <ion-note color=\"danger\" *ngIf=\"claseForm.get('horaFin')?.errors?.['pattern']\">\n                    Formato de hora inv√°lido. Use HH:mm (ej: 09:30)\n                </ion-note>\n\n                <!-- Instructor -->\n                <ion-item>\n                    <ion-label position=\"stacked\">Instructor</ion-label>\n                </ion-item>\n                <ion-button expand=\"block\" fill=\"outline\" (click)=\"mostrarSelectorInstructor($event)\" class=\"instructor-button\">\n                    {{ obtenerNombreInstructor() }}\n                </ion-button>\n\n                <!-- M√°ximo de Plazas -->\n                <ion-item>\n                    <ion-label position=\"stacked\">M√°ximo de Plazas</ion-label>\n                    <ion-input formControlName=\"maxPlazas\" type=\"number\" min=\"1\"></ion-input>\n                </ion-item>\n\n                <!-- Bot√≥n de Submit -->\n                <div class=\"submit-button-container\">\n                    <ion-button expand=\"block\" type=\"submit\" [disabled]=\"!claseForm.valid\" class=\"submit-button\">\n                        <ion-icon name=\"save-outline\" slot=\"start\"></ion-icon>\n                        Crear Clase\n                    </ion-button>\n                </div>\n            </ion-list>\n        </form>\n    </div>\n</div>"
        },
        {
            "name": "EditarUsuarioPage",
            "id": "component-EditarUsuarioPage-a0a0871c96185bc58c406a583233d326bb423c2d0b6298b034bf5df5e7df307f67e5168cb59ab39a3581f1c8502d1b0658a173b46ec637a3e852f18d561d69a2",
            "file": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MAT_DATE_LOCALE, useValue:  }"
                },
                {
                    "name": "{ provide: MAT_DATE_FORMATS, useValue: DD_MM_YYYY_FORMAT }"
                }
            ],
            "selector": "app-editar-usuario",
            "styleUrls": [
                "./editar-usuario.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./editar-usuario.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cinturones",
                    "defaultValue": "CINTURONES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "grados",
                    "defaultValue": "GRADOS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "isAdmin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "isMaestro",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "rolesDisponibles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "usuario",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "usuarioForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "loadUsuario",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "resetClasesAsistidas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetClasesImpartidas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { IonicModule, AlertController, LoadingController, NavController } from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { User } from 'src/app/interfaces/user.interface';\nimport { addIcons } from 'ionicons';\nimport { personOutline, calendarOutline, createOutline, saveOutline } from 'ionicons/icons';\nimport localeEs from '@angular/common/locales/es';\nimport { registerLocaleData } from '@angular/common';\n\nregisterLocaleData(localeEs);\n\n// Define custom date formats\nexport const DD_MM_YYYY_FORMAT = {\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\nconst CINTURONES = [\n  'Blanco', 'Gris', 'Blanco-Amarillo', 'Amarillo', 'Amarillo-Naranja',\n  'Naranja', 'Naranja-Verde', 'Verde', 'Verde-Azul', 'Azul', 'Morado',\n  'Marr√≥n', 'Negro', 'Negro-Rojo', 'Rojo-Blanco', 'Rojo'\n];\n\nconst GRADOS = [0, 1, 2, 3, 4];\n\n@Component({\n  selector: 'app-editar-usuario',\n  templateUrl: './editar-usuario.page.html',\n  styleUrls: ['./editar-usuario.page.scss'],\n  standalone: true,\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatFormFieldModule,\n    MatInputModule\n  ],\n  providers: [\n    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },\n    { provide: MAT_DATE_FORMATS, useValue: DD_MM_YYYY_FORMAT }\n  ]\n})\nexport class EditarUsuarioPage implements OnInit {\n  usuarioForm: FormGroup;\n  usuario: User | null = null;\n  isAdmin = false;\n  isMaestro = false;\n  cinturones = CINTURONES;\n  grados = GRADOS;\n  isLoading = false;\n  rolesDisponibles: { value: string, label: string }[] = [];\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService,\n    private userService: UserService,\n    private alertController: AlertController,\n    private loadingController: LoadingController,\n    private navController: NavController\n  ) {\n    this.usuarioForm = this.fb.group({\n      foto: [''],\n      nombre: ['', Validators.required],\n      apellido1: ['', Validators.required],\n      apellido2: [''],\n      dni: ['', [Validators.required, Validators.pattern(/^[0-9]{8}[A-Za-z]$/)]],\n      telefono: ['', [Validators.required, Validators.pattern(/^[0-9]{9}$/)]],\n      email: ['', [Validators.required, Validators.email]],\n      role: ['', Validators.required],\n      numIBJJF: [''],\n      fechaInicio: [null],\n      cinturon: [''],\n      grado: [0],\n      fechaDesde: [null],\n      clasesAsistidas: [0],\n      clasesImpartidas: [0],\n      activo: [true]\n    });\n  }\n\n  ngOnInit() {\n    const userId = this.route.snapshot.paramMap.get('id');\n    if (!userId) {\n      this.router.navigate(['/modificar-usuario']);\n      return;\n    }\n\n    const currentUser = this.authService.getUser();\n    this.isAdmin = currentUser?.role === 'admin';\n    this.isMaestro = currentUser?.role === 'maestro';\n\n    // Configurar roles disponibles seg√∫n el tipo de usuario\n    this.rolesDisponibles = [\n      { value: 'atleta', label: 'Atleta' },\n      { value: 'instructor', label: 'Instructor' },\n      { value: 'maestro', label: 'Maestro' }\n    ];\n\n    if (this.isAdmin) {\n      this.rolesDisponibles.push({ value: 'admin', label: 'Admin' });\n    }\n\n    this.loadUsuario(userId);\n  }\n\n  private loadUsuario(userId: string) {\n    this.isLoading = true;\n    this.userService.getUserById(userId).subscribe({\n      next: (usuario: User) => {\n        this.usuario = usuario;\n        this.usuarioForm.patchValue({\n          ...usuario,\n          fechaInicio: usuario.fechaInicio ? new Date(usuario.fechaInicio) : null,\n          fechaDesde: usuario.fechaDesde ? new Date(usuario.fechaDesde) : null\n        });\n\n        if (this.isMaestro) {\n          // Si es maestro, permite editar campos espec√≠ficos\n          this.usuarioForm.get('fechaInicio')?.enable();\n          this.usuarioForm.get('cinturon')?.enable();\n          this.usuarioForm.get('grado')?.enable();\n          this.usuarioForm.get('fechaDesde')?.enable();\n          this.usuarioForm.get('clasesAsistidas')?.enable();\n          this.usuarioForm.get('clasesImpartidas')?.enable();\n          this.usuarioForm.get('role')?.enable();\n\n          // Deshabilitar el resto de campos\n          Object.keys(this.usuarioForm.controls).forEach(key => {\n            if (!['fechaInicio', 'cinturon', 'grado', 'fechaDesde', 'clasesAsistidas', 'clasesImpartidas', 'role'].includes(key)) {\n              this.usuarioForm.get(key)?.disable();\n            }\n          });\n        }\n        this.isLoading = false;\n      },\n      error: async (error: Error) => {\n        console.error('Error al cargar usuario:', error);\n        this.isLoading = false;\n        const alert = await this.alertController.create({\n          header: 'Error',\n          message: 'No se pudo cargar la informaci√≥n del usuario',\n          buttons: ['OK']\n        });\n        await alert.present();\n      }\n    });\n  }\n\n  async onSubmit() {\n    if (this.usuarioForm.valid && this.usuario && this.usuario._id) {\n      const loading = await this.loadingController.create({\n        message: 'Guardando cambios...',\n        spinner: 'circular'\n      });\n      await loading.present();\n\n      try {\n        const formData = this.usuarioForm.value;\n        const updatedUser: Partial<User> = {};\n\n        if (this.isAdmin) {\n          // Si es admin, puede actualizar todos los campos\n          Object.assign(updatedUser, formData);\n        } else if (this.isMaestro) {\n          // Si es maestro, puede actualizar campos espec√≠ficos incluyendo el rol\n          updatedUser.fechaInicio = formData.fechaInicio;\n          updatedUser.cinturon = formData.cinturon;\n          updatedUser.grado = formData.grado;\n          updatedUser.fechaDesde = formData.fechaDesde;\n          updatedUser.clasesAsistidas = formData.clasesAsistidas;\n          updatedUser.clasesImpartidas = formData.clasesImpartidas;\n          updatedUser.role = formData.role;\n        }\n\n        this.userService.updateUser(this.usuario._id, updatedUser).subscribe({\n          next: async () => {\n            const alert = await this.alertController.create({\n              header: '√âxito',\n              message: 'Usuario actualizado correctamente',\n              buttons: [],\n              backdropDismiss: false\n            });\n            await alert.present();\n\n            setTimeout(() => {\n              alert.dismiss();\n              this.router.navigate(['/teacher/modificar-usuario']);\n            }, 2000);\n          },\n          error: async (error: Error) => {\n            console.error('Error al actualizar usuario:', error);\n            const alert = await this.alertController.create({\n              header: 'Error',\n              message: 'No se pudo actualizar el usuario. Por favor, int√©ntalo de nuevo.',\n              buttons: ['OK']\n            });\n            await alert.present();\n          },\n          complete: () => {\n            loading.dismiss();\n          }\n        });\n      } catch (error) {\n        console.error('Error al actualizar usuario:', error);\n        const alert = await this.alertController.create({\n          header: 'Error',\n          message: 'No se pudo actualizar el usuario. Por favor, int√©ntalo de nuevo.',\n          buttons: ['OK']\n        });\n        await alert.present();\n        await loading.dismiss();\n      }\n    }\n  }\n\n  resetClasesAsistidas() {\n    this.usuarioForm.patchValue({ clasesAsistidas: 0 });\n  }\n\n  resetClasesImpartidas() {\n    this.usuarioForm.patchValue({ clasesImpartidas: 0 });\n  }\n}\n\naddIcons({ personOutline, calendarOutline, createOutline, saveOutline }); ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-background {\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: transparent;\n  padding-top: 2rem;\n  overflow-y: auto;\n}\n\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.header-section {\n  display: flex;\n  align-items: center;\n  padding: 0;\n  margin: 1rem 0 0.5rem 0;\n  margin-bottom: 3rem;\n  position: relative;\n\n  ion-buttons {\n    margin: 0;\n    padding: 0;\n    height: 24px;\n    margin-left: 0.5rem;\n    position: absolute;\n    left: 0;\n    z-index: 1;\n\n    ion-back-button {\n      --background: #153ae0;\n      --color: white;\n      --opacity: 1;\n      --padding-start: 0;\n      --padding-end: 0;\n      --min-width: 24px;\n      --min-height: 24px;\n      --icon-font-size: 24px;\n      --icon-margin-start: 0;\n      --icon-margin-end: 0;\n      --icon-padding-start: 0;\n      --icon-padding-end: 0;\n      border-radius: 4px;\n      --background-hover: #153ae0;\n      --background-activated: #153ae0;\n      --background-focused: #153ae0;\n      --ripple-color: transparent;\n      --border-radius: 4px;\n      --box-shadow: none;\n    }\n\n    ion-back-button::part(native) {\n      background: #153ae0;\n      color: white;\n      border-radius: 4px;\n    }\n  }\n\n  .welcome-title {\n    text-align: center;\n    margin: 0;\n    font-size: 1.5rem;\n    color: #153ae0;\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    width: auto;\n  }\n}\n\n.profile-image-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 0;\n  padding: 0.5rem;\n\n  .profile-image {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n    object-fit: cover;\n    border: 3px solid #153ae0;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  }\n}\n\n.loading-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  color: #153ae0;\n  position: relative;\n  z-index: 1;\n\n  ion-spinner {\n    margin-bottom: 1rem;\n  }\n}\n\n.edit-form {\n  position: relative;\n  z-index: 1;\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 12px;\n  padding: 1rem;\n  margin-bottom: 2rem;\n\n  ion-list {\n    background: transparent;\n    padding: 0;\n  }\n\n  ion-item {\n    --background: transparent;\n    --padding-start: 0;\n    --inner-padding-end: 0;\n    margin-bottom: 1rem;\n\n    ion-label {\n      color: #153ae0;\n      font-size: 0.9rem;\n      margin-bottom: 0.5rem;\n    }\n\n    ion-input, ion-select, ion-datetime {\n      --padding-start: 0;\n      --padding-end: 0;\n      --color: #333;\n      font-size: 1rem;\n    }\n\n    ion-toggle {\n      --background: #ccc;\n      --background-checked: #153ae0;\n      --handle-background: white;\n      --handle-background-checked: white;\n    }\n\n    ion-select {\n      --padding-end: 40px;\n      --padding-start: 16px;\n      --icon-margin-end: 0;\n      --icon-margin-start: 0;\n      --icon-color: #153ae0;\n      --icon-opacity: 1;\n      position: relative;\n      width: 100%;\n\n      &::part(icon) {\n        position: absolute;\n        right: 8px;\n        top: 50%;\n        transform: translateY(-50%);\n        margin: 0;\n      }\n\n      &::part(placeholder),\n      &::part(text) {\n        color: #333;\n        font-size: 1rem;\n      }\n    }\n  }\n}\n\n.custom-mat-field {\n  width: 100%;\n  margin: 0;\n  padding: 0;\n\n  ::ng-deep {\n    .mat-form-field-wrapper {\n      margin: 0;\n      padding: 0;\n    }\n\n    .mat-form-field-flex {\n      background: transparent;\n      padding: 0;\n    }\n\n    .mat-form-field-underline {\n      display: none;\n    }\n\n    .mat-form-field-infix {\n      padding: 0;\n      border: none;\n    }\n\n    .mat-form-field-suffix {\n      top: 0;\n    }\n\n    .mat-datepicker-toggle {\n      color: #153ae0;\n    }\n  }\n}\n\n.form-actions {\n  margin-top: 2rem;\n  padding: 0 1rem;\n  padding-bottom: env(safe-area-inset-bottom, 20px);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  ion-button {\n    --background: #153ae0;\n    --background-hover: #153ae0;\n    --background-activated: #153ae0;\n    --background-focused: #153ae0;\n    --color: white;\n    --border-radius: 8px;\n    --box-shadow: none;\n    margin: 0;\n    height: 48px;\n    font-weight: 500;\n    width: 100%;\n    max-width: 300px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 3rem;\n\n    &[disabled] {\n      --background: #ccc;\n      --color: #666;\n    }\n\n    ion-icon {\n      margin-right: 8px;\n    }\n  }\n}\n\n.form-container {\n  padding-bottom: calc(env(safe-area-inset-bottom, 20px) + 100px);\n}\n\n// Estilos espec√≠ficos para el popover del select\n::ng-deep {\n  .select-interface-option {\n    --background: white;\n    --color: #333;\n    --padding-start: 16px;\n    --padding-end: 16px;\n    --min-height: 40px;\n    font-size: 1rem;\n    background: white;\n    border-bottom: 1px solid #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 40px;\n    padding: 0 24px;\n    text-align: center;\n  }\n\n  .select-popover {\n    --width: 90%;\n    --max-width: 400px;\n    --background: white;\n    --border-radius: 12px;\n    --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    position: fixed;\n    top: 55% !important;\n    left: 50% !important;\n    transform: translate(-50%, -50%) !important;\n    margin: 0;\n    padding: 4px 0;\n    background: white;\n    border-radius: 12px;\n    overflow: hidden;\n  }\n\n  .select-interface-option.selected {\n    --background: #f0f4ff;\n    --color: #153ae0;\n    font-weight: 500;\n    background: #f0f4ff;\n  }\n\n  .select-interface-option ion-radio {\n    --color: #153ae0;\n    --color-checked: #153ae0;\n    margin-right: 12px;\n  }\n\n  .select-interface-option ion-label {\n    font-size: 1rem;\n    color: #333;\n    margin: 0;\n    text-align: center;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    line-height: 40px;\n  }\n\n  .select-interface-option.selected ion-label {\n    color: #153ae0;\n    font-weight: 500;\n  }\n\n  .select-popover ion-list {\n    background: white;\n    padding: 0;\n    margin: 0;\n    border-radius: 12px;\n    overflow: hidden;\n  }\n\n  .select-popover ion-item {\n    --background: white;\n    --background-hover: #f0f4ff;\n    --background-activated: #f0f4ff;\n    --background-focused: #f0f4ff;\n    --color: #333;\n    --color-hover: #153ae0;\n    --color-activated: #153ae0;\n    --color-focused: #153ae0;\n    --border-color: #eee;\n    --border-style: solid;\n    --border-width: 0 0 1px 0;\n    --padding-start: 16px;\n    --padding-end: 16px;\n    --min-height: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0 24px;\n    text-align: center;\n  }\n\n  .select-popover ion-item::part(native) {\n    padding: 0;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .select-popover ion-item:first-child {\n    --border-radius: 12px 12px 0 0;\n  }\n\n  .select-popover ion-item:last-child {\n    --border-width: 0;\n    --border-radius: 0 0 12px 12px;\n  }\n}\n\n.input-with-button {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  gap: 8px;\n\n  ion-input {\n    flex: 1;\n  }\n\n  ion-button {\n    --padding-start: 8px;\n    --padding-end: 8px;\n    margin: 0;\n    height: 40px;\n    \n    font-size: 0.9rem;\n    color: #153ae0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n\n    &::part(native) {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      padding: 0;\n      width: 100%;\n    }\n\n    &::part(content) {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      gap: 4px;\n      text-align: center;\n    }\n\n    ion-icon {\n      margin: 0;\n      font-size: 16px;\n    }\n  }\n} ",
                    "styleUrl": "./editar-usuario.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadingController",
                        "type": "LoadingController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navController",
                        "type": "NavController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadingController",
                        "type": "LoadingController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navController",
                        "type": "NavController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <div class=\"ion-padding\">\n    <div class=\"header-section\">\n      <ion-buttons>\n        <ion-back-button defaultHref=\"/modificar-usuario\"></ion-back-button>\n      </ion-buttons>\n      <h2 class=\"welcome-title\">Editar Usuario</h2>\n    </div>\n\n    <div *ngIf=\"isLoading\" class=\"loading-container\">\n      <ion-spinner name=\"crescent\"></ion-spinner>\n      <p>Cargando usuario...</p>\n    </div>\n\n    <form *ngIf=\"!isLoading && usuario\" [formGroup]=\"usuarioForm\" (ngSubmit)=\"onSubmit()\" class=\"edit-form\">\n      <!-- Foto de perfil -->\n      <div class=\"profile-image-container\">\n        <img [src]=\"usuario.foto\" alt=\"Foto de perfil\" class=\"profile-image\">\n      </div>\n\n      <ion-list>\n        <!-- Nombre -->\n        <ion-item>\n          <ion-label position=\"stacked\">Nombre</ion-label>\n          <ion-input formControlName=\"nombre\" type=\"text\" [disabled]=\"!isAdmin\"></ion-input>\n        </ion-item>\n\n        <!-- Apellido1 -->\n        <ion-item>\n          <ion-label position=\"stacked\">Primer Apellido</ion-label>\n          <ion-input formControlName=\"apellido1\" type=\"text\" [disabled]=\"!isAdmin\"></ion-input>\n        </ion-item>\n\n        <!-- Apellido2 -->\n        <ion-item>\n          <ion-label position=\"stacked\">Segundo Apellido</ion-label>\n          <ion-input formControlName=\"apellido2\" type=\"text\" [disabled]=\"!isAdmin\"></ion-input>\n        </ion-item>\n\n        <!-- DNI -->\n        <ion-item>\n          <ion-label position=\"stacked\">DNI</ion-label>\n          <ion-input formControlName=\"dni\" type=\"text\" [disabled]=\"!isAdmin\"></ion-input>\n        </ion-item>\n\n        <!-- Tel√©fono -->\n        <ion-item>\n          <ion-label position=\"stacked\">Tel√©fono</ion-label>\n          <ion-input formControlName=\"telefono\" type=\"tel\" [disabled]=\"!isAdmin\"></ion-input>\n        </ion-item>\n\n        <!-- Email -->\n        <ion-item>\n          <ion-label position=\"stacked\">Email</ion-label>\n          <ion-input formControlName=\"email\" type=\"email\" [disabled]=\"!isAdmin\"></ion-input>\n        </ion-item>\n\n        <!-- Role -->\n        <ion-item>\n          <ion-label position=\"stacked\">Rol</ion-label>\n          <ion-select formControlName=\"role\" interface=\"popover\">\n            <ion-select-option *ngFor=\"let rol of rolesDisponibles\" [value]=\"rol.value\">\n              {{rol.label}}\n            </ion-select-option>\n          </ion-select>\n        </ion-item>\n\n        <!-- N√∫mero IBJJF -->\n        <ion-item>\n          <ion-label position=\"stacked\">N√∫mero IBJJF</ion-label>\n          <ion-input formControlName=\"numIBJJF\" type=\"text\" [disabled]=\"!isAdmin\"></ion-input>\n        </ion-item>\n\n        <!-- Fecha Inicio -->\n        <ion-item>\n          <ion-label position=\"stacked\">Fecha de Inicio</ion-label>\n          <mat-form-field appearance=\"fill\" class=\"custom-mat-field\">\n            <mat-datepicker-toggle matSuffix [for]=\"pickerInicio\"></mat-datepicker-toggle>\n            <mat-datepicker #pickerInicio></mat-datepicker>\n            <input matInput\n              [matDatepicker]=\"pickerInicio\"\n              formControlName=\"fechaInicio\"\n              [disabled]=\"!isAdmin && !isMaestro\"\n              placeholder=\"Selecciona una fecha\">\n          </mat-form-field>\n        </ion-item>\n\n        <!-- Cintur√≥n -->\n        <ion-item>\n          <ion-label position=\"stacked\">Cintur√≥n</ion-label>\n          <ion-select formControlName=\"cinturon\" interface=\"popover\" [disabled]=\"!isAdmin && !isMaestro\">\n            <ion-select-option *ngFor=\"let cinturon of cinturones\" [value]=\"cinturon\">\n              {{cinturon}}\n            </ion-select-option>\n          </ion-select>\n        </ion-item>\n\n        <!-- Grado -->\n        <ion-item>\n          <ion-label position=\"stacked\">Grado</ion-label>\n          <ion-select formControlName=\"grado\" interface=\"popover\" [disabled]=\"!isAdmin && !isMaestro\">\n            <ion-select-option *ngFor=\"let grado of grados\" [value]=\"grado\">\n              {{grado}}\n            </ion-select-option>\n          </ion-select>\n        </ion-item>\n\n        <!-- Fecha Desde -->\n        <ion-item>\n          <ion-label position=\"stacked\">Fecha Desde</ion-label>\n          <mat-form-field appearance=\"fill\" class=\"custom-mat-field\">\n            <mat-datepicker-toggle matSuffix [for]=\"pickerDesde\"></mat-datepicker-toggle>\n            <mat-datepicker #pickerDesde></mat-datepicker>\n            <input matInput\n              [matDatepicker]=\"pickerDesde\"\n              formControlName=\"fechaDesde\"\n              [disabled]=\"!isAdmin && !isMaestro\"\n              placeholder=\"Selecciona una fecha\">\n          </mat-form-field>\n        </ion-item>\n\n        <!-- Clases Asistidas -->\n        <ion-item>\n          <ion-label position=\"stacked\">Clases Asistidas</ion-label>\n          <div class=\"input-with-button\">\n            <ion-input formControlName=\"clasesAsistidas\" type=\"number\" [disabled]=\"!isAdmin && !isMaestro\"></ion-input>\n            <ion-button fill=\"clear\" (click)=\"resetClasesAsistidas()\" [disabled]=\"!isAdmin && !isMaestro\">\n              Reset\n            </ion-button>\n          </div>\n        </ion-item>\n\n        <!-- Clases Impartidas -->\n        <ion-item>\n          <ion-label position=\"stacked\">Clases Impartidas</ion-label>\n          <div class=\"input-with-button\">\n            <ion-input formControlName=\"clasesImpartidas\" type=\"number\" [disabled]=\"!isAdmin && !isMaestro\"></ion-input>\n            <ion-button fill=\"clear\" (click)=\"resetClasesImpartidas()\" [disabled]=\"!isAdmin && !isMaestro\">\n              Reset\n            </ion-button>\n          </div>\n        </ion-item>\n\n        <!-- Estado -->\n        <ion-item>\n          <ion-label>Activo</ion-label>\n          <ion-toggle formControlName=\"activo\" [disabled]=\"!isAdmin\"></ion-toggle>\n        </ion-item>\n      </ion-list>\n\n      <div class=\"form-actions\">\n        <ion-button expand=\"block\" type=\"submit\" [disabled]=\"!usuarioForm.valid\">\n          <ion-icon name=\"save-outline\"></ion-icon>\n          Guardar Cambios\n        </ion-button>\n      </div>\n    </form>\n  </div>\n</div> "
        },
        {
            "name": "ForgotPasswordPage",
            "id": "component-ForgotPasswordPage-ce24778fa98d388946fab64197e060b257fb00f3ab358d79353af4a83fd027ead9ccef06f0acaffcae391cb00278f66fe721ab526e90f5b203612352ce23afc3",
            "file": "GiConnect/src/app/auth/forgot-password/forgot-password.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password",
            "styleUrls": [
                "./forgot-password.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "forgotPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showAlert",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isSuccess",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSuccess",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showToast",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'danger'"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'danger'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "IonicModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule, ToastController, AlertController } from '@ionic/angular';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.page.html',\n  styleUrls: ['./forgot-password.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    IonicModule\n  ]\n})\nexport class ForgotPasswordPage {\n  forgotPasswordForm: FormGroup;\n  loading = false;\n  errorMessage = '';\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    public router: Router,\n    private toastController: ToastController,\n    private alertController: AlertController\n  ) {\n    this.forgotPasswordForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]]\n    });\n  }\n\n  async showAlert(message: string, isSuccess: boolean = false) {\n    const alert = await this.alertController.create({\n      header: isSuccess ? '√âxito' : 'Error',\n      message: message,\n      buttons: [\n        {\n          text: 'OK',\n          handler: () => {\n            if (isSuccess) {\n              this.router.navigate(['/auth/reset-password'], { \n                queryParams: { email: this.forgotPasswordForm.get('email')?.value }\n              });\n            } else {\n              this.router.navigate(['/auth/login']);\n            }\n          }\n        }\n      ],\n      cssClass: 'custom-alert'\n    });\n\n    await alert.present();\n  }\n\n  async showToast(message: string, color: string = 'danger') {\n    const toast = await this.toastController.create({\n      message: message,\n      duration: 3000,\n      position: 'top',\n      color: color\n    });\n    await toast.present();\n  }\n\n  onSubmit() {\n    if (this.forgotPasswordForm.valid) {\n      this.loading = true;\n      this.errorMessage = '';\n      const email = this.forgotPasswordForm.get('email')?.value;\n\n      this.authService.requestPasswordReset(email).subscribe({\n        next: (response) => {\n          this.loading = false;\n          this.showAlert('Se ha enviado un c√≥digo de verificaci√≥n a tu email', true);\n        },\n        error: (error: HttpErrorResponse) => {\n          this.loading = false;\n          console.error('Error completo:', error);\n          \n          if (error.status === 404) {\n            this.showAlert('No existe un usuario con esta cuenta');\n          } else if (error.status === 0) {\n            this.errorMessage = 'No se pudo conectar con el servidor';\n            this.showToast('No se pudo conectar con el servidor');\n          } else {\n            this.errorMessage = 'Ha ocurrido un error. Por favor, intenta de nuevo';\n            this.showToast('Ha ocurrido un error. Por favor, intenta de nuevo');\n          }\n        }\n      });\n    }\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".forgot-password-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  padding: 20px;\n}\n\n.forgot-password-card {\n  background: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 400px;\n\n  h2 {\n    margin-bottom: 1rem;\n    color: #333;\n    text-align: center;\n  }\n\n  p {\n    color: #666;\n    margin-bottom: 2rem;\n    text-align: center;\n  }\n\n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n    mat-form-field {\n      width: 100%;\n    }\n\n    button {\n      width: 100%;\n      margin-top: 1rem;\n    }\n\n    a {\n      text-align: center;\n      margin-top: 1rem;\n    }\n  }\n}\n\n/* Contenedor ocupa todo el espacio disponible */\n.login-background {\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent;\n}\n\n/* Logo cuadrado transl√∫cido centrado */\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n/* Card de login centrado */\n.login-card {\n  position: relative;\n  width: 90%;\n  max-width: 380px;\n  padding: 32px;\n  z-index: 2;\n  border-radius: 12px;\n  --background: transparent;\n  background: transparent;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n}\n\n/* T√≠tulo dentro del card */\n.card-title {\n  text-align: center;\n  margin-bottom: 16px;\n  color: var(--ion-color-primary);\n  font-size: 1.5rem;\n  font-weight: 600;\n}\n\n/* Subt√≠tulo */\n.card-subtitle {\n  text-align: center;\n  margin-bottom: 32px;\n  color: var(--ion-color-medium);\n  font-size: 1rem;\n}\n\n/* Contenedor del formulario */\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n}\n\n/* Estilos de los ion-item para diferenciar del fondo */\nion-item {\n  --background: transparent;\n  background: transparent;\n  --border-color: var(--ion-color-light);\n  --border-radius: 8px;\n  --padding-start: 0;\n  --inner-padding-end: 0;\n  margin: 0 !important;\n\n  &.ion-invalid {\n    --border-color: var(--ion-color-danger);\n  }\n}\n\n/* Mensajes de error */\nion-note {\n  font-size: 0.8rem;\n  color: var(--ion-color-danger);\n  margin-top: 4px;\n}\n\n/* Bot√≥n Entrar */\nion-button {\n  margin-top: 24px;\n\n  &[disabled] {\n    opacity: 0.6;\n  }\n}\n\n/* Contenedor de enlaces */\n.links-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 24px;\n}\n\n/* Enlaces de registro y olvid√© contrase√±a */\n.forgot-password-link {\n  --color: var(--ion-color-medium);\n  font-size: 0.9rem;\n  text-decoration: none;\n}\n\n::ng-deep .custom-alert {\n  --min-width: 300px;\n  --max-width: 90%;\n  --height: auto;\n  --min-height: 150px;\n  --max-height: 90%;\n  --border-radius: 8px;\n  --box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);\n  \n  .alert-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    padding: 20px;\n  }\n\n  .alert-head {\n    padding: 16px 16px 8px;\n  }\n\n  .alert-message {\n    padding: 8px 16px 16px;\n    font-size: 16px;\n  }\n\n  .alert-button-group {\n    padding: 8px;\n  }\n\n  .alert-button {\n    min-width: 100px;\n    font-weight: 500;\n  }\n} ",
                    "styleUrl": "./forgot-password.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"login-background\">\n  <!-- Logo cuadrado transl√∫cido de fondo -->\n  <div class=\"backdrop-logo\"></div>\n\n  <!-- Card de recuperaci√≥n de contrase√±a centrado -->\n  <ion-card class=\"login-card\">\n    <h2 class=\"card-title\">Recuperar Contrase√±a</h2>\n    <p class=\"card-subtitle\">Introduce tu email para recibir un c√≥digo de verificaci√≥n</p>\n\n    <form [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"onSubmit()\">\n      <ion-item>\n        <ion-label position=\"stacked\">Email</ion-label>\n        <ion-input\n          type=\"email\"\n          formControlName=\"email\"\n          placeholder=\"tu@email.com\"\n          autocomplete=\"email\"\n        ></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"forgotPasswordForm.get('email')?.hasError('required') && forgotPasswordForm.get('email')?.touched\">\n        El email es requerido\n      </ion-note>\n      <ion-note color=\"danger\" *ngIf=\"forgotPasswordForm.get('email')?.hasError('email') && forgotPasswordForm.get('email')?.touched\">\n        Introduce un email v√°lido\n      </ion-note>\n\n      <ion-button\n        expand=\"block\"\n        type=\"submit\"\n        [disabled]=\"loading\"\n        class=\"login-button\"\n      >\n        <ion-spinner *ngIf=\"loading\" name=\"crescent\"></ion-spinner>\n        <span *ngIf=\"!loading\">Enviar c√≥digo</span>\n      </ion-button>\n    </form>\n\n    <div class=\"links-container\">\n      <ion-button\n        fill=\"clear\"\n        (click)=\"router.navigate(['/auth/login'])\"\n        class=\"forgot-password-link\"\n      >\n        Volver al login\n      </ion-button>\n    </div>\n  </ion-card>\n</div> "
        },
        {
            "name": "HomePage",
            "id": "component-HomePage-392bc2521c315286d7f824aa404d7e22cabb517799656183ee05d5c381b64cda749d562ae1c135a7bdb9eb66d6e94338deeb1e4bf567a489e51da7139db03ed9",
            "file": "GiConnect/src/app/pages/home/home.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAdminOrMaestro",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "userName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "checkUserRole",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IonicModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { addIcons } from 'ionicons';\nimport { \n  calendar,\n  globe,\n  chatbubbleOutline,\n  cartOutline,\n  cardOutline,\n  personOutline\n} from 'ionicons/icons';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.page.html',\n  styleUrls: ['./home.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule\n  ]\n})\nexport class HomePage implements OnInit {\n  userName: string = '';\n  isAdminOrMaestro = false;\n\n  constructor(private router: Router, private authService: AuthService) {\n    addIcons({ \n      calendar,\n      globe,\n      chatbubbleOutline,\n      cartOutline,\n      cardOutline,\n      personOutline\n    });\n  }\n\n  ngOnInit() {\n    this.checkUserRole();\n  }\n\n  private checkUserRole() {\n    const user = this.authService.getUser();\n    this.isAdminOrMaestro = user?.role === 'admin' || user?.role === 'maestro';\n  }\n\n  navigateTo(path: string) {\n    this.router.navigate([path]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#container {\n  text-align: center;\n\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n#container strong {\n  font-size: 20px;\n  line-height: 26px;\n}\n\n#container p {\n  font-size: 16px;\n  line-height: 22px;\n\n  color: #8c8c8c;\n\n  margin: 0;\n}\n\n#container a {\n  text-decoration: none;\n}\n\n.login-background {\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent;\n}\n\n/* Logo cuadrado transl√∫cido centrado */\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.ion-padding {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  max-width: 600px;\n  padding: 2rem;\n}\n\n.welcome-title {\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 1.5rem;\n  color: #153ae0;\n  text-shadow: none;\n}\n\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 1rem;\n  width: 100%;\n}\n\n.grid-item {\n  background: rgba(255, 255, 255, 0.5);\n  border-radius: 10px;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n  cursor: pointer;\n  transition: transform 0.2s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n\n  &.full-width {\n    grid-column: 1 / -1;\n    background: rgba(255, 255, 255, 0.6);\n    padding: 1.5rem;\n    \n    .icon-placeholder {\n      width: 64px;\n      height: 64px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      img {\n        max-width: 100%;\n        max-height: 100%;\n        object-fit: contain;\n      }\n    }\n\n    span {\n      font-size: 1.1rem;\n      font-weight: 500;\n    }\n  }\n\n  &:hover {\n    transform: translateY(-2px);\n    background: rgba(255, 255, 255, 0.7);\n  }\n\n  .icon-placeholder {\n    width: 48px;\n    height: 48px;\n    background: transparent;\n    border-radius: 8px;\n    margin-bottom: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    ion-icon {\n      font-size: 32px;\n      color: #153ae0;\n    }\n  }\n\n  span {\n    color: #333;\n    font-size: 0.9rem;\n    text-align: center;\n  }\n}",
                    "styleUrl": "./home.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <div class=\"ion-padding\">\n    <h2 class=\"welcome-title\">Bienvenido a GiConnect {{userName}}</h2>\n    \n    <div class=\"grid-container\">\n      <div class=\"grid-item full-width\" *ngIf=\"isAdminOrMaestro\" (click)=\"navigateTo('/mestre-portal')\">\n        <div class=\"icon-placeholder\">\n          <img src=\"../../assets/logoCruzRojaCabra.PNG\" alt=\"Logo Cruz Roja Cabra\">\n        </div>\n        <span>Portal del Maestro</span>\n      </div>\n\n      <div class=\"grid-item\" (click)=\"navigateTo('/reservas')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"calendar\"></ion-icon>\n        </div>\n        <span>Reservar Clases</span>\n      </div>\n\n      <div class=\"grid-item\" *ngIf=\"!isAdminOrMaestro\" (click)=\"navigateTo('/suscripciones')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"card-outline\"></ion-icon>\n        </div>\n        <span>Suscripciones</span>\n      </div>\n\n      <div class=\"grid-item\" (click)=\"navigateTo('/prueba')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"globe\"></ion-icon>\n        </div>\n        <span>Enlaces de Inter√©s</span>\n      </div>\n\n      <div class=\"grid-item\" (click)=\"navigateTo('/chat')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"chatbubble-outline\"></ion-icon>\n        </div>\n        <span>Chat</span>\n      </div>\n\n      <div class=\"grid-item\" (click)=\"navigateTo('/prueba')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"cart-outline\"></ion-icon>\n        </div>\n        <span>Tienda</span>\n      </div>\n    </div>\n\n    \n  </div>\n</div>\n"
        },
        {
            "name": "InstructorPopoverComponent",
            "id": "component-InstructorPopoverComponent-8ae35f430cbf1916e10729e3beb7d84af77523c4af856e19804dc062b915b1493230528dde7f913d7bce6e766ebc60f05d4e3fac44fc977d6ee734c87ab148a1",
            "file": "GiConnect/src/app/components/instructor-popover/instructor-popover.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-instructor-popover",
            "styleUrls": [],
            "styles": [
                "\n    .instructor-item {\n      --padding-start: 16px;\n      --padding-end: 16px;\n      --padding-top: 12px;\n      --padding-bottom: 12px;\n      --min-height: 48px;\n    }\n  "
            ],
            "template": "<ion-list>\n  <ion-item *ngFor=\"let instructor of instructores\"\n            (click)=\"seleccionarInstructor(instructor)\"\n            class=\"instructor-item\">\n    <ion-label>\n      {{instructor.nombre}} {{instructor.apellido1}}\n    </ion-label>\n  </ion-item>\n</ion-list>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "instructores",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "User[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "seleccionarInstructor",
                    "args": [
                        {
                            "name": "instructor",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "instructor",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IonicModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IonicModule, PopoverController } from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\nimport { User } from '../../interfaces/user.interface';\n\n@Component({\n  selector: 'app-instructor-popover',\n  template: `\n    <ion-list>\n      <ion-item *ngFor=\"let instructor of instructores\" \n                (click)=\"seleccionarInstructor(instructor)\"\n                class=\"instructor-item\">\n        <ion-label>\n          {{instructor.nombre}} {{instructor.apellido1}}\n        </ion-label>\n      </ion-item>\n    </ion-list>\n  `,\n  styles: [`\n    .instructor-item {\n      --padding-start: 16px;\n      --padding-end: 16px;\n      --padding-top: 12px;\n      --padding-bottom: 12px;\n      --min-height: 48px;\n    }\n  `],\n  standalone: true,\n  imports: [CommonModule, IonicModule]\n})\nexport class InstructorPopoverComponent {\n  @Input() instructores: User[] = [];\n\n  constructor(private popoverCtrl: PopoverController) {}\n\n  seleccionarInstructor(instructor: User) {\n    this.popoverCtrl.dismiss(instructor);\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .instructor-item {\n      --padding-start: 16px;\n      --padding-end: 16px;\n      --padding-top: 12px;\n      --padding-bottom: 12px;\n      --min-height: 48px;\n    }\n  \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "popoverCtrl",
                        "type": "PopoverController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "popoverCtrl",
                        "type": "PopoverController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": []
        },
        {
            "name": "LoginPage",
            "id": "component-LoginPage-463adcf6235bbd761137bcbbd9b055f10eba547b5aca260897a20d1342d0741c10794339fcb8a44cd503f8baeec5d7bb71b4cb251854f20342cffbe2cbc22b20",
            "file": "GiConnect/src/app/auth/login/login.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "forgotPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nPuedes ajustar este m√©todo para tu flujo de recuperaci√≥n",
                    "description": "<p>Puedes ajustar este m√©todo para tu flujo de recuperaci√≥n</p>\n",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  IonicModule,\n  IonItem,\n  IonLabel,\n  IonInput,\n  IonButton,\n  AlertController,\n  IonSpinner\n} from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\nimport {\n  ReactiveFormsModule,\n  FormBuilder,\n  FormGroup,\n  Validators\n} from '@angular/forms';\nimport { RouterModule, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    IonicModule,\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule\n  ],\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss']\n})\nexport class LoginPage implements OnInit {\n  loginForm: FormGroup;\n  isLoading = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private alertController: AlertController\n  ) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  ngOnInit() {\n    // Marcar los campos como touched cuando el usuario interact√∫a con ellos\n    this.loginForm.get('email')?.valueChanges.subscribe(() => {\n      this.loginForm.get('email')?.markAsTouched();\n    });\n    this.loginForm.get('password')?.valueChanges.subscribe(() => {\n      this.loginForm.get('password')?.markAsTouched();\n    });\n  }\n\n  async onSubmit() {\n    if (this.loginForm.valid) {\n      this.isLoading = true;\n      try {\n        console.log('üìù Intentando login con:', this.loginForm.value);\n        await this.authService.login(this.loginForm.value);\n        console.log('‚úÖ Login exitoso');\n        this.router.navigate(['/home']);\n      } catch (error: any) {\n        console.error('‚ùå Error en login:', error);\n        const alert = await this.alertController.create({\n          header: 'Error',\n          message: error.message || 'Error al iniciar sesi√≥n',\n          buttons: ['OK'],\n          cssClass: 'error-alert'\n        });\n        await alert.present();\n      } finally {\n        this.isLoading = false;\n      }\n    } else {\n      console.log('‚ùå Formulario inv√°lido:', this.loginForm.errors);\n      const alert = await this.alertController.create({\n        header: 'Error',\n        message: 'Por favor, completa todos los campos',\n        buttons: ['OK'],\n        cssClass: 'error-alert'\n      });\n      await alert.present();\n    }\n  }\n\n  /** Puedes ajustar este m√©todo para tu flujo de recuperaci√≥n */\n  async forgotPassword() {\n    const alert = await this.alertController.create({\n      header: 'Recuperar contrase√±a',\n      message: `Para recuperar tu contrase√±a, por favor ponte en contacto con el administrador o env√≠a un correo a soporte@tudominio.com.`,\n      buttons: ['OK']\n    });\n    await alert.present();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* src/app/auth/login/login.page.scss */\n\n/* Contenedor ocupa todo el espacio disponible */\n.login-background {\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent;\n}\n\n/* Logo cuadrado transl√∫cido centrado */\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n/* Card de login centrado */\n.login-card {\n  position: relative;\n  width: 90%;\n  max-width: 380px;\n  padding: 32px;\n  z-index: 2;\n  border-radius: 12px;\n  --background: transparent;\n  background: transparent;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n}\n\n/* T√≠tulo dentro del card */\n.card-title {\n  text-align: center;\n  margin-bottom: 32px;\n  color: var(--ion-color-primary);\n  font-size: 1.5rem;\n  font-weight: 600;\n}\n\n/* Contenedor del formulario */\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n}\n\n/* Estilos de los ion-item para diferenciar del fondo */\nion-item {\n  --background: transparent;\n  background: transparent;\n  --border-color: var(--ion-color-light);\n  --border-radius: 8px;\n  --padding-start: 0;\n  --inner-padding-end: 0;\n  margin: 0 !important;\n\n  &.ion-invalid {\n    --border-color: var(--ion-color-danger);\n  }\n}\n\n/* Mensajes de error */\nion-note {\n  font-size: 0.8rem;\n  color: var(--ion-color-danger);\n  margin-top: 4px;\n}\n\n/* Bot√≥n Entrar */\nion-button {\n  margin-top: 24px;\n\n  &[disabled] {\n    opacity: 0.6;\n  }\n}\n\n/* Contenedor de enlaces */\n.links-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 24px;\n}\n\n/* Enlaces de registro y olvid√© contrase√±a */\n.register-link,\n.forgot-password-link {\n  --color: var(--ion-color-medium);\n  font-size: 0.9rem;\n  text-decoration: none;\n}\n\n/* Estilos para el alert de error */\n::ng-deep .error-alert {\n  --min-width: 300px;\n  --max-width: 90%;\n  --backdrop-opacity: 0.8;\n  \n  .alert-wrapper {\n    border-radius: 16px;\n    background: white;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 90%;\n    max-width: 400px;\n    margin: 0 auto;\n    left: 0;\n    right: 0;\n  }\n\n  .alert-head {\n    background: var(--ion-color-danger);\n    color: white;\n    padding: 20px;\n    border-radius: 16px 16px 0 0;\n    text-align: center;\n    font-weight: 600;\n    font-size: 1.2rem;\n  }\n\n  .alert-message {\n    padding: 20px;\n    color: var(--ion-color-dark);\n    text-align: center;\n    font-size: 1rem;\n    line-height: 1.5;\n  }\n\n  .alert-button-group {\n    padding: 0 20px 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .alert-button {\n    color: black;\n    font-weight: 500;\n    font-size: 1rem;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    min-width: 120px;\n    margin: 0;\n    --background: var(--ion-color-primary);\n    --background-hover: var(--ion-color-primary-shade);\n    --color: black;\n    --border-radius: 8px;\n    --padding-top: 12px;\n    --padding-bottom: 12px;\n  }\n}\n",
                    "styleUrl": "./login.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- src/app/auth/login/login.page.html -->\n<div class=\"login-background\">\n  <!-- Logo cuadrado transl√∫cido de fondo -->\n  <div class=\"backdrop-logo\"></div>\n\n  <!-- Card de login centrado -->\n  <ion-card class=\"login-card\">\n    <h2 class=\"card-title\">Login</h2>\n\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n      <ion-item>\n        <ion-label position=\"stacked\">Email</ion-label>\n        <ion-input\n          type=\"text\"\n          formControlName=\"email\"\n          placeholder=\"Email\"\n          autocomplete=\"email\"\n        ></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"loginForm.get('email')?.invalid && loginForm.get('email')?.touched\">\n        El email es obligatorio\n      </ion-note>\n\n      <ion-item>\n        <ion-label position=\"stacked\">Password</ion-label>\n        <ion-input\n          type=\"password\"\n          formControlName=\"password\"\n          placeholder=\"Contrase√±a\"\n          autocomplete=\"current-password\"\n        ></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"loginForm.get('password')?.invalid && loginForm.get('password')?.touched\">\n        La contrase√±a es obligatoria\n      </ion-note>\n\n      <ion-button\n        expand=\"block\"\n        type=\"submit\"\n        [disabled]=\"!loginForm.valid\"\n        class=\"login-button\"\n      >\n        <ion-spinner *ngIf=\"isLoading\" name=\"crescent\"></ion-spinner>\n        <span *ngIf=\"!isLoading\">Entrar</span>\n      </ion-button>\n    </form>\n\n    <div class=\"links-container\">\n      <ion-button\n        fill=\"clear\"\n        routerLink=\"/auth/forgot-password\"\n        class=\"forgot-password-link\"\n      >\n        ¬øOlvidaste tu contrase√±a?\n      </ion-button>\n\n      <ion-button\n        fill=\"clear\"\n        routerLink=\"/auth/register\"\n        class=\"register-link\"\n      >\n        ¬øNo tienes cuenta? Reg√≠strate\n      </ion-button>\n    </div>\n  </ion-card>\n</div>"
        },
        {
            "name": "MestrePortalPage",
            "id": "component-MestrePortalPage-8329911fbdd545b866771d7e82a5142bd9a4b08f0fa2f88e7576858510a9f31e8990cb96dc384d63263fd25c3d52340ed5159bb15a1a0e7c00cad3224e80a35b",
            "file": "GiConnect/src/app/pages/mestre-portal/mestre-portal.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mestre-portal",
            "styleUrls": [
                "./mestre-portal.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mestre-portal.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuItems",
                    "defaultValue": "[\n    {\n      title: 'Pasar Lista',\n      icon: 'list-outline',\n      route: '/teacher/attendance'\n    },\n    {\n      title: 'Modificar Usuario',\n      icon: 'person-outline',\n      route: '/teacher/modify-user'\n    },\n    {\n      title: 'Crear Clase Especial',\n      icon: 'add-circle-outline',\n      route: '/teacher/special-class'\n    },\n    {\n      title: 'Crear Clase Fija',\n      icon: 'calendar-outline',\n      route: '/teacher/fixed-class'\n    },\n    {\n      title: 'Modificar Clase',\n      icon: 'create-outline',\n      route: '/teacher/modify-class'\n    },\n    {\n      title: 'Crear Art√≠culo Tienda',\n      icon: 'cart-outline',\n      route: '/teacher/create-item'\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "userName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-mestre-portal',\n  templateUrl: './mestre-portal.page.html',\n  styleUrls: ['./mestre-portal.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, RouterModule]\n})\nexport class MestrePortalPage implements OnInit {\n  userName: string = '';\n\n  constructor(\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit() {\n    const user = this.authService.getUser();\n    if (user) {\n      this.userName = user.nombre || user.email?.split('@')[0] || '';\n    }\n  }\n\n  menuItems = [\n    {\n      title: 'Pasar Lista',\n      icon: 'list-outline',\n      route: '/teacher/attendance'\n    },\n    {\n      title: 'Modificar Usuario',\n      icon: 'person-outline',\n      route: '/teacher/modify-user'\n    },\n    {\n      title: 'Crear Clase Especial',\n      icon: 'add-circle-outline',\n      route: '/teacher/special-class'\n    },\n    {\n      title: 'Crear Clase Fija',\n      icon: 'calendar-outline',\n      route: '/teacher/fixed-class'\n    },\n    {\n      title: 'Modificar Clase',\n      icon: 'create-outline',\n      route: '/teacher/modify-class'\n    },\n    {\n      title: 'Crear Art√≠culo Tienda',\n      icon: 'cart-outline',\n      route: '/teacher/create-item'\n    }\n  ];\n\n  navigateTo(route: string) {\n    this.router.navigate([route]);\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".menu-card {\n  height: 150px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 10px;\n  cursor: pointer;\n  transition: transform 0.2s ease-in-out;\n\n  &:hover {\n    transform: scale(1.05);\n  }\n\n  ion-card-content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n  }\n\n  .menu-icon {\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n    color: var(--ion-color-primary);\n  }\n\n  h2 {\n    margin: 0;\n    font-size: 1rem;\n    text-align: center;\n  }\n}\n\n.login-background {\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent;\n}\n\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.ion-padding {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  max-width: 600px;\n  padding: 2rem;\n}\n\n.welcome-title {\n  text-align: center;\n  margin-bottom: 2rem;\n  font-size: 1.5rem;\n  color: #153ae0;\n  text-shadow: none;\n}\n\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 1rem;\n  width: 100%;\n}\n\n.grid-item {\n  background: rgba(255, 255, 255, 0.5);\n  border-radius: 10px;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n  cursor: pointer;\n  transition: transform 0.2s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n\n  &:hover {\n    transform: translateY(-2px);\n    background: rgba(255, 255, 255, 0.7);\n  }\n\n  .icon-placeholder {\n    width: 48px;\n    height: 48px;\n    background: transparent;\n    border-radius: 8px;\n    margin-bottom: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    ion-icon {\n      font-size: 32px;\n      color: #153ae0;\n    }\n  }\n\n  span {\n    color: #333;\n    font-size: 0.9rem;\n    text-align: center;\n  }\n} ",
                    "styleUrl": "./mestre-portal.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <div class=\"ion-padding\">\n    <h2 class=\"welcome-title\">Oss, {{userName}}</h2>\n    \n    <div class=\"grid-container\">\n      <div class=\"grid-item\" (click)=\"navigateTo('/teacher/attendance')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"checkbox-outline\"></ion-icon>\n        </div>\n        <span>Pasar Lista</span>\n      </div>\n\n      <div class=\"grid-item\" (click)=\"navigateTo('/teacher/modificar-usuario')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"person-outline\"></ion-icon>\n        </div>\n        <span>Modificar Usuario</span>\n      </div>\n\n      <div class=\"grid-item\" (click)=\"navigateTo('/teacher/crear-clase')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"calendar-outline\"></ion-icon>\n        </div>\n        <span>Crear Clase</span>\n      </div>\n\n      <div class=\"grid-item\" (click)=\"navigateTo('/prueba')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"create-outline\"></ion-icon>\n        </div>\n        <span>Modificar / Borrar Clase</span>\n      </div>\n\n      <div class=\"grid-item\" (click)=\"navigateTo('/prueba')\">\n        <div class=\"icon-placeholder\">\n          <ion-icon name=\"bag-add-outline\"></ion-icon>\n        </div>\n        <span>Crear Art√≠culo Tienda</span>\n      </div>\n    </div>\n  </div>\n</div> "
        },
        {
            "name": "ModificarUsuarioPage",
            "id": "component-ModificarUsuarioPage-d605f949aaeb502f1a6aee5db50a9676ce8de95218067016a128b4af4baf32aeb45416d9294808ef9f46dd8de78cdc0391267c44ec0af64c02cf3932e9970e70",
            "file": "GiConnect/src/app/pages/modificar-usuario/modificar-usuario.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modificar-usuario",
            "styleUrls": [
                "./modificar-usuario.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modificar-usuario.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUserRole",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "usuarios",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Usuario[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getRoleName",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from '../../services/auth.service';\n\ninterface Usuario {\n  _id: string;\n  nombre: string;\n  apellido1: string;\n  apellido2?: string;\n  email: string;\n  role: string;\n  foto?: string;\n}\n\n@Component({\n  selector: 'app-modificar-usuario',\n  templateUrl: './modificar-usuario.page.html',\n  styleUrls: ['./modificar-usuario.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule,\n    RouterModule\n  ]\n})\nexport class ModificarUsuarioPage implements OnInit {\n  usuarios: Usuario[] = [];\n  loading: boolean = true;\n  error: string | null = null;\n  currentUserRole: string = '';\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit() {\n    this.loadUsers();\n  }\n\n  private getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('No hay token de autenticaci√≥n');\n    }\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n\n  async loadUsers() {\n    try {\n      this.loading = true;\n      const currentUser = this.authService.getUser();\n      this.currentUserRole = currentUser?.role || '';\n\n      const response = await this.http.get<Usuario[]>(\n        `${environment.apiUrl}/users`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      if (response) {\n        // Filtrar usuarios seg√∫n el rol del usuario actual\n        this.usuarios = response.filter(user => {\n          if (this.currentUserRole === 'admin') {\n            return user.role !== 'admin';\n          } else if (this.currentUserRole === 'maestro') {\n            return user.role !== 'admin' && user.role !== 'maestro';\n          }\n          return false;\n        });\n      }\n    } catch (error: any) {\n      console.error('Error al cargar usuarios:', error);\n      this.error = 'Error al cargar la lista de usuarios';\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  getRoleName(role: string): string {\n    switch (role?.toLowerCase()) {\n      case 'admin':\n        return 'Administrador';\n      case 'maestro':\n        return 'Maestro';\n      case 'instructor':\n        return 'Instructor';\n      case 'atleta':\n        return 'Atleta';\n      default:\n        return 'Usuario';\n    }\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-background {\n  position: relative;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background: transparent;\n  padding-top: 2rem;\n  overflow-y: auto;\n  padding-bottom: 4rem;\n}\n\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.header-section {\n  display: flex;\n  align-items: center;\n  padding: 0;\n  margin: 1rem 0 0.5rem 0;\n  margin-bottom: 3rem;;\n  position: relative;\n\n  ion-buttons {\n    margin: 0;\n    padding: 0;\n    height: 24px;\n    margin-left: 0.5rem;\n    position: absolute;\n    left: 0;\n    z-index: 1;\n\n    ion-back-button {\n      --background: #153ae0;\n      --color: white;\n      --opacity: 1;\n      --padding-start: 0;\n      --padding-end: 0;\n      --min-width: 24px;\n      --min-height: 24px;\n      --icon-font-size: 24px;\n      --icon-margin-start: 0;\n      --icon-margin-end: 0;\n      --icon-padding-start: 0;\n      --icon-padding-end: 0;\n      border-radius: 4px;\n      --background-hover: #153ae0;\n      --background-activated: #153ae0;\n      --background-focused: #153ae0;\n      --ripple-color: transparent;\n      --border-radius: 4px;\n      --box-shadow: none;\n    }\n\n    ion-back-button::part(native) {\n      background: #153ae0;\n      color: white;\n      border-radius: 4px;\n    }\n  }\n  \n\n  .welcome-title {\n    text-align: center;\n    margin: 0;\n    font-size: 1.5rem;\n    color: #153ae0;\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    width: auto;\n  }\n}\n\n\n.loading-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  color: white;\n  position: relative;\n  z-index: 1;\n\n  ion-spinner {\n    margin-bottom: 1rem;\n  }\n}\n\n.error-message {\n  text-align: center;\n  padding: 1rem;\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 8px;\n  margin: 1rem 0;\n  position: relative;\n  z-index: 1;\n}\n\n.users-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1rem;\n  position: relative;\n  z-index: 1;\n  padding: 0 1rem 4rem 1rem;\n  overflow-y: auto;\n  flex: 1;\n  margin-bottom: 2rem;\n}\n\n.user-card {\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 12px;\n  padding: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n\n  .user-image {\n    width: 60px;\n    height: 60px;\n    border-radius: 50%;\n    overflow: hidden;\n    flex-shrink: 0;\n\n    img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n  }\n\n  .user-info {\n    flex-grow: 1;\n\n    h3 {\n      margin: 0;\n      font-size: 1.1rem;\n      color: #333;\n    }\n\n    .user-role {\n      margin: 0.25rem 0 0;\n      font-size: 0.9rem;\n      color: #666;\n    }\n  }\n\n  .edit-button {\n    --color: #153ae0;\n    margin: 0;\n    padding: 0;\n    height: auto;\n  }\n} ",
                    "styleUrl": "./modificar-usuario.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <div class=\"ion-padding\">\n    <div class=\"header-section\">\n      <ion-buttons slot=\"start\">\n        <ion-back-button defaultHref=\"/mestre-portal\" text=\"\"></ion-back-button>\n      </ion-buttons>\n      <h1 class=\"welcome-title\">Modificar Usuario</h1>\n    </div>\n\n    <div *ngIf=\"loading\" class=\"loading-container\">\n      <ion-spinner name=\"crescent\"></ion-spinner>\n      <p>Cargando usuarios...</p>\n    </div>\n\n    <div *ngIf=\"error\" class=\"error-message\">\n      <ion-text color=\"danger\">{{ error }}</ion-text>\n    </div>\n\n    <div *ngIf=\"!loading && !error\" class=\"users-grid\">\n      <div *ngFor=\"let usuario of usuarios\" class=\"user-card\">\n        <div class=\"user-image\">\n          <img [src]=\"usuario.foto || 'assets/default-avatar.png'\" alt=\"Foto de perfil\">\n        </div>\n        <div class=\"user-info\">\n          <h3>{{ usuario.nombre }} {{ usuario.apellido1 }}</h3>\n          <p class=\"user-role\">{{ getRoleName(usuario.role) }}</p>\n        </div>\n        <ion-button fill=\"clear\" class=\"edit-button\" [routerLink]=\"['/teacher/editar-usuario', usuario._id]\">\n          <ion-icon name=\"create-outline\"></ion-icon>\n        </ion-button>\n      </div>\n    </div>\n  </div>\n</div> "
        },
        {
            "name": "PasarListaPage",
            "id": "component-PasarListaPage-568df35ab2fcf24c596ef160df8f8af044e3dd0c57eb5e6541ffe77a0662f3aab2957b064d236724d8bb23c76ab3ee1e8ebbe0361dc12a9ae658a7b987c346a4",
            "file": "GiConnect/src/app/pages/pasar-lista/pasar-lista.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pasar-lista",
            "styleUrls": [
                "./pasar-lista.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pasar-lista.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clases",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Clase[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "cargarClases",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmarAsistencia",
                    "args": [
                        {
                            "name": "clase",
                            "type": "Clase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "clase",
                            "type": "Clase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "marcarTodos",
                    "args": [
                        {
                            "name": "clase",
                            "type": "Clase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clase",
                            "type": "Clase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImageError",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "procesarAsistencia",
                    "args": [
                        {
                            "name": "clase",
                            "type": "Clase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "clase",
                            "type": "Clase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { RouterModule } from '@angular/router';\nimport { ClaseService } from '../../services/clase.service';\nimport { AlertController } from '@ionic/angular';\nimport { ToastController } from '@ionic/angular';\nimport { firstValueFrom } from 'rxjs';\n\ninterface Atleta {\n  _id: string;\n  nombre: string;\n  apellidos: string;\n  foto?: string;\n}\n\ninterface Reserva {\n  _id: string;\n  atleta: Atleta;\n  status: string;\n  asistenciaConfirmada: boolean;\n}\n\ninterface Clase {\n  _id: string;\n  titulo: string;\n  instructor: {\n    nombre: string;\n    apellidos: string;\n    foto?: string;\n  };\n  horaInicio: string;\n  horaFin: string;\n  fecha: string;\n  reservas: Reserva[];\n  supervisada: boolean;\n}\n\n@Component({\n  selector: 'app-pasar-lista',\n  templateUrl: './pasar-lista.page.html',\n  styleUrls: ['./pasar-lista.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, FormsModule, RouterModule]\n})\nexport class PasarListaPage implements OnInit {\n  clases: Clase[] = [];\n  loading: boolean = true;\n  error: string | null = null;\n\n  constructor(\n    private claseService: ClaseService,\n    private alertController: AlertController,\n    private toastController: ToastController\n  ) { }\n\n  ngOnInit() {\n    this.cargarClases();\n  }\n\n  cargarClases() {\n    this.loading = true;\n    this.error = null;\n\n    this.claseService.getClasesParaPasarLista().subscribe({\n      next: (response) => {\n        console.log('=== FRONTEND DEBUG === Clases recibidas:', response);\n        this.clases = response;\n        this.clases.forEach(clase => {\n          console.log(`=== FRONTEND DEBUG === Clase \"${clase.titulo}\":`, {\n            id: clase._id,\n            reservas: clase.reservas.length,\n            reservasDetalle: clase.reservas.map(r => ({\n              id: r._id,\n              atleta: r.atleta.nombre + ' ' + r.atleta.apellidos,\n              status: r.status\n            }))\n          });\n        });\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Error al cargar las clases:', error);\n        this.error = 'Error al cargar las clases. Por favor, int√©ntalo de nuevo.';\n        this.loading = false;\n      }\n    });\n  }\n\n  marcarTodos(clase: Clase) {\n    clase.reservas.forEach(reserva => {\n      reserva.asistenciaConfirmada = true;\n    });\n  }\n\n  async confirmarAsistencia(clase: Clase) {\n    const alert = await this.alertController.create({\n      header: 'Confirmar Asistencia',\n      message: '¬øEst√°s seguro de que quieres confirmar la asistencia de esta clase?',\n      cssClass: 'custom-alert',\n      buttons: [\n        {\n          text: 'No',\n          role: 'cancel',\n          cssClass: 'alert-button-cancel'\n        },\n        {\n          text: 'S√≠',\n          cssClass: 'alert-button-confirm',\n          handler: () => {\n            this.procesarAsistencia(clase);\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n  private async procesarAsistencia(clase: Clase) {\n    try {\n      console.log('Procesando asistencia para clase:', clase);\n      \n      const reservasActualizadas = clase.reservas.map(reserva => {\n        console.log('Reserva:', reserva);\n        return {\n          reservaId: reserva._id,\n          status: 'confirmada',\n          asistenciaConfirmada: reserva.asistenciaConfirmada\n        };\n      });\n\n      console.log('Reservas a actualizar:', reservasActualizadas);\n\n      if (reservasActualizadas.length === 0) {\n        console.error('No hay reservas para actualizar');\n        return;\n      }\n\n      const claseActualizada = await firstValueFrom(this.claseService.confirmarAsistencia(clase._id, {\n        reservas: reservasActualizadas,\n        supervisada: true\n      }));\n\n      if (claseActualizada) {\n        // Actualizar la clase en el array local\n        const index = this.clases.findIndex(c => c._id === clase._id);\n        if (index !== -1) {\n          this.clases[index] = claseActualizada;\n        }\n\n        // Mostrar mensaje de √©xito\n        const toast = await this.toastController.create({\n          message: 'Asistencia confirmada correctamente',\n          duration: 2000,\n          position: 'bottom',\n          color: 'success'\n        });\n        await toast.present();\n      }\n    } catch (error) {\n      console.error('Error al procesar asistencia:', error);\n      \n      // Mostrar mensaje de error\n      const toast = await this.toastController.create({\n        message: 'Error al confirmar la asistencia',\n        duration: 2000,\n        position: 'bottom',\n        color: 'danger'\n      });\n      await toast.present();\n    }\n  }\n\n  onImageError(event: Event) {\n    const img = event.target as HTMLImageElement;\n    img.src = 'assets/icon/avatar.svg';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-background {\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent;\n}\n\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.content-wrapper {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.header-section {\n  display: flex;\n  align-items: center;\n  padding: 0;\n  margin: 2rem 0 0.5rem 0;\n  margin-bottom: 2rem;;\n  position: relative;\n\n  ion-buttons {\n    margin: 0;\n    padding: 0;\n    height: 24px;\n    margin-left: 0.5rem;\n    position: absolute;\n    left: 0;\n    z-index: 1;\n\n    ion-back-button {\n      --background: #153ae0;\n      --color: white;\n      --opacity: 1;\n      --padding-start: 0;\n      --padding-end: 0;\n      --min-width: 24px;\n      --min-height: 24px;\n      --icon-font-size: 24px;\n      --icon-margin-start: 0;\n      --icon-margin-end: 0;\n      --icon-padding-start: 0;\n      --icon-padding-end: 0;\n      border-radius: 4px;\n      --background-hover: #153ae0;\n      --background-activated: #153ae0;\n      --background-focused: #153ae0;\n      --ripple-color: transparent;\n      --border-radius: 4px;\n      --box-shadow: none;\n    }\n\n    ion-back-button::part(native) {\n      background: #153ae0;\n      color: white;\n      border-radius: 4px;\n    }\n  }\n  \n\n  .welcome-title {\n    text-align: center;\n    margin: 0;\n    font-size: 1.5rem;\n    color: #153ae0;\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    width: auto;\n  }\n}\n\n.scroll-container {\n  height: calc(100vh - 120px);\n  overflow-y: auto;\n  padding-bottom: 100px;\n}\n\n.loading-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 200px;\n  color: #153ae0;\n\n  ion-spinner {\n    width: 48px;\n    height: 48px;\n    margin-bottom: 16px;\n  }\n}\n\n.error-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n  color: #153ae0;\n  text-align: center;\n\n  ion-icon {\n    font-size: 48px;\n    margin-bottom: 16px;\n  }\n}\n\n.clases-container {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  margin-top: 1rem;\n  padding-bottom: 100px;\n}\n\n.clase-card {\n  background: rgba(255, 255, 255, 0.9);\n  border-radius: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin: 0 1rem;\n\n  ion-card-header {\n    padding: 16px;\n    background-color: transparent;\n  }\n\n  .clase-titulo {\n    font-size: 18px;\n    font-weight: bold;\n    color: #153ae0;\n    margin: 0;\n    \n  }\n\n  .clase-horario {\n    font-size: 14px;\n    color: #666;\n    margin: 0;\n    margin-left: 0.5rem;\n  }\n}\n\n.clase-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n}\n\n.clase-info {\n  flex: 1;\n  padding-left: 0.5rem;\n}\n\n.instructor-info {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-left: 16px;\n  padding: 8px;\n  background: rgba(0, 0, 0, 0.02);\n  border-radius: 8px;\n\n  .instructor-foto {\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    object-fit: cover;\n    border: 2px solid #153ae0;\n  }\n\n  .instructor-nombre {\n    font-size: 14px;\n    color: #333;\n    margin: 0;\n    text-align: right;\n  }\n}\n\n.estudiantes-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 1rem;\n  padding: 1rem;\n}\n\n.estudiante-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.5rem;\n  background: rgba(0, 0, 0, 0.02);\n  border-radius: 8px;\n  border: none;\n\n  .estudiante-info {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    flex: 1;\n  }\n\n  .estudiante-foto {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    object-fit: cover;\n    border: 2px solid #153ae0;\n  }\n\n  .estudiante-nombre {\n    font-size: 14px;\n    color: #333;\n    margin: 0;\n  }\n\n  ion-checkbox {\n    --border-radius: 4px;\n    --checkbox-background-checked: var(--ion-color-primary);\n    --border-color: var(--ion-color-medium);\n    --border-color-checked: var(--ion-color-primary);\n    --checkmark-color: white;\n    margin: 0;\n    --size: 20px;\n\n    &::part(container) {\n      border-radius: 4px;\n    }\n\n    &::part(mark) {\n      border-width: 0 2px 2px 0;\n      border-style: solid;\n      border-color: white;\n      width: 4px;\n      height: 8px;\n      transform: rotate(45deg);\n      margin-top: -2px;\n    }\n  }\n}\n\n.acciones-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 16px;\n  padding: 0 16px;\n  padding-bottom: 8px;\n\n  ion-button {\n    --background: #153ae0;\n    --background-hover: #153ae0;\n    --background-activated: #153ae0;\n    --background-focused: #153ae0;\n    --color: white;\n    --border-radius: 8px;\n    --box-shadow: none;\n    margin: 0;\n    height: 40px;\n    font-weight: 500;\n    width: 200px;\n    display: flex;\n    justify-content: center;\n  }\n\n  .clase-supervisada {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n    background-color: #4CAF50;\n    color: white;\n    padding: 8px 24px;\n    border-radius: 8px;\n    font-weight: 500;\n    width: auto;\n    \n    text-align: center;\n\n    \n\n    p {\n      font-size: 16px;\n      white-space: nowrap;\n      text-align: center;\n      line-height: 1;\n      display: inline-block;\n      vertical-align: middle;\n    }\n  }\n}\n\n// Estilos para el checkbox\nion-checkbox {\n  --size: 24px;\n  --checkbox-background-checked: #153ae0;\n  --border-color: #153ae0;\n  --border-color-checked: #153ae0;\n}\n\n.container {\n  padding: 0 1rem;\n  margin-bottom: 4rem;\n}\n\n.clases-list {\n  margin-top: 1rem;\n  padding-bottom: 4rem;\n}\n\nion-content {\n  --padding-bottom: 2rem;\n}\n\n// Estilos para el di√°logo de confirmaci√≥n\n::ng-deep .custom-alert {\n  --min-width: 300px;\n  --max-width: 90%;\n  --height: auto;\n  --border-radius: 16px;\n  --box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  \n  .alert-wrapper {\n    padding: 20px;\n  }\n\n  .alert-head {\n    padding: 16px 16px 8px;\n    \n    .alert-title {\n      font-size: 1.2rem;\n      font-weight: 600;\n      color: var(--ion-color-dark);\n    }\n  }\n\n  .alert-message {\n    padding: 8px 16px 16px;\n    font-size: 1rem;\n    color: var(--ion-color-medium);\n  }\n\n  .alert-button-group {\n    padding: 8px;\n    display: flex;\n    gap: 8px;\n    justify-content: center;\n\n    .alert-button {\n      min-width: 100px;\n      margin: 0;\n      padding: 12px 24px;\n      border-radius: 8px;\n      font-weight: 500;\n      text-transform: none;\n      font-size: 1rem;\n\n      &.alert-button-cancel {\n        --background: var(--ion-color-light);\n        --color: var(--ion-color-medium);\n      }\n\n      &.alert-button-confirm {\n        --background: var(--ion-color-primary);\n        --color: white;\n      }\n    }\n  }\n}\n\n",
                    "styleUrl": "./pasar-lista.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "claseService",
                        "type": "ClaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "claseService",
                        "type": "ClaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <div class=\"content-wrapper\">\n    <div class=\"header-section\">\n      <ion-buttons slot=\"start\">\n        <ion-back-button defaultHref=\"/mestre-portal\" text=\"\"></ion-back-button>\n      </ion-buttons>\n      <h1 class=\"welcome-title\">Pasar Lista</h1>\n    </div>\n\n    <div class=\"scroll-container\">\n      <div *ngIf=\"loading\" class=\"loading-container\">\n        <ion-spinner name=\"crescent\"></ion-spinner>\n        <p>Cargando clases...</p>\n      </div>\n\n      <div *ngIf=\"error\" class=\"error-container\">\n        <ion-icon name=\"alert-circle-outline\"></ion-icon>\n        <p>{{ error }}</p>\n      </div>\n\n      <div *ngIf=\"!loading && !error && clases.length === 0\" class=\"empty-container\">\n        <ion-icon name=\"calendar-outline\"></ion-icon>\n        <p>No hay clases para pasar lista</p>\n      </div>\n\n      <div *ngIf=\"!loading && !error\" class=\"clases-container\">\n        <ion-card *ngFor=\"let clase of clases\" class=\"clase-card\">\n          <ion-card-header>\n            <div class=\"clase-header\">\n              <div class=\"clase-info\">\n                <ion-card-title class=\"clase-titulo\">\n                  {{ clase.titulo }}\n                </ion-card-title>\n                <ion-card-subtitle class=\"clase-horario\">\n                  {{ clase.horaInicio }} - {{ clase.horaFin }}\n                </ion-card-subtitle>\n              </div>\n              <div class=\"instructor-info\">\n                <img [src]=\"clase.instructor?.foto || 'assets/default-avatar.png'\" \n                     [alt]=\"clase.instructor?.nombre || 'Instructor'\"\n                     class=\"instructor-foto\"\n                     (error)=\"clase.instructor.foto = 'assets/default-avatar.png'\">\n                <p class=\"instructor-nombre\">\n                  {{ clase.instructor?.nombre }} {{ clase.instructor?.apellidos }}\n                </p>\n              </div>\n            </div>\n          </ion-card-header>\n\n          <ion-card-content>\n            <div class=\"estudiantes-container\">\n              <div class=\"estudiante-item\" *ngFor=\"let reserva of clase.reservas\">\n                <div class=\"estudiante-info\">\n                  <img [src]=\"reserva.atleta.foto || 'assets/default-avatar.png'\" \n                       [alt]=\"reserva.atleta.nombre\"\n                       class=\"estudiante-foto\"\n                       (error)=\"reserva.atleta.foto = 'assets/default-avatar.png'\">\n                  <p class=\"estudiante-nombre\">\n                    {{ reserva.atleta.nombre }} {{ reserva.atleta.apellidos }}\n                  </p>\n                </div>\n                <ion-checkbox [(ngModel)]=\"reserva.asistenciaConfirmada\" [disabled]=\"clase.supervisada\"></ion-checkbox>\n              </div>\n            </div>\n\n            <div class=\"acciones-container\">\n              <ion-button *ngIf=\"!clase.supervisada\" expand=\"block\" (click)=\"confirmarAsistencia(clase)\">\n                Confirmar Asistencia\n              </ion-button>\n              <div *ngIf=\"clase.supervisada\" class=\"clase-supervisada\">\n                <p>Clase Supervisada</p>\n              </div>\n            </div>\n          </ion-card-content>\n        </ion-card>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PerfilPage",
            "id": "component-PerfilPage-057261eabbd2973af627e8bc6dd8c63c4307671ae8ee388d32893f05affa76ede1967525532203b9b9c536b2ad08865f2c3e51dcff7aa6cf243fad30b9fce168",
            "file": "GiConnect/src/app/pages/perfil/perfil.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-perfil",
            "styleUrls": [
                "./perfil.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./perfil.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeSubscription",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Suscripcion | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "userData",
                    "defaultValue": "{\n    nombre: '',\n    apellido1: '',\n    apellido2: '',\n    email: '',\n    telefono: '',\n    dni: '',\n    numIBJJF: '',\n    fechaInicio: null,\n    cinturon: '',\n    grado: '',\n    fechaDesde: null,\n    clasesAsistidas: 0,\n    clasesImpartidas: 0,\n    role: '',\n    foto: null\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "userName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "userPhoto",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "userRole",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "changePhoto",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "fileToBase64",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoleName",
                    "args": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubscriptionStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSubscriptionExpired",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pickFromGallery",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "presentToast",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "takePicture",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 437,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "updateField",
                    "args": [
                        {
                            "name": "field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserPhoto",
                    "args": [
                        {
                            "name": "base64Image",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "base64Image",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule, Platform, AlertController, ToastController } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { addIcons } from 'ionicons';\nimport { createOutline, cameraOutline, saveOutline } from 'ionicons/icons';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { AuthService } from '../../services/auth.service';\nimport { SuscripcionService } from '../../services/suscripcion.service';\nimport { Suscripcion } from '../../interfaces/suscripcion.interface';\n\ninterface UserData {\n  nombre: string;\n  apellido1: string;\n  apellido2: string;\n  email: string;\n  telefono: string;\n  dni: string;\n  numIBJJF: string;\n  fechaInicio: string | null;\n  cinturon: string;\n  grado: string;\n  fechaDesde: string | null;\n  clasesAsistidas: number;\n  clasesImpartidas: number;\n  role: string;\n  foto: string | null;\n}\n\ninterface Subscription {\n  tipo: string;\n  fechaFin: string;\n}\n\n@Component({\n  selector: 'app-perfil',\n  templateUrl: './perfil.page.html',\n  styleUrls: ['./perfil.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    IonicModule,\n    FormsModule\n  ]\n})\nexport class PerfilPage implements OnInit {\n  userData: UserData = {\n    nombre: '',\n    apellido1: '',\n    apellido2: '',\n    email: '',\n    telefono: '',\n    dni: '',\n    numIBJJF: '',\n    fechaInicio: null,\n    cinturon: '',\n    grado: '',\n    fechaDesde: null,\n    clasesAsistidas: 0,\n    clasesImpartidas: 0,\n    role: '',\n    foto: null\n  };\n\n  userName: string = '';\n  userRole: string = '';\n  userPhoto: string | null = null;\n  activeSubscription: Suscripcion | null = null;\n\n  constructor(\n    private router: Router,\n    private http: HttpClient,\n    private alertController: AlertController,\n    private toastController: ToastController,\n    private platform: Platform,\n    private authService: AuthService,\n    private suscripcionService: SuscripcionService\n  ) {\n    addIcons({ createOutline, cameraOutline, saveOutline });\n  }\n\n  ngOnInit() {\n    this.loadUserData();\n    this.loadSubscription();\n  }\n\n  loadUserData() {\n    const userInfo = localStorage.getItem('user');\n    if (userInfo) {\n      try {\n        const user = JSON.parse(userInfo);\n        console.log('Usuario cargado:', user); // Para debug\n        this.userData = {\n          ...this.userData,\n          ...user,\n          fechaInicio: user.fechaInicio || null,\n          fechaDesde: user.fechaDesde || null\n        };\n        this.userName = `${user.nombre} ${user.apellido1}`;\n        this.userRole = this.getRoleName(user.role);\n        this.userPhoto = user.foto || null;\n      } catch (error) {\n        console.error('Error parsing user info:', error);\n      }\n    }\n  }\n\n  loadSubscription() {\n    console.log('Cargando suscripciones activas...');\n    this.suscripcionService.getSuscripcionesActivas().subscribe({\n      next: (suscripciones: Suscripcion[]) => {\n        console.log('Suscripciones recibidas:', suscripciones);\n        if (suscripciones && suscripciones.length > 0) {\n          // Ordenar por fecha de fin y tomar la m√°s reciente\n          suscripciones.sort((a, b) => new Date(b.fechaFin).getTime() - new Date(a.fechaFin).getTime());\n          this.activeSubscription = suscripciones[0];\n          console.log('Suscripci√≥n activa:', this.activeSubscription);\n        } else {\n          this.activeSubscription = null;\n          console.log('No hay suscripciones activas');\n        }\n      },\n      error: (error) => {\n        console.error('Error al cargar suscripciones:', error);\n        this.activeSubscription = null;\n      }\n    });\n  }\n\n  isSubscriptionExpired(): boolean {\n    if (!this.activeSubscription) return true;\n    const fechaFin = new Date(this.activeSubscription.fechaFin);\n    const hoy = new Date();\n    return fechaFin < hoy;\n  }\n\n  getSubscriptionStatus(): string {\n    if (!this.activeSubscription) {\n      return 'Sin suscripci√≥n activa';\n    }\n    if (this.isSubscriptionExpired()) {\n      return 'Suscripci√≥n expirada';\n    }\n    return `Suscripci√≥n ${this.activeSubscription.tipo} activa hasta ${new Date(this.activeSubscription.fechaFin).toLocaleDateString('es-ES')}`;\n  }\n\n  getRoleName(role: string): string {\n    switch (role?.toLowerCase()) {\n      case 'admin':\n        return 'Administrador';\n      case 'maestro':\n        return 'Maestro';\n      case 'instructor':\n        return 'Instructor';\n      case 'atleta':\n        return 'Atleta';\n      default:\n        console.warn('Rol no reconocido:', role);\n        return 'Usuario';\n    }\n  }\n\n  async updateField(field: keyof UserData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No hay token de autenticaci√≥n');\n      }\n\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/${field}`,\n        { [field]: this.userData[field] },\n        { headers }\n      ).toPromise();\n\n      // Actualizar el localStorage\n      const userInfo = localStorage.getItem('user');\n      if (userInfo) {\n        const user = JSON.parse(userInfo);\n        user[field] = this.userData[field];\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n\n      this.presentToast('Campo actualizado correctamente');\n    } catch (error) {\n      console.error(`Error al actualizar ${field}:`, error);\n      this.presentToast(`Error al actualizar ${field}`);\n    }\n  }\n\n  async changePhoto() {\n    if (this.platform.is('hybrid')) {\n      const alert = await this.alertController.create({\n        header: 'Seleccionar fuente',\n        cssClass: 'image-source-alert',\n        buttons: [\n          {\n            text: 'C√°mara',\n            cssClass: 'alert-button',\n            handler: () => {\n              this.takePicture();\n            }\n          },\n          {\n            text: 'Galer√≠a',\n            cssClass: 'alert-button',\n            handler: () => {\n              this.pickFromGallery();\n            }\n          },\n          {\n            text: 'Cancelar',\n            cssClass: 'alert-button-cancel',\n            role: 'cancel'\n          }\n        ],\n        backdropDismiss: true\n      });\n\n      await alert.present();\n    } else {\n      // En web, usamos el input file\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      input.onchange = (event: any) => {\n        const file = event.target.files[0];\n        if (file) {\n          this.handleFile(file);\n        }\n      };\n      input.click();\n    }\n  }\n\n  private async handleFile(file: File) {\n    try {\n      const base64 = await this.fileToBase64(file);\n      await this.updateUserPhoto(base64);\n    } catch (error) {\n      console.error('Error al procesar el archivo:', error);\n      this.presentToast('Error al procesar la imagen');\n    }\n  }\n\n  private fileToBase64(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  private async updateUserPhoto(base64Image: string) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No hay token de autenticaci√≥n');\n      }\n\n      // Comprimir la imagen antes de enviarla\n      const compressedImage = await this.authService.compressImage(base64Image);\n      console.log('Tama√±o de la imagen comprimida:', compressedImage.length);\n\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/me/photo`,\n        { foto: compressedImage },\n        { headers }\n      ).toPromise();\n\n      // Actualizar la foto en el localStorage\n      const userInfo = localStorage.getItem('user');\n      if (userInfo) {\n        const user = JSON.parse(userInfo);\n        user.foto = compressedImage;\n        localStorage.setItem('user', JSON.stringify(user));\n        this.userPhoto = compressedImage;\n      }\n\n      this.presentToast('Foto actualizada correctamente');\n    } catch (error: any) {\n      console.error('Error al actualizar la foto:', error);\n      if (error.status === 413) {\n        this.presentToast('La imagen es demasiado grande. Por favor, selecciona una imagen m√°s peque√±a.');\n      } else {\n        this.presentToast(error.error?.error || 'Error al actualizar la foto. Por favor, int√©ntalo de nuevo.');\n      }\n    }\n  }\n\n  private async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message,\n      duration: 2000,\n      position: 'middle',\n      cssClass: 'success-toast'\n    });\n    await toast.present();\n  }\n\n  async saveChanges() {\n    try {\n      const userInfo = localStorage.getItem('user');\n      if (!userInfo) {\n        throw new Error('No hay usuario registrado');\n      }\n\n      const user = JSON.parse(userInfo);\n      console.log('Usuario a actualizar:', user); // Para debug\n      const token = localStorage.getItem('token');\n\n      if (!user._id) { // Cambiado de user.id a user._id\n        throw new Error('ID de usuario no encontrado');\n      }\n\n      if (!token) {\n        throw new Error('Token de autorizaci√≥n no encontrado');\n      }\n\n      // Configurar headers con el token\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n      \n      // Actualizar en la base de datos\n      const response = await this.http.put(\n        `${environment.apiUrl}/users/${user._id}`, // Cambiado de user.id a user._id\n        this.userData,\n        { headers }\n      ).toPromise();\n      \n      if (response) {\n        // Actualizar localStorage con los nuevos datos\n        const updatedUser = { ...user, ...this.userData };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        \n        // Actualizar las variables locales\n        this.userName = `${this.userData.nombre} ${this.userData.apellido1}`;\n        this.userRole = this.getRoleName(this.userData.role);\n        \n        // Mostrar alerta de √©xito\n        const alert = await this.alertController.create({\n          header: '√âxito',\n          message: 'Los cambios se han guardado correctamente',\n          buttons: [\n            {\n              text: 'OK',\n              handler: () => {\n                this.router.navigate(['/home']);\n              }\n            }\n          ]\n        });\n\n        await alert.present();\n      }\n    } catch (error) {\n      console.error('Error al guardar los cambios:', error);\n      // Mostrar alerta de error\n      const alert = await this.alertController.create({\n        header: 'Error',\n        message: 'Ha ocurrido un error al guardar los cambios. Por favor, int√©ntalo de nuevo.',\n        buttons: ['OK']\n      });\n\n      await alert.present();\n    }\n  }\n\n  async pickFromGallery() {\n    try {\n      console.log('Iniciando selecci√≥n de foto desde galer√≠a');\n      \n      // Verificar permisos espec√≠ficamente para la galer√≠a\n      const permissionStatus = await Camera.checkPermissions();\n      console.log('Estado de permisos:', permissionStatus);\n      \n      if (permissionStatus.photos !== 'granted') {\n        console.log('Solicitando permisos de galer√≠a');\n        const requestResult = await Camera.requestPermissions({\n          permissions: ['photos']\n        });\n        console.log('Resultado de solicitud de permisos:', requestResult);\n        \n        if (requestResult.photos !== 'granted') {\n          this.presentToast('Se necesita permiso para acceder a la galer√≠a');\n          return;\n        }\n      }\n\n      console.log('Configurando opciones de la galer√≠a');\n      const options: any = {\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Photos,\n        correctOrientation: true\n      };\n      \n      console.log('Opciones de la galer√≠a:', options);\n      console.log('Intentando obtener foto');\n      \n      const image = await Camera.getPhoto(options);\n      console.log('Foto obtenida:', image);\n\n      if (image.base64String) {\n        console.log('Procesando imagen base64');\n        const base64Image = `data:image/${image.format};base64,${image.base64String}`;\n        await this.updateUserPhoto(base64Image);\n        console.log('Imagen procesada y enviada al servidor');\n      }\n    } catch (error: any) {\n      console.error('Error detallado al seleccionar la foto:', error);\n      if (error.message === 'User cancelled photos app' || error.message === 'User cancelled photos') {\n        console.log('Usuario cancel√≥ la selecci√≥n');\n        return;\n      }\n      this.presentToast('Error al seleccionar la foto. Por favor, int√©ntalo de nuevo.');\n    }\n  }\n\n  async takePicture() {\n    try {\n      console.log('Iniciando captura de foto');\n      \n      // Verificar permisos espec√≠ficamente para la c√°mara\n      const permissionStatus = await Camera.checkPermissions();\n      console.log('Estado de permisos:', permissionStatus);\n      \n      if (permissionStatus.camera !== 'granted') {\n        console.log('Solicitando permisos de c√°mara');\n        const requestResult = await Camera.requestPermissions({\n          permissions: ['camera']\n        });\n        console.log('Resultado de solicitud de permisos:', requestResult);\n        \n        if (requestResult.camera !== 'granted') {\n          this.presentToast('Se necesita permiso para acceder a la c√°mara');\n          return;\n        }\n      }\n\n      console.log('Configurando opciones de la c√°mara');\n      const options: any = {\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Camera,\n        correctOrientation: true\n      };\n      \n      console.log('Opciones de la c√°mara:', options);\n      console.log('Intentando obtener foto');\n      \n      const image = await Camera.getPhoto(options);\n      console.log('Foto obtenida:', image);\n\n      if (image.base64String) {\n        console.log('Procesando imagen base64');\n        const base64Image = `data:image/${image.format};base64,${image.base64String}`;\n        await this.updateUserPhoto(base64Image);\n        console.log('Imagen procesada y enviada al servidor');\n      }\n    } catch (error: any) {\n      console.error('Error detallado al tomar la foto:', error);\n      if (error.message === 'User cancelled photos app' || error.message === 'User cancelled photos') {\n        console.log('Usuario cancel√≥ la captura');\n        return;\n      }\n      this.presentToast('Error al tomar la foto. Por favor, int√©ntalo de nuevo.');\n    }\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  height: 100%;\n}\n\nion-content {\n  --background: transparent;\n}\n\n.login-background {\n  position: relative;\n  width: 100%;\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n  background: transparent;\n  padding: 10px 0;\n}\n\n/* Logo cuadrado transl√∫cido centrado */\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.welcome-title {\n  text-align: center;\n  margin-top: 1rem;\n  font-size: 1.5rem;\n  color: #153ae0;\n  position: relative;\n  z-index: 2;\n}\n\n.profile-container {\n  background: rgba(255, 255, 255, 0.5);\n  border-radius: 15px;\n  padding: 20px;\n  margin: 10px auto;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  position: relative;\n  z-index: 2;\n  max-width: 600px;\n  width: 90%;\n  backdrop-filter: blur(8px);\n}\n\n.profile-header {\n  text-align: center;\n  margin-bottom: 20px;\n\n  .profile-photo-container {\n    position: relative;\n    width: 120px;\n    margin: 0 auto 15px;\n\n    .profile-photo {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n      overflow: hidden;\n      border: 3px solid #153ae0;\n\n      img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n      }\n    }\n\n    ion-button {\n      position: absolute;\n      bottom: 0;\n      right: 0;\n      --padding-start: 8px;\n      --padding-end: 8px;\n      --background: #153ae0;\n      --color: white;\n    }\n  }\n\n  h2 {\n    color: #153ae0;\n    margin: 0;\n    font-size: 1.5rem;\n  }\n\n  .user-role {\n    color: #666;\n    margin: 5px 0 0;\n    font-size: 0.9rem;\n  }\n}\n\n.profile-details {\n  ion-list {\n    background: transparent;\n    padding: 0;\n  }\n\n  ion-item {\n    --background: transparent;\n    --padding-start: 0;\n    --inner-padding-end: 0;\n    margin-bottom: 10px;\n\n    h3 {\n      color: #153ae0;\n      font-size: 0.9rem;\n      margin: 0;\n    }\n\n    p {\n      color: #333;\n      margin: 5px 0 0;\n      font-size: 1rem;\n    }\n\n    ion-input {\n      --padding-start: 0;\n      --padding-end: 0;\n      --color: #333;\n      font-size: 1rem;\n    }\n  }\n}\n\n.section-title {\n  color: #153ae0;\n  font-size: 1.2rem;\n  font-weight: bold;\n  margin: 20px 0 10px;\n  padding-bottom: 5px;\n  border-bottom: 2px solid #153ae0;\n}\n\n.subscription-info {\n  background: rgba(21, 58, 224, 0.1);\n  padding: 10px;\n  border-radius: 8px;\n  margin: 10px 0;\n\n  p {\n    margin: 0;\n    color: #153ae0;\n    font-size: 0.9rem;\n  }\n}\n\n.profile-actions {\n  text-align: center;\n  margin-top: 2rem;\n  padding: 0 1rem;\n\n  ion-button {\n    display: inline-block;\n    width: 200px;\n  }\n}\n\n// Estilos para el alert de selecci√≥n de imagen\n::ng-deep .image-source-alert {\n  --min-width: 300px;\n  --max-width: 90%;\n  --height: auto;\n  --border-radius: 16px;\n  --backdrop-opacity: 0.7;\n\n  .alert-wrapper {\n    position: fixed !important;\n    top: 50% !important;\n    left: 50% !important;\n    transform: translate(-50%, -50%) !important;\n    width: 90% !important;\n    max-width: 300px !important;\n    background: var(--ion-color-light);\n    border-radius: 16px;\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  }\n\n  .alert-header {\n    padding: 16px;\n    text-align: center;\n    border-bottom: 1px solid var(--ion-color-light-shade);\n    font-weight: 600;\n    color: var(--ion-color-dark);\n    margin: 0 auto;\n    width: 100%;\n  }\n\n  .alert-title {\n    text-align: center !important;\n    width: 100% !important;\n    margin: 0 auto !important;\n  }\n\n  .alert-button-group {\n    padding: 8px 0;\n    display: flex !important;\n    flex-direction: column !important;\n  }\n\n  .alert-button {\n    margin: 8px 16px;\n    height: 48px;\n    border-radius: 8px;\n    font-weight: 500;\n    text-transform: none;\n    color: var(--ion-color-primary);\n    background: var(--ion-color-light);\n    border: 1px solid var(--ion-color-light-shade);\n    width: calc(100% - 32px) !important;\n    margin-left: 16px !important;\n    margin-right: 16px !important;\n\n    &:last-child {\n      margin-bottom: 16px;\n    }\n\n    &.alert-button-cancel {\n      color: var(--ion-color-danger);\n      border: none;\n      margin-top: 16px;\n    }\n  }\n} ",
                    "styleUrl": "./perfil.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "suscripcionService",
                        "type": "SuscripcionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "suscripcionService",
                        "type": "SuscripcionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ion-content>\n  <div class=\"login-background\">\n    <div class=\"backdrop-logo\"></div>\n\n    <div class=\"ion-padding\">\n      <div class=\"profile-container\">\n        <div class=\"profile-header\">\n          <div class=\"profile-photo-container\">\n            <div class=\"profile-photo\">\n              <img [src]=\"userPhoto || 'assets/default-avatar.png'\" alt=\"Foto de perfil\">\n            </div>\n            <ion-button fill=\"clear\" size=\"small\" (click)=\"changePhoto()\">\n              <ion-icon name=\"camera-outline\"></ion-icon>\n            </ion-button>\n          </div>\n          <h2>{{userName}}</h2>\n          <p class=\"user-role\">{{userRole}}</p>\n        </div>\n\n        <div class=\"profile-details\">\n          <ion-list>\n            <!-- Campos editables -->\n            <ion-item>\n              <ion-label>\n                <h3>Nombre</h3>\n                <ion-input [(ngModel)]=\"userData.nombre\" (ionChange)=\"updateField('nombre')\"></ion-input>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Primer Apellido</h3>\n                <ion-input [(ngModel)]=\"userData.apellido1\" (ionChange)=\"updateField('apellido1')\"></ion-input>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Segundo Apellido</h3>\n                <ion-input [(ngModel)]=\"userData.apellido2\" (ionChange)=\"updateField('apellido2')\"></ion-input>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>DNI</h3>\n                <ion-input [(ngModel)]=\"userData.dni\" (ionChange)=\"updateField('dni')\"></ion-input>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Tel√©fono</h3>\n                <ion-input [(ngModel)]=\"userData.telefono\" (ionChange)=\"updateField('telefono')\"></ion-input>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>N√∫mero Federaci√≥n (IBJJF)</h3>\n                <ion-input [(ngModel)]=\"userData.numIBJJF\" (ionChange)=\"updateField('numIBJJF')\"></ion-input>\n              </ion-label>\n            </ion-item>\n\n            <!-- Campos de solo lectura -->\n            <ion-item>\n              <ion-label>\n                <h3>Email</h3>\n                <p>{{userData.email}}</p>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Fecha de Inicio</h3>\n                <p>{{userData.fechaInicio ? (userData.fechaInicio | date:'dd/MM/yyyy') : 'No disponible'}}</p>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Cintur√≥n</h3>\n                <p>{{userData.cinturon}}</p>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Grado</h3>\n                <p>{{userData.grado}}</p>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Fecha desde grado/cintur√≥n</h3>\n                <p>{{userData.fechaDesde ? (userData.fechaDesde | date:'dd/MM/yyyy') : 'No disponible'}}</p>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Clases Asistidas</h3>\n                <p>{{userData.clasesAsistidas}}</p>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Clases Impartidas</h3>\n                <p>{{userData.clasesImpartidas}}</p>\n              </ion-label>\n            </ion-item>\n          </ion-list>\n\n          <!-- Secci√≥n de Suscripciones -->\n          <div class=\"section-title\">Suscripciones</div>\n          <div class=\"subscription-info\" *ngIf=\"activeSubscription && !isSubscriptionExpired()\">\n            <p>Suscripci√≥n activa tipo {{activeSubscription.tipo}} hasta {{activeSubscription.fechaFin | date:'dd/MM/yyyy'}}</p>\n          </div>\n          <div class=\"subscription-info\" *ngIf=\"!activeSubscription || isSubscriptionExpired()\">\n            <p>Sin suscripciones activas</p>\n          </div>\n\n          <!-- Secci√≥n de Compras -->\n          <div class=\"section-title\">Compras</div>\n          <!-- Aqu√≠ se a√±adir√° el contenido de compras m√°s adelante -->\n        </div>\n\n        <div class=\"profile-actions\">\n          <ion-button expand=\"block\" (click)=\"saveChanges()\" type=\"button\">\n            <ion-icon name=\"save-outline\" slot=\"start\"></ion-icon>\n            Guardar Cambios\n          </ion-button>\n        </div>\n      </div>\n    </div>\n  </div>\n</ion-content> "
        },
        {
            "name": "PruebaPage",
            "id": "component-PruebaPage-f9dcf462e77f2fc9d0a76b5e417cf0183021958cf1c65a32ba656aff8f9e8ecd8d386292586076e20e3df5641800b2d5f1581a7b8627c936ee84f5ab68e738b2",
            "file": "GiConnect/src/app/pages/prueba/prueba.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-prueba",
            "styleUrls": [
                "./prueba.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./prueba.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IonicModule } from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-prueba',\n  templateUrl: './prueba.page.html',\n  styleUrls: ['./prueba.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule]\n})\nexport class PruebaPage {\n  constructor() {}\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-background {\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent !important;\n}\n\n/* Logo cuadrado transl√∫cido centrado */\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.ion-padding {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  max-width: 600px;\n  padding: 2rem;\n  background: transparent !important;\n}\n\n",
                    "styleUrl": "./prueba.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "extends": [],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <div class=\"ion-padding\">\n    <div class=\"image-container\">\n      <img src=\"assets/enConstruccion5.png\" alt=\"En construcci√≥n\" class=\"construction-image\">\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "RegisterPage",
            "id": "component-RegisterPage-bebb8bc1224805e7028eb75cb516fdb891fc2bb1b59cdb86b3763880e836dfc6c7db0796abff60a8278f3be61b475ac1c22d2771fefab2cc97c533dcbd3a6efd",
            "file": "GiConnect/src/app/auth/register/register.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "photoUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "showPassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "fileToBase64",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "pickFromGallery",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "presentToast",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectImageSource",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "takePicture",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "IonContent"
                },
                {
                    "name": "IonHeader"
                },
                {
                    "name": "IonTitle"
                },
                {
                    "name": "IonToolbar"
                },
                {
                    "name": "IonItem"
                },
                {
                    "name": "IonLabel"
                },
                {
                    "name": "IonInput"
                },
                {
                    "name": "IonButton"
                },
                {
                    "name": "IonIcon"
                },
                {
                    "name": "IonCard"
                },
                {
                    "name": "IonCardTitle"
                },
                {
                    "name": "IonNote"
                },
                {
                    "name": "IonSpinner"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { Platform } from '@ionic/angular';\nimport { AuthService } from '../../services/auth.service';\nimport { \n  ToastController, \n  ActionSheetController,\n  IonContent,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonItem,\n  IonLabel,\n  IonInput,\n  IonButton,\n  IonIcon,\n  AlertController,\n  LoadingController,\n  IonCard,\n  IonCardTitle,\n  IonNote,\n  IonSpinner\n} from '@ionic/angular/standalone';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonItem,\n    IonLabel,\n    IonInput,\n    IonButton,\n    IonIcon,\n    IonCard,\n    IonCardTitle,\n    IonNote,\n    IonSpinner\n  ]\n})\nexport class RegisterPage implements OnInit {\n  registerForm: FormGroup;\n  showPassword = false;\n  photoUrl: string | null = null;\n  isLoading = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private toastController: ToastController,\n    private actionSheetController: ActionSheetController,\n    private alertController: AlertController,\n    private loadingController: LoadingController,\n    private platform: Platform\n  ) {\n    this.registerForm = this.formBuilder.group({\n      nombre: ['', [Validators.required]],\n      apellido1: ['', [Validators.required]],\n      apellido2: [''],\n      dni: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(9)]],\n      telefono: ['', [Validators.required, Validators.pattern(/^\\+?\\d{7,15}$/)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      foto: [null]\n    });\n  }\n\n  ngOnInit() {}\n\n  async selectImageSource() {\n    if (this.platform.is('hybrid')) {\n    const alert = await this.alertController.create({\n      header: 'Seleccionar fuente',\n      cssClass: 'image-source-alert',\n      buttons: [\n        {\n          text: 'C√°mara',\n          cssClass: 'alert-button',\n          handler: () => {\n            this.takePicture();\n          }\n        },\n        {\n          text: 'Galer√≠a',\n          cssClass: 'alert-button',\n          handler: () => {\n            this.pickFromGallery();\n          }\n        },\n        {\n          text: 'Cancelar',\n          cssClass: 'alert-button-cancel',\n          role: 'cancel'\n        }\n      ]\n    });\n\n    await alert.present();\n    } else {\n      // En web, usamos el input file\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      input.onchange = (event: any) => {\n        const file = event.target.files[0];\n        if (file) {\n          this.handleFile(file);\n        }\n      };\n      input.click();\n    }\n  }\n\n  async takePicture() {\n    try {\n      console.log('Iniciando captura de foto');\n      \n      // Verificar permisos espec√≠ficamente para la c√°mara\n      const permissionStatus = await Camera.checkPermissions();\n      console.log('Estado de permisos:', permissionStatus);\n      \n      if (permissionStatus.camera !== 'granted') {\n        console.log('Solicitando permisos de c√°mara');\n        const requestResult = await Camera.requestPermissions({\n          permissions: ['camera']\n        });\n        console.log('Resultado de solicitud de permisos:', requestResult);\n        \n        if (requestResult.camera !== 'granted') {\n          this.presentToast('Se necesita permiso para acceder a la c√°mara');\n          return;\n        }\n      }\n\n      console.log('Configurando opciones de la c√°mara');\n      const options: any = {\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Camera,\n        correctOrientation: true\n      };\n      \n      console.log('Opciones de la c√°mara:', options);\n      console.log('Intentando obtener foto');\n      \n      const image = await Camera.getPhoto(options);\n      console.log('Foto obtenida:', image);\n\n      if (image.base64String) {\n        console.log('Procesando imagen base64');\n        const base64Image = `data:image/${image.format};base64,${image.base64String}`;\n        this.registerForm.patchValue({\n          foto: base64Image\n        });\n        console.log('Imagen procesada y asignada al formulario');\n      }\n    } catch (error: any) {\n      console.error('Error detallado al tomar la foto:', error);\n      if (error.message === 'User cancelled photos app' || error.message === 'User cancelled photos') {\n        console.log('Usuario cancel√≥ la captura');\n        return;\n      }\n      this.presentToast('Error al tomar la foto. Por favor, int√©ntalo de nuevo.');\n    }\n  }\n\n  async pickFromGallery() {\n    try {\n      console.log('Iniciando selecci√≥n de foto desde galer√≠a');\n      \n      // Verificar permisos espec√≠ficamente para la galer√≠a\n      const permissionStatus = await Camera.checkPermissions();\n      console.log('Estado de permisos:', permissionStatus);\n      \n      if (permissionStatus.photos !== 'granted') {\n        console.log('Solicitando permisos de galer√≠a');\n        const requestResult = await Camera.requestPermissions({\n          permissions: ['photos']\n        });\n        console.log('Resultado de solicitud de permisos:', requestResult);\n        \n        if (requestResult.photos !== 'granted') {\n          this.presentToast('Se necesita permiso para acceder a la galer√≠a');\n          return;\n        }\n      }\n\n      console.log('Configurando opciones de la galer√≠a');\n      const options: any = {\n        quality: 90,\n        allowEditing: true,\n        resultType: CameraResultType.Base64,\n        source: CameraSource.Photos,\n        correctOrientation: true\n      };\n      \n      console.log('Opciones de la galer√≠a:', options);\n      console.log('Intentando obtener foto');\n      \n      const image = await Camera.getPhoto(options);\n      console.log('Foto obtenida:', image);\n\n      if (image.base64String) {\n        console.log('Procesando imagen base64');\n        const base64Image = `data:image/${image.format};base64,${image.base64String}`;\n        this.registerForm.patchValue({\n          foto: base64Image\n        });\n        console.log('Imagen procesada y asignada al formulario');\n      }\n    } catch (error: any) {\n      console.error('Error detallado al seleccionar la foto:', error);\n      if (error.message === 'User cancelled photos app' || error.message === 'User cancelled photos') {\n        console.log('Usuario cancel√≥ la selecci√≥n');\n        return;\n      }\n      this.presentToast('Error al seleccionar la foto. Por favor, int√©ntalo de nuevo.');\n    }\n  }\n\n  private async handleFile(file: File) {\n    try {\n      const base64 = await this.fileToBase64(file);\n      const compressedImage = await this.authService.compressImage(base64);\n      this.photoUrl = compressedImage;\n      this.registerForm.patchValue({ foto: compressedImage });\n    } catch (error) {\n      console.error('Error al procesar el archivo:', error);\n      this.presentToast('Error al procesar la imagen');\n    }\n  }\n\n  private fileToBase64(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n\n  async onSubmit() {\n    if (this.registerForm.valid) {\n      this.isLoading = true;\n      const loading = await this.loadingController.create({\n        message: 'Registrando...'\n      });\n      await loading.present();\n\n      try {\n        await this.authService.register(this.registerForm.value);\n        await loading.dismiss();\n        this.isLoading = false;\n        \n        const toast = await this.toastController.create({\n          message: 'Tu cuenta ha sido creada correctamente',\n          duration: 3000,\n          position: 'middle',\n          cssClass: 'success-toast'\n        });\n        await toast.present();\n        \n        this.router.navigate(['/auth/login']);\n      } catch (error: any) {\n        await loading.dismiss();\n        this.isLoading = false;\n        \n        const alert = await this.alertController.create({\n          header: 'Error',\n          message: error.message || 'Ha ocurrido un error durante el registro',\n          buttons: ['OK']\n        });\n        await alert.present();\n      }\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  private async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message,\n      duration: 2000,\n      position: 'middle',\n      cssClass: 'success-toast'\n    });\n    await toast.present();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-background {\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  overflow: hidden;\n}\n\n.backdrop-logo {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url('/assets/logoCuadradoPNG.png');\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    opacity: 0.15;\n    z-index: 1;\n    pointer-events: none;\n  }\n\n.login-card {\n  width: 90%;\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border-radius: 15px;\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  border: 1px solid rgba(255, 255, 255, 0.18);\n  z-index: 1;\n}\n\n.card-title {\n  text-align: center;\n  color: var(--ion-color-primary);\n  margin-bottom: 20px;\n  font-size: 24px;\n  font-weight: 500;\n}\n\nion-item {\n  --background: transparent;\n  --border-color: rgba(255, 255, 255, 0.3);\n  --color: white;\n  margin-bottom: 10px;\n}\n\nion-label {\n  color: white !important;\n}\n\nion-input {\n  --color: white;\n  --placeholder-color: rgba(255, 255, 255, 0.6);\n}\n\nion-note {\n  margin-left: 16px;\n  margin-top: -5px;\n  margin-bottom: 10px;\n  display: block;\n}\n\n.photo-upload {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 20px 0;\n\n  ion-button {\n    --color: white;\n    margin-bottom: 10px;\n  }\n\n  .profile-photo {\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n    object-fit: cover;\n    border: 2px solid white;\n  }\n}\n\n.login-button {\n  margin-top: 20px;\n  --background: white;\n  --color: var(--ion-color-primary);\n  --border-radius: 25px;\n  height: 48px;\n  font-weight: 500;\n}\n\n.links-container {\n  margin-top: 20px;\n  text-align: center;\n\n  .register-link {\n    --color: white;\n    font-size: 14px;\n    text-decoration: underline;\n  }\n}\n\n.success-toast {\n  --min-width: 300px;\n  --max-width: 90%;\n  --height: auto;\n  --border-radius: 16px;\n  --background: var(--ion-color-success);\n  --color: white;\n  --box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  position: fixed !important;\n  top: 50% !important;\n  left: 50% !important;\n  transform: translate(-50%, -50%) !important;\n  text-align: center;\n  padding: 16px;\n  font-weight: 500;\n}\n\n// Estilos para el alert de selecci√≥n de imagen\n::ng-deep .image-source-alert {\n  --min-width: 300px;\n  --max-width: 90%;\n  --height: auto;\n  --border-radius: 16px;\n  --backdrop-opacity: 0.7;\n\n  .alert-wrapper {\n    position: fixed !important;\n    top: 50% !important;\n    left: 50% !important;\n    transform: translate(-50%, -50%) !important;\n    width: 90% !important;\n    max-width: 300px !important;\n    background: var(--ion-color-light);\n    border-radius: 16px;\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n    margin-top: -50px !important;\n  }\n\n  .alert-header {\n    padding: 16px;\n    text-align: center;\n    border-bottom: 1px solid var(--ion-color-light-shade);\n    font-weight: 600;\n    color: var(--ion-color-dark);\n    margin: 0 auto;\n    width: 100%;\n  }\n\n  .alert-title {\n    text-align: center !important;\n    width: 100% !important;\n    margin: 0 auto !important;\n  }\n\n  .alert-button-group {\n    padding: 8px 0;\n    display: flex !important;\n    flex-direction: column !important;\n  }\n\n  .alert-button {\n    margin: 8px 16px;\n    height: 48px;\n    border-radius: 8px;\n    font-weight: 500;\n    text-transform: none;\n    color: var(--ion-color-primary);\n    background: var(--ion-color-light);\n    border: 1px solid var(--ion-color-light-shade);\n    width: calc(100% - 32px) !important;\n    margin-left: 16px !important;\n    margin-right: 16px !important;\n\n    &:last-child {\n      margin-bottom: 16px;\n    }\n\n    &.alert-button-cancel {\n      color: var(--ion-color-danger);\n      border: none;\n      margin-top: 16px;\n    }\n  }\n}\n",
                    "styleUrl": "./register.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionSheetController",
                        "type": "ActionSheetController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loadingController",
                        "type": "LoadingController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionSheetController",
                        "type": "ActionSheetController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loadingController",
                        "type": "LoadingController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <ion-card class=\"login-card\">\n    <h2 class=\"card-title\">Registro</h2>\n\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n      <ion-item>\n        <ion-label position=\"stacked\">Nombre</ion-label>\n        <ion-input type=\"text\" formControlName=\"nombre\" placeholder=\"Nombre\"></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"registerForm.get('nombre')?.invalid && registerForm.get('nombre')?.touched\">\n        El nombre es obligatorio\n      </ion-note>\n\n      <ion-item>\n        <ion-label position=\"stacked\">Primer Apellido</ion-label>\n        <ion-input type=\"text\" formControlName=\"apellido1\" placeholder=\"Primer Apellido\"></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"registerForm.get('apellido1')?.invalid && registerForm.get('apellido1')?.touched\">\n        El primer apellido es obligatorio\n      </ion-note>\n\n      <ion-item>\n        <ion-label position=\"stacked\">Segundo Apellido</ion-label>\n        <ion-input type=\"text\" formControlName=\"apellido2\" placeholder=\"Segundo Apellido (opcional)\"></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"registerForm.get('apellido2')?.invalid && registerForm.get('apellido2')?.touched\">\n        El segundo apellido es opcional\n      </ion-note>\n\n      <ion-item>\n        <ion-label position=\"stacked\">DNI</ion-label>\n        <ion-input type=\"text\" formControlName=\"dni\" placeholder=\"DNI\"></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"registerForm.get('dni')?.invalid && registerForm.get('dni')?.touched\">\n        <ng-container *ngIf=\"registerForm.get('dni')?.errors?.['required']\">\n          El DNI es obligatorio\n        </ng-container>\n        <ng-container *ngIf=\"registerForm.get('dni')?.errors?.['minlength'] || registerForm.get('dni')?.errors?.['maxlength']\">\n          El DNI debe tener entre 8 y 9 caracteres\n        </ng-container>\n      </ion-note>\n\n      <ion-item>\n        <ion-label position=\"stacked\">Tel√©fono</ion-label>\n        <ion-input type=\"tel\" formControlName=\"telefono\" placeholder=\"Tel√©fono\"></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"registerForm.get('telefono')?.invalid && registerForm.get('telefono')?.touched\">\n        <ng-container *ngIf=\"registerForm.get('telefono')?.errors?.['required']\">\n          El tel√©fono es obligatorio\n        </ng-container>\n        <ng-container *ngIf=\"registerForm.get('telefono')?.errors?.['pattern']\">\n          El tel√©fono debe tener entre 7 y 15 d√≠gitos\n        </ng-container>\n      </ion-note>\n\n      <ion-item>\n        <ion-label position=\"stacked\">Email</ion-label>\n        <ion-input type=\"email\" formControlName=\"email\" placeholder=\"Email\" autocomplete=\"email\"></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\">\n        <ng-container *ngIf=\"registerForm.get('email')?.errors?.['required']\">\n          El email es obligatorio\n        </ng-container>\n        <ng-container *ngIf=\"registerForm.get('email')?.errors?.['email']\">\n          El email no es v√°lido\n        </ng-container>\n      </ion-note>\n\n      <ion-item>\n        <ion-label position=\"stacked\">Contrase√±a</ion-label>\n        <ion-input [type]=\"showPassword ? 'text' : 'password'\" formControlName=\"password\" placeholder=\"Contrase√±a\" autocomplete=\"new-password\"></ion-input>\n        <ion-button fill=\"clear\" slot=\"end\" (click)=\"togglePasswordVisibility()\">\n          <ion-icon slot=\"icon-only\" [name]=\"showPassword ? 'eye-off-outline' : 'eye-outline'\"></ion-icon>\n        </ion-button>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\">\n        <ng-container *ngIf=\"registerForm.get('password')?.errors?.['required']\">\n          La contrase√±a es obligatoria\n        </ng-container>\n        <ng-container *ngIf=\"registerForm.get('password')?.errors?.['minlength']\">\n          La contrase√±a debe tener al menos 8 caracteres\n        </ng-container>\n      </ion-note>\n\n      <div class=\"photo-upload\">\n        <ion-button fill=\"clear\" (click)=\"selectImageSource()\">\n          <ion-icon name=\"camera-outline\" slot=\"start\"></ion-icon>\n          Subir Foto\n        </ion-button>\n        <img *ngIf=\"photoUrl\" [src]=\"photoUrl\" alt=\"Foto de perfil\" class=\"profile-photo\">\n      </div>\n\n      <ion-button expand=\"block\" type=\"submit\" [disabled]=\"!registerForm.valid\" class=\"login-button\">\n        <ion-spinner *ngIf=\"isLoading\" name=\"crescent\"></ion-spinner>\n        <span *ngIf=\"!isLoading\">Registrarse</span>\n      </ion-button>\n    </form>\n\n    <div class=\"links-container\">\n      <ion-button fill=\"clear\" routerLink=\"/auth/login\" class=\"register-link\">\n        ¬øYa tienes cuenta? Iniciar sesi√≥n\n      </ion-button>\n    </div>\n  </ion-card>\n</div>"
        },
        {
            "name": "ReservasPage",
            "id": "component-ReservasPage-3160ddff8136860d4d7cfaf69113f230d6e91331637d73a8508444ea08367edd47fd476dfdfc3ad9506d460ecc7b8f4549cd0e637628ef6f40ce0fc6a0b34d94",
            "file": "GiConnect/src/app/pages/reservas/reservas.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reservas",
            "styleUrls": [
                "./reservas.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reservas.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "checkInterval",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "clasesEspeciales",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "clasesPorDia",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "diasSemana",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "fechaInicio",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "isAdminOrMaestro",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "numeroSemana",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "reloadListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelarReserva",
                    "args": [
                        {
                            "name": "reservaId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 432,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "reservaId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cargarClasesEspeciales",
                    "args": [
                        {
                            "name": "fechaLunes",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "fechaLunes",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cargarClasesSemana",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "generarSemanaActual",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMesNombre",
                    "args": [
                        {
                            "name": "mes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNumeroSemana",
                    "args": [
                        {
                            "name": "fecha",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fecha",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getReservaUsuario",
                    "args": [
                        {
                            "name": "clase",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 455,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clase",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "iniciarVerificacionSemanal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "obtenerDiaSemana",
                    "args": [
                        {
                            "name": "fecha",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 392,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fecha",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "obtenerFechaLunes",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "presentToast",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "procesarClases",
                    "args": [
                        {
                            "name": "clases",
                            "type": "Clase[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clasesEspeciales",
                            "type": "Clase[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clases",
                            "type": "Clase[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clasesEspeciales",
                            "type": "Clase[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "procesarClasesEspeciales",
                    "args": [
                        {
                            "name": "clases",
                            "type": "Clase[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clases",
                            "type": "Clase[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reservarClase",
                    "args": [
                        {
                            "name": "claseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "claseId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupReloadListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tieneReserva",
                    "args": [
                        {
                            "name": "clase",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 448,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "clase",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { addIcons } from 'ionicons';\nimport { calendarOutline, chevronForwardOutline, chevronBackOutline } from 'ionicons/icons';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from '../../services/auth.service';\nimport moment from 'moment';\nimport { ToastController } from '@ionic/angular';\nimport { interval, Subscription } from 'rxjs';\n\ninterface DiaSemana {\n  diaSemana: string;\n  diaMes: number;\n  mes: string;\n  clases: Clase[];\n}\n\ninterface Clase {\n  _id: string;\n  titulo: string;\n  horaInicio: string;\n  horaFin: string;\n  maxPlazas: number;\n  instructor: {\n    _id: string;\n    nombre: string;\n    foto?: string;\n  };\n  reservas: Reserva[];\n  diaSemana?: string;\n  fecha: Date;\n}\n\ninterface Reserva {\n  _id: string;\n  atleta: {\n    _id: string;\n    nombre: string;\n    foto?: string;\n  };\n  status: 'pendiente' | 'confirmada' | 'cancelada' | 'en_espera';\n}\n\n@Component({\n  selector: 'app-reservas',\n  templateUrl: './reservas.page.html',\n  styleUrls: ['./reservas.page.scss'],\n  standalone: true,\n  imports: [IonicModule, CommonModule, FormsModule]\n})\nexport class ReservasPage implements OnInit, OnDestroy {\n  apiUrl = environment.apiUrl;\n  diasSemana: { nombre: string; clases: any[] }[] = [];\n  clasesEspeciales: { nombre: string; clases: any[] }[] = [];\n  numeroSemana: number = 0;\n  fechaInicio: Date = new Date();\n  userId: string = '';\n  clasesPorDia: { [key: string]: any[] } = {};\n  private checkInterval: Subscription = new Subscription();\n  private reloadListener: any;\n  isAdminOrMaestro: boolean = false;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private toastController: ToastController\n  ) {\n    addIcons({ calendarOutline, chevronForwardOutline, chevronBackOutline });\n    const user = this.authService.getUser();\n    this.isAdminOrMaestro = user?.role === 'admin' || user?.role === 'maestro';\n  }\n\n  ngOnInit() {\n    const user = this.authService.getUser();\n    this.userId = user?._id || '';\n    this.cargarClasesSemana();\n    this.iniciarVerificacionSemanal();\n    this.setupReloadListener();\n  }\n\n  ngOnDestroy() {\n    if (this.checkInterval) {\n      this.checkInterval.unsubscribe();\n    }\n    if (this.reloadListener) {\n      window.removeEventListener('reloadReservas', this.reloadListener);\n    }\n  }\n\n  private iniciarVerificacionSemanal() {\n    // Verificar cada minuto si es domingo a las 22:00\n    this.checkInterval = interval(60000).subscribe(() => {\n      const ahora = new Date();\n      if (ahora.getDay() === 0 && ahora.getHours() === 22 && ahora.getMinutes() === 0) {\n        this.cargarClasesSemana();\n      }\n    });\n  }\n\n  private setupReloadListener() {\n    this.reloadListener = (event: Event) => {\n      if (event instanceof CustomEvent && event.type === 'reloadReservas') {\n        this.cargarClasesSemana();\n      }\n    };\n    window.addEventListener('reloadReservas', this.reloadListener);\n  }\n\n  getNumeroSemana(fecha: Date): number {\n    const inicio = new Date(fecha.getFullYear(), 0, 1);\n    const diff = fecha.getTime() - inicio.getTime();\n    return Math.ceil((diff / 86400000 + inicio.getDay() + 1) / 7);\n  }\n\n  obtenerFechaLunes(): string {\n    const hoy = new Date();\n    const dia = hoy.getDay();\n    // Si es domingo despu√©s de las 15:00, mostrar la semana siguiente\n    if (dia === 0 && hoy.getHours() >= 15) {\n      const lunes = new Date(hoy);\n      lunes.setDate(hoy.getDate() + 1); // Lunes de la semana siguiente\n      lunes.setHours(0, 0, 0, 0);\n      return lunes.toISOString();\n    }\n    // Si no, mostrar la semana actual\n    const diff = hoy.getDate() - dia + (dia === 0 ? -6 : 1);\n    const lunes = new Date(hoy.setDate(diff));\n    lunes.setHours(0, 0, 0, 0);\n    return lunes.toISOString();\n  }\n\n  getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('No hay token de autenticaci√≥n');\n    }\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\n  }\n\n  async presentToast(message: string) {\n    const toast = await this.toastController.create({\n      message: message,\n      duration: 3000,\n      position: 'middle',\n      cssClass: 'custom-toast',\n      translucent: true\n    });\n    await toast.present();\n  }\n\n  async cargarClasesSemana() {\n    try {\n      // Obtener la fecha del lunes de la semana actual\n      const fechaLunes = this.obtenerFechaLunes();\n      console.log('=== FRONTEND DEBUG === Fecha lunes:', fechaLunes);\n\n      // Generar la semana actual\n      this.generarSemanaActual();\n\n      // Intentamos generar las clases de la semana\n      try {\n        const responseGeneracion = await this.http.post(\n          `${this.apiUrl}/clases/generar-semana?fecha=${fechaLunes}`,\n          {},\n          { headers: this.getHeaders() }\n        ).toPromise();\n        console.log('=== FRONTEND DEBUG === Clases generadas:', responseGeneracion);\n      } catch (error: any) {\n        console.error('Error al generar clases:', error);\n        // Si es un error 404, probablemente la ruta no est√° disponible en producci√≥n\n        if (error.status === 404) {\n          console.log('La ruta de generaci√≥n de clases no est√° disponible');\n        }\n      }\n\n      // Obtenemos las clases de la semana actual\n      const response: any = await this.http.get(\n        `${this.apiUrl}/clases/semana?fecha=${fechaLunes}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      console.log('=== FRONTEND DEBUG === Respuesta del servidor:', response);\n\n      if (response && response.clases) {\n        // Procesamos las clases de la semana actual\n        this.procesarClases(response.clases, []);\n\n        // Obtenemos las clases especiales (posteriores a la semana actual)\n        await this.cargarClasesEspeciales(fechaLunes);\n      } else {\n        console.error('Formato de respuesta inv√°lido:', response);\n        this.presentToast('Error al cargar las clases');\n      }\n    } catch (error) {\n      console.error('Error al cargar clases:', error);\n      this.presentToast('Error al cargar las clases');\n    }\n  }\n\n  async cargarClasesEspeciales(fechaLunes: string) {\n    try {\n      // Calculamos la fecha del fin de la semana actual\n      const fechaFinSemana = new Date(fechaLunes);\n      fechaFinSemana.setDate(fechaFinSemana.getDate() + 6);\n      fechaFinSemana.setHours(23, 59, 59, 999);\n\n      // Obtenemos las clases especiales (posteriores a la semana actual)\n      const response: any = await this.http.get(\n        `${this.apiUrl}/clases/especiales?fecha=${fechaFinSemana.toISOString()}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n\n      console.log('=== FRONTEND DEBUG === Clases especiales recibidas:', response);\n\n      if (response && response.clases) {\n        // Procesamos las clases especiales\n        this.procesarClasesEspeciales(response.clases);\n      }\n    } catch (error) {\n      console.error('Error al cargar clases especiales:', error);\n    }\n  }\n\n  procesarClasesEspeciales(clases: Clase[]) {\n    if (!clases || clases.length === 0) {\n      this.clasesEspeciales = [];\n      return;\n    }\n\n    // Agrupar las clases especiales por fecha\n    const clasesPorFecha = new Map<string, Clase[]>();\n    \n    clases.forEach(clase => {\n      const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n      const fechaStr = fecha.toISOString().split('T')[0];\n      \n      if (!clasesPorFecha.has(fechaStr)) {\n        clasesPorFecha.set(fechaStr, []);\n      }\n      clasesPorFecha.get(fechaStr)?.push(clase);\n    });\n\n    // Convertir el Map a un array de objetos con nombre y clases\n    this.clasesEspeciales = Array.from(clasesPorFecha.entries()).map(([fechaStr, clases]) => {\n      const fecha = new Date(fechaStr);\n      const diaSemana = this.obtenerDiaSemana(fecha);\n      const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n      const nombre = `${diaSemana} ${fecha.getDate()} ${meses[fecha.getMonth()]}`;\n      \n      // Ordenar las clases por hora de inicio\n      clases.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));\n      \n      return { nombre, clases };\n    });\n\n    // Ordenar las fechas\n    this.clasesEspeciales.sort((a, b) => {\n      const fechaA = new Date(a.nombre.split(' ')[1] + ' ' + a.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n      const fechaB = new Date(b.nombre.split(' ')[1] + ' ' + b.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n      return fechaA.getTime() - fechaB.getTime();\n    });\n\n    console.log('=== FRONTEND DEBUG === Clases especiales procesadas:', this.clasesEspeciales);\n  }\n\n  generarSemanaActual() {\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    \n    const hoy = new Date();\n    const diaSemana = hoy.getDay();\n    const ajuste = diaSemana === 0 ? -6 : 1 - diaSemana;\n    const fechaLunes = new Date(hoy);\n    fechaLunes.setDate(hoy.getDate() + ajuste);\n    \n    this.numeroSemana = this.getNumeroSemana(fechaLunes);\n    \n    this.diasSemana = [];\n    for (let i = 0; i < 7; i++) {\n      const fecha = new Date(fechaLunes);\n      fecha.setDate(fechaLunes.getDate() + i);\n      \n      this.diasSemana.push({\n        nombre: `${dias[fecha.getDay()]} ${fecha.getDate()} ${meses[fecha.getMonth()]}`,\n        clases: []\n      });\n    }\n  }\n\n  procesarClases(clases: Clase[], clasesEspeciales: Clase[]) {\n    // Inicializar el objeto de clases por d√≠a\n    this.clasesPorDia = {\n      'Lunes': [], 'Martes': [], 'Mi√©rcoles': [], 'Jueves': [],\n      'Viernes': [], 'S√°bado': [], 'Domingo': []\n    };\n\n    // Inicializar array de clases especiales\n    this.clasesEspeciales = [];\n\n    console.log('=== FRONTEND DEBUG === Procesando clases:', clases.length);\n    console.log('=== FRONTEND DEBUG === Procesando clases especiales:', clasesEspeciales?.length || 0);\n\n    // Obtener la fecha del lunes de la semana actual\n    const fechaLunes = new Date(this.obtenerFechaLunes());\n    const fechaFinSemana = new Date(fechaLunes);\n    fechaFinSemana.setDate(fechaLunes.getDate() + 6);\n    fechaFinSemana.setHours(23, 59, 59, 999);\n\n    // Procesar clases de la semana actual\n    clases.forEach(clase => {\n      // Asegurarnos de que fecha es un objeto Date\n      const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n      \n      // Si la fecha est√° dentro de la semana actual\n      if (fecha >= fechaLunes && fecha <= fechaFinSemana) {\n        const diaSemana = this.obtenerDiaSemana(fecha);\n        if (this.clasesPorDia[diaSemana]) {\n          this.clasesPorDia[diaSemana].push(clase);\n        }\n      }\n    });\n\n    // Procesar clases especiales futuras\n    if (clasesEspeciales && clasesEspeciales.length > 0) {\n      // Agrupar las clases especiales por fecha\n      const clasesPorFecha = new Map<string, Clase[]>();\n      \n      clasesEspeciales.forEach(clase => {\n        // Asegurarnos de que fecha es un objeto Date\n        const fecha = clase.fecha instanceof Date ? clase.fecha : new Date(clase.fecha);\n        \n        // Solo incluir clases futuras (despu√©s del fin de la semana actual)\n        if (fecha > fechaFinSemana) {\n          const fechaStr = fecha.toISOString().split('T')[0];\n          \n          if (!clasesPorFecha.has(fechaStr)) {\n            clasesPorFecha.set(fechaStr, []);\n          }\n          clasesPorFecha.get(fechaStr)?.push(clase);\n        }\n      });\n\n      // Convertir el Map a un array de objetos con nombre y clases\n      this.clasesEspeciales = Array.from(clasesPorFecha.entries()).map(([fechaStr, clases]) => {\n        const fecha = new Date(fechaStr);\n        const diaSemana = this.obtenerDiaSemana(fecha);\n        const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n        const nombre = `${diaSemana} ${fecha.getDate()} ${meses[fecha.getMonth()]}`;\n        \n        // Ordenar las clases por hora de inicio\n        clases.sort((a, b) => a.horaInicio.localeCompare(b.horaInicio));\n        \n        return { nombre, clases };\n      });\n\n      // Ordenar las fechas\n      this.clasesEspeciales.sort((a, b) => {\n        const fechaA = new Date(a.nombre.split(' ')[1] + ' ' + a.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n        const fechaB = new Date(b.nombre.split(' ')[1] + ' ' + b.nombre.split(' ')[2] + ' ' + new Date().getFullYear());\n        return fechaA.getTime() - fechaB.getTime();\n      });\n    }\n\n    // Ordenar las clases por hora de inicio en cada d√≠a\n    Object.keys(this.clasesPorDia).forEach(dia => {\n      this.clasesPorDia[dia].sort((a, b) => {\n        return a.horaInicio.localeCompare(b.horaInicio);\n      });\n    });\n\n    // Actualizar el array de d√≠as de la semana con la fecha completa\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    \n    this.diasSemana = Object.keys(this.clasesPorDia).map((dia, index) => {\n      const fecha = new Date(fechaLunes);\n      fecha.setDate(fechaLunes.getDate() + index);\n      const clasesDelDia = this.clasesPorDia[dia];\n      \n      return {\n        nombre: `${dia} ${fecha.getDate()} ${meses[fecha.getMonth()]}`,\n        clases: clasesDelDia\n      };\n    });\n\n    console.log('=== FRONTEND DEBUG === D√≠as de la semana:', this.diasSemana);\n    console.log('=== FRONTEND DEBUG === Clases especiales finales:', this.clasesEspeciales);\n  }\n\n  obtenerDiaSemana(fecha: Date): string {\n    const dias = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];\n    return dias[fecha.getDay()];\n  }\n\n  getMesNombre(mes: number): string {\n    const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    return meses[mes];\n  }\n\n  async reservarClase(claseId: string) {\n    try {\n      const endpoint = this.isAdminOrMaestro ? '/reservas/multiple' : '/reservas';\n      console.log('=== FRONTEND DEBUG === Iniciando reserva:', {\n        endpoint,\n        isAdminOrMaestro: this.isAdminOrMaestro,\n        claseId,\n        headers: this.getHeaders()\n      });\n\n      console.log('=== FRONTEND DEBUG === Enviando petici√≥n a:', `${this.apiUrl}${endpoint}`);\n      \n      const response = await this.http.post(\n        `${this.apiUrl}${endpoint}`,\n        { claseId },\n        { headers: this.getHeaders() }\n      ).toPromise();\n      \n      console.log('=== FRONTEND DEBUG === Respuesta del servidor:', response);\n      this.presentToast('Clase reservada correctamente');\n      this.cargarClasesSemana();\n    } catch (error: any) {\n      console.error('=== FRONTEND DEBUG === Error completo:', error);\n      console.error('=== FRONTEND DEBUG === Error status:', error.status);\n      console.error('=== FRONTEND DEBUG === Error message:', error.error);\n      console.error('=== FRONTEND DEBUG === Error headers:', error.headers);\n      this.presentToast(error.error?.message || 'Error al reservar la clase');\n    }\n  }\n\n  async cancelarReserva(reservaId: string) {\n    try {\n      const response = await this.http.delete(\n        `${this.apiUrl}/reservas/${reservaId}`,\n        { headers: this.getHeaders() }\n      ).toPromise();\n      \n      this.presentToast('Reserva cancelada correctamente');\n      // Recargar las clases para actualizar la interfaz\n      await this.cargarClasesSemana();\n    } catch (error: any) {\n      console.error('Error al cancelar:', error);\n      this.presentToast(error.error?.message || 'Error al cancelar la reserva');\n    }\n  }\n\n  tieneReserva(clase: any): boolean {\n    if (this.isAdminOrMaestro) {\n      return false; // Los maestros y admins siempre pueden reservar\n    }\n    return clase.reservas?.some((r: any) => r.atleta._id === this.userId) || false;\n  }\n\n  getReservaUsuario(clase: any): any {\n    if (this.isAdminOrMaestro) {\n      // Para admin/maestro, obtener la √∫ltima reserva que hizo en esta clase\n      return clase.reservas\n        ?.filter((r: any) => r.atleta._id === this.userId)\n        .sort((a: any, b: any) => new Date(b.fechaReserva).getTime() - new Date(a.fechaReserva).getTime())[0];\n    }\n    // Para usuarios normales, obtener su reserva\n    return clase.reservas?.find((r: any) => r.atleta._id === this.userId);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-background {\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent;\n}\n\n/* Logo cuadrado transl√∫cido centrado */\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.25;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.content-wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  z-index: 2;\n  position: relative;\n  background: transparent;\n}\n\n.header-section {\n  padding: 20px 16px;\n  background: transparent;\n  position: sticky;\n  top: 0;\n  z-index: 3;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.welcome-title {\n  text-align: center;\n  font-size: 26px;\n  font-weight: 800;\n  color: var(--ion-color-primary);\n  margin: 0 0 8px 0;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  text-shadow: \n    -1px -1px 0 #fff,\n    1px -1px 0 #fff,\n    -1px 1px 0 #fff,\n    1px 1px 0 #fff;\n}\n\n.semana-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 8px 0;\n  min-height: 32px;\n}\n\n.welcome-subtitle {\n  text-align: center;\n  font-size: 20px;\n  color: var(--ion-color-primary);\n  margin: 0;\n  font-weight: 700;\n  text-shadow: \n    -1px -1px 0 #fff,\n    1px -1px 0 #fff,\n    -1px 1px 0 #fff,\n    1px 1px 0 #fff;\n}\n\n.scroll-container {\n  flex: 1;\n  overflow-y: auto;\n  padding: 16px;\n  padding-bottom: 80px;\n  -webkit-overflow-scrolling: touch;\n}\n\n.dias-container {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding-bottom: 80px;\n}\n\n.clases-especiales-section {\n  margin-top: 24px;\n  padding: 0;\n  margin-bottom: 80px;\n\n  .welcome-subtitle {\n    margin-bottom: 16px;\n  }\n}\n\n.dia-card {\n  margin-bottom: 0;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  background: var(--ion-color-light);\n  \n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  ion-card-header {\n    background: var(--ion-color-primary);\n    border-radius: 12px 12px 0 0;\n    padding: 10px 16px;\n  }\n}\n\n.dia-titulo {\n  font-size: 1.1rem;\n  font-weight: 700;\n  color: var(--ion-color-light);\n  margin: 0;\n  text-align: center;\n}\n\n.clase-container {\n  background: white;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 16px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n  display: flex;\n  flex-direction: column;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n\n.clase-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 16px;\n}\n\n.clase-info {\n  flex: 1;\n}\n\n.clase-titulo {\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: var(--ion-color-dark);\n  margin: 0 0 4px 0;\n}\n\n.clase-horario {\n  font-size: 0.9rem;\n  color: var(--ion-color-medium);\n  margin: 0;\n}\n\n.instructor-info {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: 16px;\n}\n\n.instructor-foto {\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-bottom: 4px;\n}\n\n.instructor-nombre {\n  font-size: 0.8rem;\n  color: var(--ion-color-medium);\n  margin: 0;\n  text-align: center;\n}\n\n.plazas-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));\n  gap: 8px;\n  margin-bottom: 16px;\n  background: var(--ion-color-light);\n  padding: 12px;\n  border-radius: 8px;\n}\n\n.plaza {\n  aspect-ratio: 1;\n  border-radius: 50%;\n  overflow: hidden;\n  background: var(--ion-color-light-shade);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.atleta-foto {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.plaza-vacia {\n  width: 100%;\n  height: 100%;\n  background: var(--ion-color-light-shade);\n  border-radius: 50%;\n}\n\n.acciones-container {\n  display: flex;\n  justify-content: center;\n  gap: 8px;\n  margin-top: 16px;\n  width: 100%;\n\n  ion-button {\n    --background: var(--ion-color-primary);\n    --background-hover: var(--ion-color-primary-shade);\n    --background-activated: var(--ion-color-primary-shade);\n    --color: white;\n    --border-radius: 8px;\n    --box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    margin: 0;\n    width: auto;\n    height: auto;\n    position: static;\n    transform: none;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    padding: 12px 24px;\n  }\n}\n\n.no-clases {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 24px;\n  color: var(--ion-color-medium);\n  \n  ion-icon {\n    font-size: 48px;\n    margin-bottom: 8px;\n  }\n  \n  p {\n    margin: 0;\n    font-size: 1rem;\n  }\n}\n\nion-button {\n  --color: var(--ion-color-primary);\n  --background: transparent;\n  --box-shadow: none;\n  margin: 0;\n  padding: 0;\n  height: 24px;\n  width: 24px;\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  z-index: 4;\n\n  &:first-of-type {\n    left: 0;\n  }\n\n  &:last-of-type {\n    right: 0;\n  }\n}\n\nion-icon {\n  font-size: 24px;\n  color: var(--ion-color-primary);\n  text-shadow: \n    -1px -1px 0 #fff,\n    1px -1px 0 #fff,\n    -1px 1px 0 #fff,\n    1px 1px 0 #fff;\n}\n\n::ng-deep .custom-toast {\n  --background: #ffffff;\n  --border-radius: 8px;\n  --box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\n  --min-width: 280px;\n  --max-width: 90%;\n  --min-height: 56px;\n  --color: #000000;\n  --padding-start: 20px;\n  --padding-end: 20px;\n  --padding-top: 16px;\n  --padding-bottom: 16px;\n  --font-size: 16px;\n  --font-weight: 500;\n  --text-align: center;\n  --z-index: 9999;\n  position: fixed;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  margin: 0;\n  background: #ffffff !important;\n}\n\n::ng-deep .custom-toast .toast-wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  background: #ffffff !important;\n}\n\n::ng-deep .custom-toast .toast-message {\n  text-align: center;\n  width: 100%;\n  color: #000000;\n  font-weight: 500;\n  background: #ffffff !important;\n} ",
                    "styleUrl": "./reservas.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <div class=\"content-wrapper\">\n    <div class=\"header-section\">\n      <h1 class=\"welcome-title\">Reserva de Clases</h1>\n      <div class=\"semana-container\">\n        <h2 class=\"welcome-subtitle\">Semana {{ numeroSemana }}</h2>\n      </div>\n    </div>\n\n    <div class=\"scroll-container\">\n      <div class=\"dias-container\">\n        <ion-card *ngFor=\"let dia of diasSemana\" class=\"dia-card\">\n          <ion-card-header>\n            <ion-card-title class=\"dia-titulo\">\n              {{ dia.nombre }}\n            </ion-card-title>\n          </ion-card-header>\n\n          <ion-card-content>\n            <div class=\"no-clases\" *ngIf=\"dia.clases.length === 0\">\n              <ion-icon name=\"calendar-outline\"></ion-icon>\n              <p>No hay clases disponibles</p>\n            </div>\n\n            <div class=\"clase-container\" *ngFor=\"let clase of dia.clases\">\n              <div class=\"clase-header\">\n                <div class=\"clase-info\">\n                  <h3 class=\"clase-titulo\">{{ clase.titulo }}</h3>\n                  <p class=\"clase-horario\">{{ clase.horaInicio }} - {{ clase.horaFin }}</p>\n                </div>\n                <div class=\"instructor-info\">\n                  <img [src]=\"clase.instructor?.foto || 'assets/default-avatar.png'\" \n                       [alt]=\"clase.instructor?.nombre || 'Instructor'\"\n                       class=\"instructor-foto\">\n                  <p class=\"instructor-nombre\">{{ clase.instructor?.nombre || 'Instructor' }}</p>\n                </div>\n              </div>\n\n              <div class=\"plazas-container\">\n                <div class=\"plaza\" *ngFor=\"let reserva of clase.reservas\">\n                  <img [src]=\"reserva.atleta?.foto || 'assets/default-avatar.png'\" \n                       [alt]=\"reserva.atleta?.nombre || 'Atleta'\"\n                       class=\"atleta-foto\"\n                       (error)=\"reserva.atleta.foto = 'assets/default-avatar.png'\">\n                </div>\n                <div class=\"plaza\" *ngFor=\"let i of [].constructor(clase.maxPlazas - (clase.reservas?.length || 0))\">\n                  <div class=\"plaza-vacia\"></div>\n                </div>\n              </div>\n\n              <div class=\"acciones-container\">\n                <ion-button *ngIf=\"!tieneReserva(clase) && !isAdminOrMaestro\" \n                           (click)=\"reservarClase(clase._id)\"\n                           color=\"primary\">\n                  Reservar\n                </ion-button>\n                <ion-button *ngIf=\"tieneReserva(clase) && !isAdminOrMaestro\" \n                           (click)=\"cancelarReserva(getReservaUsuario(clase)?._id)\"\n                           color=\"danger\">\n                  Cancelar\n                </ion-button>\n                <div *ngIf=\"isAdminOrMaestro\" class=\"admin-buttons\">\n                  <ion-button (click)=\"reservarClase(clase._id)\"\n                             [disabled]=\"clase.reservas?.length >= clase.maxPlazas\"\n                             color=\"primary\">\n                    Reservar\n                  </ion-button>\n                  <ion-button *ngIf=\"getReservaUsuario(clase)\"\n                             (click)=\"cancelarReserva(getReservaUsuario(clase)?._id)\"\n                             color=\"danger\">\n                    Cancelar\n                  </ion-button>\n                </div>\n              </div>\n            </div>\n          </ion-card-content>\n        </ion-card>\n      </div>\n\n      <div *ngIf=\"clasesEspeciales && clasesEspeciales.length > 0\" class=\"clases-especiales-section\">\n        <h2 class=\"welcome-subtitle\">Clases Especiales</h2>\n        <div class=\"dias-container\">\n          <ion-card *ngFor=\"let dia of clasesEspeciales\" class=\"dia-card\">\n            <ion-card-header>\n              <ion-card-title class=\"dia-titulo\">\n                {{ dia.nombre }}\n              </ion-card-title>\n            </ion-card-header>\n\n            <ion-card-content>\n              <div class=\"clase-container\" *ngFor=\"let clase of dia.clases\">\n                <div class=\"clase-header\">\n                  <div class=\"clase-info\">\n                    <h3 class=\"clase-titulo\">{{ clase.titulo }}</h3>\n                    <p class=\"clase-horario\">{{ clase.horaInicio }} - {{ clase.horaFin }}</p>\n                  </div>\n                  <div class=\"instructor-info\">\n                    <img [src]=\"clase.instructor?.foto || 'assets/default-avatar.png'\" \n                         [alt]=\"clase.instructor?.nombre || 'Instructor'\"\n                         class=\"instructor-foto\">\n                    <p class=\"instructor-nombre\">{{ clase.instructor?.nombre || 'Instructor' }}</p>\n                  </div>\n                </div>\n\n                <div class=\"plazas-container\">\n                  <div class=\"plaza\" *ngFor=\"let reserva of clase.reservas\">\n                    <img [src]=\"reserva.atleta?.foto || 'assets/default-avatar.png'\" \n                         [alt]=\"reserva.atleta?.nombre || 'Atleta'\"\n                         class=\"atleta-foto\"\n                         (error)=\"reserva.atleta.foto = 'assets/default-avatar.png'\">\n                  </div>\n                  <div class=\"plaza\" *ngFor=\"let i of [].constructor(clase.maxPlazas - (clase.reservas?.length || 0))\">\n                    <div class=\"plaza-vacia\"></div>\n                  </div>\n                </div>\n\n                <div class=\"acciones-container\">\n                  <ion-button *ngIf=\"!tieneReserva(clase) && !isAdminOrMaestro\" \n                             (click)=\"reservarClase(clase._id)\"\n                             color=\"primary\">\n                    Reservar\n                  </ion-button>\n                  <ion-button *ngIf=\"tieneReserva(clase) && !isAdminOrMaestro\" \n                             (click)=\"cancelarReserva(getReservaUsuario(clase)?._id)\"\n                             color=\"danger\">\n                    Cancelar\n                  </ion-button>\n                  <div *ngIf=\"isAdminOrMaestro\" class=\"admin-buttons\">\n                    <ion-button (click)=\"reservarClase(clase._id)\"\n                               [disabled]=\"clase.reservas?.length >= clase.maxPlazas\"\n                               color=\"primary\">\n                      Reservar\n                    </ion-button>\n                    <ion-button *ngIf=\"getReservaUsuario(clase)\"\n                               (click)=\"cancelarReserva(getReservaUsuario(clase)?._id)\"\n                               color=\"danger\">\n                      Cancelar\n                    </ion-button>\n                  </div>\n                </div>\n              </div>\n            </ion-card-content>\n          </ion-card>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "ResetPasswordPage",
            "id": "component-ResetPasswordPage-07281d72a6ffed7e5088600d7aafef83b38444744349ea2de23d4703cccbafda2c28230319d73bb06a5196987dca047d3a4cf50301bf99d7c1c4f34005086d97",
            "file": "GiConnect/src/app/auth/reset-password/reset-password.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password",
            "styleUrls": [
                "./reset-password.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "codeVerified",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "resetPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "passwordMatchValidator",
                    "args": [
                        {
                            "name": "g",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ mismatch: boolean; }",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "g",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyCode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "IonicModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { ToastController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.page.html',\n  styleUrls: ['./reset-password.page.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    IonicModule\n  ]\n})\nexport class ResetPasswordPage implements OnInit {\n  resetPasswordForm: FormGroup;\n  loading = false;\n  email: string = '';\n  codeVerified = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    public router: Router,\n    private route: ActivatedRoute,\n    private toastController: ToastController\n  ) {\n    this.resetPasswordForm = this.fb.group({\n      code: ['', [Validators.required]],\n      newPassword: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', [Validators.required]]\n    }, { validator: this.passwordMatchValidator });\n  }\n\n  ngOnInit() {\n    this.email = this.route.snapshot.queryParams['email'];\n    if (!this.email) {\n      this.router.navigate(['/auth/forgot-password']);\n    }\n  }\n\n  passwordMatchValidator(g: FormGroup) {\n    return g.get('newPassword')?.value === g.get('confirmPassword')?.value\n      ? null : { mismatch: true };\n  }\n\n  verifyCode() {\n    if (this.resetPasswordForm.get('code')?.valid) {\n      this.loading = true;\n      const code = this.resetPasswordForm.get('code')?.value;\n\n      // Aqu√≠ podr√≠amos hacer una verificaci√≥n previa del c√≥digo\n      // Por ahora, simplemente marcamos como verificado\n      this.codeVerified = true;\n      this.loading = false;\n    }\n  }\n\n  onSubmit() {\n    if (this.resetPasswordForm.valid && this.codeVerified) {\n      this.loading = true;\n      const { code, newPassword } = this.resetPasswordForm.value;\n\n      this.authService.resetPassword(this.email, code, newPassword).subscribe({\n        next: (response) => {\n          this.loading = false;\n          this.router.navigate(['/auth/login']);\n        },\n        error: (error) => {\n          this.loading = false;\n          console.error('Error:', error);\n        }\n      });\n    }\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".reset-password-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  padding: 20px;\n}\n\n.reset-password-card {\n  background: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 400px;\n\n  h2 {\n    margin-bottom: 1rem;\n    color: #333;\n    text-align: center;\n  }\n\n  p {\n    color: #666;\n    margin-bottom: 2rem;\n    text-align: center;\n  }\n\n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n\n    mat-form-field {\n      width: 100%;\n    }\n\n    button {\n      width: 100%;\n      margin-top: 1rem;\n    }\n\n    a {\n      text-align: center;\n      margin-top: 1rem;\n    }\n  }\n}\n\n.password-fields {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  margin-top: 1rem;\n  opacity: 1;\n  transition: opacity 0.3s ease;\n\n  &.disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n}\n\n/* Contenedor ocupa todo el espacio disponible */\n.login-background {\n  position: relative;\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: transparent;\n}\n\n/* Logo cuadrado transl√∫cido centrado */\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n/* Card de login centrado */\n.login-card {\n  position: relative;\n  width: 90%;\n  max-width: 380px;\n  padding: 32px;\n  z-index: 2;\n  border-radius: 12px;\n  --background: transparent;\n  background: transparent;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n}\n\n/* T√≠tulo dentro del card */\n.card-title {\n  text-align: center;\n  margin-bottom: 16px;\n  color: var(--ion-color-primary);\n  font-size: 1.5rem;\n  font-weight: 600;\n}\n\n/* Subt√≠tulo */\n.card-subtitle {\n  text-align: center;\n  margin-bottom: 32px;\n  color: var(--ion-color-medium);\n  font-size: 1rem;\n}\n\n/* Contenedor del formulario */\nform {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n}\n\n/* Estilos de los ion-item para diferenciar del fondo */\nion-item {\n  --background: transparent;\n  background: transparent;\n  --border-color: var(--ion-color-light);\n  --border-radius: 8px;\n  --padding-start: 0;\n  --inner-padding-end: 0;\n  margin: 0 !important;\n\n  &.ion-invalid {\n    --border-color: var(--ion-color-danger);\n  }\n}\n\n/* Mensajes de error */\nion-note {\n  font-size: 0.8rem;\n  color: var(--ion-color-danger);\n  margin-top: 4px;\n}\n\n/* Bot√≥n Entrar */\nion-button {\n  margin-top: 24px;\n\n  &[disabled] {\n    opacity: 0.6;\n  }\n}\n\n/* Contenedor de enlaces */\n.links-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 24px;\n}\n\n/* Enlaces de registro y olvid√© contrase√±a */\n.forgot-password-link {\n  --color: var(--ion-color-medium);\n  font-size: 0.9rem;\n  text-decoration: none;\n}\n\n/* Campos de contrase√±a */\n.password-fields {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  opacity: 1;\n  transition: opacity 0.3s ease;\n\n  &.disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n} ",
                    "styleUrl": "./reset-password.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastController",
                        "type": "ToastController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-background\">\n  <!-- Logo cuadrado transl√∫cido de fondo -->\n  <div class=\"backdrop-logo\"></div>\n\n  <!-- Card de reset de contrase√±a centrado -->\n  <ion-card class=\"login-card\">\n    <h2 class=\"card-title\">Restablecer Contrase√±a</h2>\n    <p class=\"card-subtitle\">Se ha enviado un c√≥digo de seguridad a tu email, c√≥pialo aqu√≠</p>\n\n    <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onSubmit()\">\n      <ion-item>\n        <ion-label position=\"stacked\">C√≥digo de verificaci√≥n</ion-label>\n        <ion-input\n          type=\"text\"\n          formControlName=\"code\"\n          placeholder=\"123456\"\n        ></ion-input>\n      </ion-item>\n      <ion-note color=\"danger\" *ngIf=\"resetPasswordForm.get('code')?.hasError('required') && resetPasswordForm.get('code')?.touched\">\n        El c√≥digo es requerido\n      </ion-note>\n\n      <ion-button\n        expand=\"block\"\n        type=\"button\"\n        [disabled]=\"!resetPasswordForm.get('code')?.valid || loading\"\n        (click)=\"verifyCode()\"\n        class=\"login-button\"\n      >\n        <ion-spinner *ngIf=\"loading\" name=\"crescent\"></ion-spinner>\n        <span *ngIf=\"!loading\">Verificar c√≥digo</span>\n      </ion-button>\n\n      <div class=\"password-fields\" [class.disabled]=\"!codeVerified\">\n        <ion-item>\n          <ion-label position=\"stacked\">Contrase√±a nueva</ion-label>\n          <ion-input\n            type=\"password\"\n            formControlName=\"newPassword\"\n            autocomplete=\"new-password\"\n          ></ion-input>\n        </ion-item>\n        <ion-note color=\"danger\" *ngIf=\"resetPasswordForm.get('newPassword')?.hasError('required') && resetPasswordForm.get('newPassword')?.touched\">\n          La contrase√±a es requerida\n        </ion-note>\n        <ion-note color=\"danger\" *ngIf=\"resetPasswordForm.get('newPassword')?.hasError('minlength') && resetPasswordForm.get('newPassword')?.touched\">\n          La contrase√±a debe tener al menos 8 caracteres\n        </ion-note>\n\n        <ion-item>\n          <ion-label position=\"stacked\">Repetir contrase√±a</ion-label>\n          <ion-input\n            type=\"password\"\n            formControlName=\"confirmPassword\"\n            autocomplete=\"new-password\"\n          ></ion-input>\n        </ion-item>\n        <ion-note color=\"danger\" *ngIf=\"resetPasswordForm.get('confirmPassword')?.hasError('required') && resetPasswordForm.get('confirmPassword')?.touched\">\n          Debes repetir la contrase√±a\n        </ion-note>\n        <ion-note color=\"danger\" *ngIf=\"resetPasswordForm.hasError('mismatch') && resetPasswordForm.get('confirmPassword')?.touched\">\n          Las contrase√±as no coinciden\n        </ion-note>\n\n        <ion-button\n          expand=\"block\"\n          type=\"submit\"\n          [disabled]=\"!resetPasswordForm.valid || loading\"\n          class=\"login-button\"\n        >\n          <ion-spinner *ngIf=\"loading\" name=\"crescent\"></ion-spinner>\n          <span *ngIf=\"!loading\">Actualizar contrase√±a</span>\n        </ion-button>\n      </div>\n    </form>\n\n    <div class=\"links-container\">\n      <ion-button\n        fill=\"clear\"\n        (click)=\"router.navigate(['/auth/login'])\"\n        class=\"forgot-password-link\"\n      >\n        Volver al login\n      </ion-button>\n    </div>\n  </ion-card>\n</div> "
        },
        {
            "name": "SuscripcionesPage",
            "id": "component-SuscripcionesPage-1999ae8512caa8f6f181231800a077cd8912586de0dbccac673d9db60a4e5d9621fa416752bf3022bc640e7b379eacb3e62f831f95a65732a53c1f6195417932",
            "file": "GiConnect/src/app/pages/suscripciones/suscripciones.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: MAT_DATE_LOCALE, useValue:  }"
                },
                {
                    "name": "{ provide: MAT_DATE_FORMATS, useValue: DD_MM_YYYY_FORMAT }"
                }
            ],
            "selector": "app-suscripciones",
            "styleUrls": [
                "./suscripciones.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./suscripciones.page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentActionSheet",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLIonActionSheetElement | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAdminOrMaestro",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "platform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Platform",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "suscripcionesActivas",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Suscripcion[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "suscripcionForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "tiposSuscripcion",
                    "defaultValue": "TIPOS_SUSCRIPCION",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methodsClass": [
                {
                    "name": "checkUserRole",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSelectedTipoText",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleBackdropClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 382,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ionViewWillEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSuscripciones",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 392,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFechaInicioSelected",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "openPicker",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "openSubscriptionOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setupFormListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "IonicModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { TIPOS_SUSCRIPCION, TipoSuscripcion } from '../../constants/suscripciones';\nimport { AuthService } from '../../services/auth.service';\nimport { SuscripcionService } from '../../services/suscripcion.service';\nimport { formatDate, registerLocaleData } from '@angular/common';\nimport { Suscripcion, NuevaSuscripcion } from '../../interfaces/suscripcion.interface';\nimport { IonicModule, ModalController, Platform, PickerController, AlertController, ActionSheetController } from '@ionic/angular';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { addIcons } from 'ionicons';\nimport { timeOutline, calendarOutline, checkmarkCircle, cardOutline, addCircleOutline } from 'ionicons/icons';\nimport { Router } from '@angular/router';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule, MAT_DATE_LOCALE, DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport localeEs from '@angular/common/locales/es';\n\nregisterLocaleData(localeEs);\n\n// Define custom date formats\nexport const DD_MM_YYYY_FORMAT = {\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n\n@Component({\n  selector: 'app-suscripciones',\n  templateUrl: './suscripciones.page.html',\n  styleUrls: ['./suscripciones.page.scss'],\n  standalone: true,\n  imports: [\n    IonicModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatFormFieldModule,\n    MatInputModule\n  ],\n  providers: [\n    { provide: MAT_DATE_LOCALE, useValue: 'es-ES' },\n    // Use the custom date format\n    { provide: MAT_DATE_FORMATS, useValue: DD_MM_YYYY_FORMAT },\n  ]\n})\nexport class SuscripcionesPage implements OnInit, OnDestroy {\n  suscripcionesActivas: Suscripcion[] = [];\n  tiposSuscripcion = TIPOS_SUSCRIPCION;\n  suscripcionForm: FormGroup;\n  isAdminOrMaestro = false;\n  minDate: Date;\n  maxDate: Date;\n  public platform: Platform;\n  private currentActionSheet: HTMLIonActionSheetElement | null = null;\n  isLoading = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private suscripcionService: SuscripcionService,\n    private modalCtrl: ModalController,\n    platform: Platform,\n    private pickerCtrl: PickerController,\n    private alertController: AlertController,\n    private actionSheetCtrl: ActionSheetController\n  ) {\n    this.platform = platform;\n    const today = new Date();\n    this.minDate = today;\n    \n    const maxDate = new Date();\n    maxDate.setFullYear(maxDate.getFullYear() + 1);\n    this.maxDate = maxDate;\n\n    this.suscripcionForm = this.fb.group({\n      tipo: ['', Validators.required],\n      fechaInicio: [null, Validators.required],\n      precio: [{ value: '', disabled: true }],\n      fechaFin: [{ value: '', disabled: true }]\n    });\n    addIcons({ timeOutline, calendarOutline, checkmarkCircle, cardOutline, addCircleOutline });\n\n    // Configuraci√≥n espec√≠fica para iOS\n    if (this.platform.is('ios')) {\n      this.platform.ready().then(() => {\n        const select = document.querySelector('.custom-select');\n        if (select) {\n          select.setAttribute('interface', 'popover');\n        }\n      });\n    }\n  }\n\n  ngOnInit() {\n    this.resetForm();\n    this.setupFormListeners();\n    this.checkUserRole();\n  }\n\n  ionViewWillEnter() {\n    this.resetForm();\n    this.loadSuscripciones();\n  }\n\n  private resetForm() {\n    if (this.suscripcionForm) {\n      this.suscripcionForm.reset();\n      this.suscripcionForm.patchValue({\n        tipo: '',\n        fechaInicio: null,\n        precio: '',\n        fechaFin: ''\n      });\n    }\n  }\n\n  onFechaInicioSelected(event: any) {\n    if (event) {\n      this.suscripcionForm.get('fechaInicio')?.setValue(event);\n    }\n  }\n\n  private checkUserRole() {\n    const user = this.authService.getUser();\n    this.isAdminOrMaestro = user?.role === 'admin' || user?.role === 'maestro';\n  }\n\n  private setupFormListeners() {\n    this.suscripcionForm.get('tipo')?.valueChanges.subscribe(tipoId => {\n      const tipo = this.tiposSuscripcion.find(t => t.id === tipoId);\n      if (tipo) {\n        this.suscripcionForm.patchValue({\n          precio: tipo.precio\n        });\n      }\n    });\n\n    this.suscripcionForm.get('fechaInicio')?.valueChanges.subscribe(fechaInicio => {\n      const tipoId = this.suscripcionForm.get('tipo')?.value;\n      if (fechaInicio && tipoId) {\n        const tipo = this.tiposSuscripcion.find(t => t.id === tipoId);\n        if (tipo) {\n          const fechaFin = new Date(fechaInicio);\n          fechaFin.setMonth(fechaFin.getMonth() + tipo.meses);\n          this.suscripcionForm.patchValue({\n            fechaFin: fechaFin\n          });\n        }\n      }\n    });\n  }\n\n  private loadSuscripciones() {\n    if (!this.isAdminOrMaestro) {\n      this.suscripcionService.getSuscripcionesActivas().subscribe(\n        (suscripciones: Suscripcion[]) => {\n          this.suscripcionesActivas = suscripciones;\n        },\n        (error: any) => {\n          console.error('Error al cargar suscripciones:', error);\n        }\n      );\n    }\n  }\n\n  async onSubmit() {\n    console.log('Intentando enviar formulario...');\n    console.log('Formulario v√°lido:', this.suscripcionForm.valid);\n    console.log('Valores del formulario:', this.suscripcionForm.getRawValue());\n    \n    if (this.suscripcionForm.valid) {\n      this.isLoading = true;\n      const currentUser = this.authService.getUser();\n      \n      console.log('Usuario actual:', currentUser);\n      \n      if (!currentUser) {\n        this.isLoading = false;\n        const alert = await this.alertController.create({\n          header: 'Error',\n          message: 'Debes iniciar sesi√≥n para crear una suscripci√≥n',\n          buttons: []\n        });\n        \n        await alert.present();\n        \n        // Cerrar autom√°ticamente despu√©s de 3 segundos\n        setTimeout(() => {\n          alert.dismiss();\n        }, 3000);\n        return;\n      }\n\n      const formValue = this.suscripcionForm.getRawValue();\n      console.log('Valor del tipo seleccionado:', formValue.tipo);\n      console.log('Tipo de fechaInicio:', typeof formValue.fechaInicio);\n      console.log('Valor de fechaInicio:', formValue.fechaInicio);\n      console.log('Tipo de fechaFin:', typeof formValue.fechaFin);\n      console.log('Valor de fechaFin:', formValue.fechaFin);\n      console.log('Tipo de precio:', typeof formValue.precio);\n      console.log('Valor de precio:', formValue.precio);\n\n      // Asegurarnos de que las fechas son objetos Date v√°lidos\n      const fechaInicio = formValue.fechaInicio instanceof Date ? formValue.fechaInicio : new Date(formValue.fechaInicio);\n      const fechaFin = formValue.fechaFin instanceof Date ? formValue.fechaFin : new Date(formValue.fechaFin);\n\n      const suscripcionToCreate: NuevaSuscripcion = {\n        tipo: formValue.tipo,\n        fechaInicio: fechaInicio,\n        fechaFin: fechaFin,\n        precio: Number(formValue.precio),\n        atleta: currentUser._id,\n        pagado: true\n      };\n\n      console.log('Suscripci√≥n a crear:', suscripcionToCreate);\n\n      this.suscripcionService.createSuscripcion(suscripcionToCreate).subscribe({\n        next: async (response: Suscripcion) => {\n          console.log('Suscripci√≥n creada con √©xito:', response);\n          this.loadSuscripciones();\n          this.suscripcionForm.reset();\n          this.isLoading = false;\n          \n          // Mostrar mensaje de √©xito\n          const alert = await this.alertController.create({\n            header: '√âxito',\n            message: 'Suscripci√≥n creada correctamente',\n            buttons: []\n          });\n          \n          await alert.present();\n          \n          // Cerrar autom√°ticamente despu√©s de 3 segundos y navegar\n          setTimeout(() => {\n            alert.dismiss();\n            this.router.navigate(['/home']);\n          }, 3000);\n        },\n        error: async (error: any) => {\n          console.error('Error al crear suscripci√≥n:', error);\n          console.error('Detalles del error:', {\n            status: error.status,\n            message: error.error?.message,\n            error: error.error\n          });\n          this.isLoading = false;\n          \n          let errorMessage = 'No se pudo crear la suscripci√≥n. Por favor, int√©ntalo de nuevo.';\n          if (error.error?.message) {\n            errorMessage = error.error.message;\n          }\n          \n          // Si el error es por suscripci√≥n activa, mostrar un mensaje m√°s espec√≠fico\n          if (error.status === 400 && error.error?.message?.includes('Ya tienes una suscripci√≥n activa')) {\n            errorMessage = 'Ya tienes una suscripci√≥n activa. No puedes crear otra hasta que expire la actual.';\n          }\n          \n          const alert = await this.alertController.create({\n            header: 'Error',\n            message: errorMessage,\n            buttons: []\n          });\n          \n          await alert.present();\n          \n          // Cerrar autom√°ticamente despu√©s de 3 segundos\n          setTimeout(() => {\n            alert.dismiss();\n          }, 3000);\n        }\n      });\n    } else {\n      console.log('Errores del formulario:', this.suscripcionForm.errors);\n      console.log('Estado de los campos:', {\n        tipo: this.suscripcionForm.get('tipo')?.errors,\n        fechaInicio: this.suscripcionForm.get('fechaInicio')?.errors,\n        precio: this.suscripcionForm.get('precio')?.errors,\n        fechaFin: this.suscripcionForm.get('fechaFin')?.errors\n      });\n      \n      // Mostrar mensaje de error si el formulario no es v√°lido\n      const alert = await this.alertController.create({\n        header: 'Error',\n        message: 'Por favor, completa todos los campos requeridos correctamente',\n        buttons: []\n      });\n      \n      await alert.present();\n      \n      // Cerrar autom√°ticamente despu√©s de 3 segundos\n      setTimeout(() => {\n        alert.dismiss();\n      }, 3000);\n    }\n  }\n\n  async openPicker() {\n    if (this.platform.is('ios')) {\n      const picker = await this.pickerCtrl.create({\n        columns: [\n          {\n            name: 'tipo',\n            options: this.tiposSuscripcion.map(tipo => ({\n              text: `${tipo.nombre} - ${tipo.precio}‚Ç¨`,\n              value: tipo.id\n            }))\n          }\n        ],\n        buttons: [\n          {\n            text: 'Cancelar',\n            role: 'cancel'\n          },\n          {\n            text: 'Confirmar',\n            handler: (value) => {\n              this.suscripcionForm.get('tipo')?.setValue(value.tipo.value);\n            }\n          }\n        ]\n      });\n\n      await picker.present();\n    }\n  }\n\n  async openSubscriptionOptions() {\n    // Si ya hay un action-sheet abierto, lo cerramos primero\n    if (this.currentActionSheet) {\n      await this.currentActionSheet.dismiss();\n      this.currentActionSheet = null;\n      return;\n    }\n\n    const actionSheet = await this.actionSheetCtrl.create({\n      header: 'Tipo de Suscripci√≥n',\n      buttons: [\n        ...this.tiposSuscripcion.map(tipo => ({\n          text: `${tipo.nombre} - ${tipo.precio}‚Ç¨`,\n          handler: () => {\n            this.suscripcionForm.patchValue({ tipo: tipo.id });\n            this.currentActionSheet = null;\n          }\n        })),\n        {\n          text: 'Cancelar',\n          role: 'cancel',\n          handler: () => {\n            this.currentActionSheet = null;\n          }\n        }\n      ],\n      cssClass: 'custom-action-sheet'\n    });\n\n    // Guardamos la referencia al action-sheet actual\n    this.currentActionSheet = actionSheet;\n\n    // Cuando se cierre el action-sheet, limpiamos la referencia\n    actionSheet.onDidDismiss().then(() => {\n      this.currentActionSheet = null;\n    });\n\n    // Agregamos un listener para el backdrop\n    document.addEventListener('click', this.handleBackdropClick.bind(this));\n\n    await actionSheet.present();\n  }\n\n  private handleBackdropClick(event: MouseEvent) {\n    if (this.currentActionSheet) {\n      const target = event.target as HTMLElement;\n      if (target.classList.contains('action-sheet-backdrop')) {\n        this.currentActionSheet.dismiss();\n        this.currentActionSheet = null;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    // Limpiamos el listener cuando el componente se destruye\n    document.removeEventListener('click', this.handleBackdropClick.bind(this));\n  }\n\n  getSelectedTipoText(): string {\n    const tipoId = this.suscripcionForm.get('tipo')?.value;\n    const tipo = this.tiposSuscripcion.find(t => t.id === tipoId);\n    return tipo ? `${tipo.nombre} - ${tipo.precio}‚Ç¨` : '';\n  }\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n.login-background {\n  position: relative;\n  width: 100%;\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n  background: transparent;\n  padding: 10px 0;\n}\n\n.backdrop-logo {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url('/assets/logoCuadradoPNG.png');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  opacity: 0.15;\n  z-index: 1;\n  pointer-events: none;\n}\n\n.welcome-title {\n  text-align: center;\n  margin-top: 1rem;\n  font-size: 1.5rem;\n  color: #153ae0;\n  position: relative;\n  z-index: 2;\n}\n\n.profile-container {\n  background: rgba(255, 255, 255, 0.5);\n  border-radius: 15px;\n  padding: 20px;\n  margin: 10px auto;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  position: relative;\n  z-index: 2;\n  max-width: 600px;\n  width: 90%;\n  backdrop-filter: blur(8px);\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n.section-title {\n  color: #153ae0;\n  font-size: 1.2rem;\n  font-weight: bold;\n  margin: 20px 0 10px;\n  padding-bottom: 5px;\n  border-bottom: 2px solid #153ae0;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n\n  ion-icon {\n    font-size: 1.4rem;\n    color: #153ae0;\n    min-width: 24px;\n  }\n}\n\n.subscription-info {\n  background: rgba(21, 58, 224, 0.1);\n  padding: 10px;\n  border-radius: 8px;\n  margin: 10px 0;\n\n  ion-list {\n    background: transparent;\n    padding: 0;\n  }\n\n  ion-item {\n    --background: transparent;\n    --padding-start: 0;\n    --inner-padding-end: 0;\n    margin-bottom: 10px;\n\n    h3 {\n      color: #153ae0;\n      font-size: 0.9rem;\n      margin: 0;\n    }\n\n    p {\n      color: #333;\n      margin: 5px 0 0;\n      font-size: 1rem;\n    }\n  }\n\n  .subscription-type {\n    color: #153ae0;\n    font-size: 1.1rem;\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n  }\n\n  .subscription-dates {\n    p {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      color: #666;\n      margin: 0.3rem 0;\n\n      ion-icon {\n        color: #153ae0;\n      }\n    }\n  }\n\n  .subscription-status {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    margin-top: 0.5rem;\n    font-size: 0.9rem;\n    color: var(--ion-color-warning);\n\n    &.paid {\n      color: var(--ion-color-success);\n    }\n\n    ion-icon {\n      font-size: 1.2rem;\n    }\n  }\n}\n\n.subscription-form {\n  ion-list {\n    background: transparent;\n    padding: 0;\n  }\n\n  ion-item {\n    --background: transparent;\n    --padding-start: 0;\n    --inner-padding-end: 0;\n    margin-bottom: 10px;\n\n    h3 {\n      color: #153ae0;\n      font-size: 0.9rem;\n      margin: 0;\n    }\n\n    ion-input, ion-select, ion-datetime {\n      --padding-start: 0;\n      --padding-end: 0;\n      --color: #333;\n      font-size: 1rem;\n    }\n\n    ion-select {\n      --padding-end: 40px;\n      --padding-start: 16px;\n      --icon-margin-end: 0;\n      --icon-margin-start: 0;\n      --icon-color: #153ae0;\n      --icon-opacity: 1;\n      position: relative;\n      width: 100%;\n\n      &::part(icon) {\n        position: absolute;\n        right: 8px;\n        top: 50%;\n        transform: translateY(-50%);\n        margin: 0;\n      }\n    }\n  }\n\n  \n}\n\n/* Estilos espec√≠ficos para iOS */\n:host-context(.ios) {\n  .custom-select {\n    --padding-end: 40px;\n    --icon-margin-end: 0;\n    --icon-margin-start: 8px;\n    --icon-color: #153ae0;\n    --icon-opacity: 1;\n    position: relative;\n    \n    &::part(icon) {\n      position: absolute;\n      right: 8px;\n      top: 50%;\n      transform: translateY(-50%);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 20px;\n      height: 20px;\n    }\n  }\n}\n\n\n\n\n.custom-mat-field {\n  width: 100%;\n  margin: 0;\n  padding: 0;\n\n  ::ng-deep {\n    .mat-mdc-form-field-subscript-wrapper {\n      display: none;\n    }\n\n    .mat-mdc-form-field-infix {\n      padding: 0;\n      min-height: unset;\n    }\n\n    .mat-mdc-form-field-flex {\n      padding: 0;\n    }\n\n    .mat-mdc-text-field-wrapper {\n      background: transparent;\n      padding: 0;\n    }\n\n    .mat-mdc-form-field-icon-suffix {\n      color: var(--ion-color-primary);\n    }\n\n    .mat-mdc-form-field-icon-prefix {\n      color: var(--ion-color-primary);\n    }\n\n    .mat-mdc-input-element {\n      color: var(--ion-color-dark);\n      font-size: 1rem;\n      padding: 8px 0;\n    }\n\n    .mat-mdc-form-field-underline {\n      display: none;\n    }\n  }\n}\n\n// Estilos espec√≠ficos para iOS\n.ios {\n  ion-select {\n    --padding-end: 40px;\n    --icon-margin-end: 0;\n    --icon-margin-start: 0;\n    \n    &::part(icon) {\n      position: absolute;\n      right: 8px;\n      top: 50%;\n      transform: translateY(-50%);\n      margin: 0;\n    }\n  }\n}\n\n// Variables\n$primary-color: #153ae0;\n$border-color: rgba(0, 0, 0, 0.1);\n$text-color: #333;\n\n// Estilos comunes\n.custom-select {\n  --border-color: #153ae0;\n  --color: #153ae0;\n  --background: transparent;\n  margin: 0;\n  height: 48px;\n  font-size: 1rem;\n  text-align: left;\n  position: relative;\n  width: 100%;\n  padding-right: 40px;\n\n  &::after {\n    content: '';\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    border: 5px solid transparent;\n    border-top-color: #153ae0;\n  }\n}\n\n// Estilos del action-sheet\n::ng-deep {\n  .custom-action-sheet {\n    .action-sheet-wrapper {\n      margin: 0;\n      border-radius: 8px 8px 0 0;\n    }\n\n    .action-sheet-group {\n      .action-sheet-title {\n        font-size: 1.2rem;\n        font-weight: 600;\n        color: $primary-color;\n        padding: 16px;\n      }\n\n      .action-sheet-button {\n        font-size: 1.1rem;\n        color: $text-color;\n        padding: 16px;\n        border-bottom: 1px solid $border-color;\n        min-height: 56px;\n        display: flex;\n        align-items: center;\n      }\n\n      .action-sheet-cancel {\n        font-weight: 500;\n        color: $primary-color;\n        border-top: 1px solid $border-color;\n      }\n    }\n  }\n\n  .action-sheet-backdrop {\n    cursor: pointer;\n    --backdrop-opacity: 0.4;\n  }\n} ",
                    "styleUrl": "./suscripciones.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "suscripcionService",
                        "type": "SuscripcionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pickerCtrl",
                        "type": "PickerController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actionSheetCtrl",
                        "type": "ActionSheetController",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "suscripcionService",
                        "type": "SuscripcionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalCtrl",
                        "type": "ModalController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platform",
                        "type": "Platform",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pickerCtrl",
                        "type": "PickerController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertController",
                        "type": "AlertController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actionSheetCtrl",
                        "type": "ActionSheetController",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"login-background\">\n  <div class=\"backdrop-logo\"></div>\n\n  <div class=\"ion-padding\">\n    <div class=\"profile-container\">\n      <h2 class=\"welcome-title\">Suscripciones</h2>\n      \n      <!-- Secci√≥n de suscripciones activas -->\n      <div class=\"section-title\" *ngIf=\"!isAdminOrMaestro\">\n        <ion-icon name=\"time-outline\"></ion-icon>\n        Mis Suscripciones\n      </div>\n\n      <div class=\"subscription-info\" *ngIf=\"!isAdminOrMaestro && suscripcionesActivas.length > 0\">\n        <ion-list>\n          <ion-item *ngFor=\"let suscripcion of suscripcionesActivas\" class=\"subscription-item\">\n            <ion-label>\n              <h3 class=\"subscription-type\">{{ suscripcion.tipo | titlecase }}</h3>\n              <div class=\"subscription-dates\">\n                <p><ion-icon name=\"calendar-outline\"></ion-icon> Inicio: {{ suscripcion.fechaInicio | date:'dd/MM/yyyy':'es-ES' }}</p>\n                <p><ion-icon name=\"calendar-outline\"></ion-icon> Fin: {{ suscripcion.fechaFin | date:'dd/MM/yyyy':'es-ES' }}</p>\n              </div>\n              <div class=\"subscription-status\" [class.paid]=\"suscripcion.pagado\">\n                <ion-icon [name]=\"suscripcion.pagado ? 'checkmark-circle' : 'time'\"></ion-icon>\n                {{ suscripcion.pagado ? 'Pagado' : 'Pendiente de pago' }}\n              </div>\n            </ion-label>\n          </ion-item>\n        </ion-list>\n      </div>\n\n      <div class=\"subscription-info\" *ngIf=\"!isAdminOrMaestro && suscripcionesActivas.length === 0\">\n        <p>Sin suscripciones activas</p>\n      </div>\n\n      <!-- Formulario de nueva suscripci√≥n -->\n      <div class=\"section-title\" *ngIf=\"!isAdminOrMaestro\">\n        <ion-icon name=\"add-circle-outline\" class=\"section-icon\"></ion-icon>\n        Nueva Suscripci√≥n\n      </div>\n\n      <div class=\"subscription-form\" *ngIf=\"!isAdminOrMaestro\">\n        <form [formGroup]=\"suscripcionForm\" (ngSubmit)=\"onSubmit()\">\n          <ion-list>\n            <ion-item>\n              <ion-label>\n                <h3>Tipo de Suscripci√≥n</h3>\n                <ion-button \n                  expand=\"block\" \n                  fill=\"outline\" \n                  class=\"custom-select\"\n                  (click)=\"openSubscriptionOptions()\">\n                  {{ getSelectedTipoText() || 'Selecciona un tipo' }}\n                </ion-button>\n              </ion-label>\n            </ion-item>\n\n            <ion-item>\n              <ion-label>\n                <h3>Precio</h3>\n                <ion-input formControlName=\"precio\" type=\"number\" readonly>\n                  <span slot=\"end\">‚Ç¨</span>\n                </ion-input>\n              </ion-label>\n            </ion-item>\n\n            <div class=\"form-group\">\n              <ion-label position=\"stacked\">Fecha de Inicio</ion-label>\n              <ion-item class=\"custom-input\">\n                <mat-form-field appearance=\"fill\" class=\"custom-mat-field\">\n                  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                  <mat-datepicker #picker></mat-datepicker>\n                  <input matInput\n                    [matDatepicker]=\"picker\"\n                    formControlName=\"fechaInicio\"\n                    [min]=\"minDate\"\n                    [max]=\"maxDate\"\n                    (dateChange)=\"onFechaInicioSelected($event.value)\"\n                    [value]=\"suscripcionForm.get('fechaInicio')?.value | date:'dd/MM/yyyy':'es-ES'\"\n                    placeholder=\"Selecciona una fecha\">\n                </mat-form-field>\n              </ion-item>\n            </div>\n\n            <div class=\"form-group\">\n              <ion-label position=\"stacked\">Fecha de Fin</ion-label>\n              <ion-item class=\"custom-input\">\n                <mat-form-field appearance=\"fill\" class=\"custom-mat-field\">\n                  <mat-datepicker-toggle matSuffix [for]=\"pickerFin\"></mat-datepicker-toggle>\n                  <mat-datepicker #pickerFin></mat-datepicker>\n                  <input matInput\n                    [matDatepicker]=\"pickerFin\"\n                    formControlName=\"fechaFin\"\n                    [min]=\"minDate\"\n                    [max]=\"maxDate\"\n                    readonly\n                    [value]=\"suscripcionForm.get('fechaFin')?.value | date:'dd/MM/yyyy':'es-ES'\"\n                    placeholder=\"Se calcular√° autom√°ticamente\">\n                </mat-form-field>\n              </ion-item>\n            </div>\n          </ion-list>\n\n          <div class=\"profile-actions\">\n            <ion-button \n              expand=\"block\" \n              type=\"submit\" \n              [disabled]=\"!suscripcionForm.valid || isLoading\" \n              style=\"display: flex; align-items: center; justify-content: center;\">\n              <ion-icon name=\"card-outline\" slot=\"start\"></ion-icon>\n              <span style=\"display: flex; align-items: center;\">\n                <ion-spinner *ngIf=\"isLoading\" name=\"crescent\" style=\"margin-right: 8px;\"></ion-spinner>\n                Pagar Suscripci√≥n\n              </span>\n            </ion-button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div> "
        }
    ],
    "modules": [
        {
            "name": "AuthModule",
            "id": "module-AuthModule-57724298ba26044ff4b488d459a2acdcc22b094d64e959f24378c5f049d765eb5c3c048bc49d472ba38d12d05ebd1044030c7a45f47a25e12d2d4b2d8bed114a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "GiConnect/src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPage } from './login/login.page';\nimport { RegisterPage } from './register/register.page';\nimport { ForgotPasswordPage } from './forgot-password/forgot-password.page';\nimport { ResetPasswordPage } from './reset-password/reset-password.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    IonicModule,\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    ResetPasswordPage\n  ]\n})\nexport class AuthModule { } ",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ForgotPasswordPage"
                        },
                        {
                            "name": "LoginPage"
                        },
                        {
                            "name": "RegisterPage"
                        },
                        {
                            "name": "ResetPasswordPage"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "analytics",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/firebase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getAnalytics(app)"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/firebase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "initializeApp(firebaseConfig)"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "initializeApp(environment.firebaseConfig)"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/app/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\n  const router = inject(Router);\n  const authService = inject(AuthService);\n\n  const token = localStorage.getItem('token');\n  const user = localStorage.getItem('user');\n\n  if (token && user) {\n    // Si hay token y usuario, permitir el acceso\n    return true;\n  } else {\n    // Si no hay token o usuario, redirigir a login\n    router.navigate(['/auth/login']);\n    return false;\n  }\n}"
            },
            {
                "name": "CINTURONES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'Blanco', 'Gris', 'Blanco-Amarillo', 'Amarillo', 'Amarillo-Naranja',\n  'Naranja', 'Naranja-Verde', 'Verde', 'Verde-Azul', 'Azul', 'Morado',\n  'Marr√≥n', 'Negro', 'Negro-Rojo', 'Rojo-Blanco', 'Rojo'\n]"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/capacitor.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CapacitorConfig",
                "defaultValue": "{\n  appId: 'io.ionic.starter',\n  appName: 'GiConnect',\n  webDir: 'www',\n  server: {\n    androidScheme: 'http',\n    iosScheme: 'http',\n    cleartext: true,\n    allowNavigation: [\n      'http://10.0.2.2:4000',\n      'http://localhost:4000',\n      'http://192.168.1.252:4000',\n      'http://localhost:8100',\n      'http://192.168.1.252:8100',\n      'http://localhost:4200',\n      'http://192.168.1.252:4200'\n    ]\n  },\n  android: {\n    allowMixedContent: true,\n    captureInput: true,\n    webContentsDebuggingEnabled: true\n  },\n  ios: {\n    allowsLinkPreview: true,\n    contentInset: 'always',\n    scrollEnabled: true\n  }\n}"
            },
            {
                "name": "database",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getDatabase(app)"
            },
            {
                "name": "DD_MM_YYYY_FORMAT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/app/pages/crear-clase/crear-clase.page.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
            },
            {
                "name": "DD_MM_YYYY_FORMAT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/app/pages/suscripciones/suscripciones.page.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
            },
            {
                "name": "DD_MM_YYYY_FORMAT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/environments/environment.android.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'https://giconnect-production.up.railway.app/api',\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'http://localhost:8102',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'http://192.168.1.252:4000',\n    'http://192.168.1.252:8102',\n    'http://10.0.2.2:4000',\n    'http://10.0.2.2:8100',\n    'http://10.0.2.2:4200',\n    'http://10.0.2.2:8102',\n    'https://giconnect-production.up.railway.app'\n  ]\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/environments/environment.ios.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'https://giconnect-production.up.railway.app/api',\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'http://localhost:8102',\n    'http://localhost:8101',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'http://192.168.1.252:4000',\n    'http://192.168.1.252:8102',\n    'http://192.168.1.252:8101',\n    'http://10.0.2.2:4000',\n    'http://10.0.2.2:8100',\n    'http://10.0.2.2:4200',\n    'http://10.0.2.2:8102',\n    'http://10.0.2.2:8101',\n    'https://giconnect-production.up.railway.app'\n  ],\n  firebaseConfig: {\n    apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n    authDomain: \"giconnect-36d94.firebaseapp.com\",\n    databaseURL: \"https://giconnect-36d94-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"giconnect-36d94\",\n    storageBucket: \"giconnect-36d94.firebasestorage.app\",\n    messagingSenderId: \"428486646092\",\n    appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n    measurementId: \"G-1FX12BTWVW\"\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: 'https://giconnect-production.up.railway.app/api',\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'https://giconnect-production.up.railway.app'\n  ],\n  firebaseConfig: {\n    apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n    authDomain: \"giconnect-36d94.firebaseapp.com\",\n    databaseURL: \"https://giconnect-36d94-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"giconnect-36d94\",\n    storageBucket: \"giconnect-36d94.firebasestorage.app\",\n    messagingSenderId: \"428486646092\",\n    appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n    measurementId: \"G-1FX12BTWVW\"\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: getBaseUrl(),\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'http://192.168.1.252:4000',\n    'http://10.0.2.2:4000',\n    'http://10.0.2.2:8100',\n    'http://10.0.2.2:4200'\n  ],\n  firebaseConfig: {\n    apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n    authDomain: \"giconnect-36d94.firebaseapp.com\",\n    databaseURL: \"https://giconnect-36d94-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"giconnect-36d94\",\n    storageBucket: \"giconnect-36d94.firebasestorage.app\",\n    messagingSenderId: \"428486646092\",\n    appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n    measurementId: \"G-1FX12BTWVW\"\n  } as FirebaseConfig\n}"
            },
            {
                "name": "firebaseConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/firebase.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n  authDomain: \"giconnect-36d94.firebaseapp.com\",\n  projectId: \"giconnect-36d94\",\n  storageBucket: \"giconnect-36d94.firebasestorage.app\",\n  messagingSenderId: \"428486646092\",\n  appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n  measurementId: \"G-1FX12BTWVW\"\n}"
            },
            {
                "name": "GRADOS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[0, 1, 2, 3, 4]"
            },
            {
                "name": "TIPOS_SUSCRIPCION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "GiConnect/src/app/constants/suscripciones.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TipoSuscripcion[]",
                "defaultValue": "[\n  {\n    id: 'mensual',\n    nombre: 'Mensual',\n    precio: 50.00,\n    meses: 1\n  },\n  {\n    id: 'trimestral',\n    nombre: 'Trimestral',\n    precio: 125.00,\n    meses: 3\n  },\n  {\n    id: 'semestral',\n    nombre: 'Semestral',\n    precio: 255.00,\n    meses: 6\n  },\n  {\n    id: 'anual',\n    nombre: 'Anual',\n    precio: 510.00,\n    meses: 12\n  }\n]"
            }
        ],
        "functions": [
            {
                "name": "getBaseUrl",
                "file": "GiConnect/src/environments/environment.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "GiConnect/src/firebase.ts": [
                {
                    "name": "analytics",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/firebase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getAnalytics(app)"
                },
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/firebase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "initializeApp(firebaseConfig)"
                },
                {
                    "name": "firebaseConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/firebase.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n  authDomain: \"giconnect-36d94.firebaseapp.com\",\n  projectId: \"giconnect-36d94\",\n  storageBucket: \"giconnect-36d94.firebasestorage.app\",\n  messagingSenderId: \"428486646092\",\n  appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n  measurementId: \"G-1FX12BTWVW\"\n}"
                }
            ],
            "GiConnect/src/main.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "initializeApp(environment.firebaseConfig)"
                },
                {
                    "name": "database",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getDatabase(app)"
                }
            ],
            "GiConnect/src/app/guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/app/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\n  const router = inject(Router);\n  const authService = inject(AuthService);\n\n  const token = localStorage.getItem('token');\n  const user = localStorage.getItem('user');\n\n  if (token && user) {\n    // Si hay token y usuario, permitir el acceso\n    return true;\n  } else {\n    // Si no hay token o usuario, redirigir a login\n    router.navigate(['/auth/login']);\n    return false;\n  }\n}"
                }
            ],
            "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts": [
                {
                    "name": "CINTURONES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'Blanco', 'Gris', 'Blanco-Amarillo', 'Amarillo', 'Amarillo-Naranja',\n  'Naranja', 'Naranja-Verde', 'Verde', 'Verde-Azul', 'Azul', 'Morado',\n  'Marr√≥n', 'Negro', 'Negro-Rojo', 'Rojo-Blanco', 'Rojo'\n]"
                },
                {
                    "name": "DD_MM_YYYY_FORMAT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
                },
                {
                    "name": "GRADOS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[0, 1, 2, 3, 4]"
                }
            ],
            "GiConnect/capacitor.config.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/capacitor.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CapacitorConfig",
                    "defaultValue": "{\n  appId: 'io.ionic.starter',\n  appName: 'GiConnect',\n  webDir: 'www',\n  server: {\n    androidScheme: 'http',\n    iosScheme: 'http',\n    cleartext: true,\n    allowNavigation: [\n      'http://10.0.2.2:4000',\n      'http://localhost:4000',\n      'http://192.168.1.252:4000',\n      'http://localhost:8100',\n      'http://192.168.1.252:8100',\n      'http://localhost:4200',\n      'http://192.168.1.252:4200'\n    ]\n  },\n  android: {\n    allowMixedContent: true,\n    captureInput: true,\n    webContentsDebuggingEnabled: true\n  },\n  ios: {\n    allowsLinkPreview: true,\n    contentInset: 'always',\n    scrollEnabled: true\n  }\n}"
                }
            ],
            "GiConnect/src/app/pages/crear-clase/crear-clase.page.ts": [
                {
                    "name": "DD_MM_YYYY_FORMAT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/app/pages/crear-clase/crear-clase.page.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
                }
            ],
            "GiConnect/src/app/pages/suscripciones/suscripciones.page.ts": [
                {
                    "name": "DD_MM_YYYY_FORMAT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/app/pages/suscripciones/suscripciones.page.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  parse: {\n    dateInput: 'DD/MM/YYYY',\n  },\n  display: {\n    dateInput: 'DD/MM/YYYY',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n}"
                }
            ],
            "GiConnect/src/environments/environment.android.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/environments/environment.android.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'https://giconnect-production.up.railway.app/api',\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'http://localhost:8102',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'http://192.168.1.252:4000',\n    'http://192.168.1.252:8102',\n    'http://10.0.2.2:4000',\n    'http://10.0.2.2:8100',\n    'http://10.0.2.2:4200',\n    'http://10.0.2.2:8102',\n    'https://giconnect-production.up.railway.app'\n  ]\n}"
                }
            ],
            "GiConnect/src/environments/environment.ios.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/environments/environment.ios.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'https://giconnect-production.up.railway.app/api',\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'http://localhost:8102',\n    'http://localhost:8101',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'http://192.168.1.252:4000',\n    'http://192.168.1.252:8102',\n    'http://192.168.1.252:8101',\n    'http://10.0.2.2:4000',\n    'http://10.0.2.2:8100',\n    'http://10.0.2.2:4200',\n    'http://10.0.2.2:8102',\n    'http://10.0.2.2:8101',\n    'https://giconnect-production.up.railway.app'\n  ],\n  firebaseConfig: {\n    apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n    authDomain: \"giconnect-36d94.firebaseapp.com\",\n    databaseURL: \"https://giconnect-36d94-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"giconnect-36d94\",\n    storageBucket: \"giconnect-36d94.firebasestorage.app\",\n    messagingSenderId: \"428486646092\",\n    appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n    measurementId: \"G-1FX12BTWVW\"\n  }\n}"
                }
            ],
            "GiConnect/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: 'https://giconnect-production.up.railway.app/api',\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'https://giconnect-production.up.railway.app'\n  ],\n  firebaseConfig: {\n    apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n    authDomain: \"giconnect-36d94.firebaseapp.com\",\n    databaseURL: \"https://giconnect-36d94-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"giconnect-36d94\",\n    storageBucket: \"giconnect-36d94.firebasestorage.app\",\n    messagingSenderId: \"428486646092\",\n    appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n    measurementId: \"G-1FX12BTWVW\"\n  }\n}"
                }
            ],
            "GiConnect/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: getBaseUrl(),\n  allowedOrigins: [\n    'http://localhost',\n    'http://localhost:8100',\n    'http://localhost:4200',\n    'capacitor://localhost',\n    'http://192.168.1.252:8100',\n    'http://192.168.1.252:4200',\n    'http://192.168.1.252:4000',\n    'http://10.0.2.2:4000',\n    'http://10.0.2.2:8100',\n    'http://10.0.2.2:4200'\n  ],\n  firebaseConfig: {\n    apiKey: \"AIzaSyCA1l-x6AhsovfkRi68jH6G_BP9S9UZtXU\",\n    authDomain: \"giconnect-36d94.firebaseapp.com\",\n    databaseURL: \"https://giconnect-36d94-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"giconnect-36d94\",\n    storageBucket: \"giconnect-36d94.firebasestorage.app\",\n    messagingSenderId: \"428486646092\",\n    appId: \"1:428486646092:web:edaeba3e24cb0ce82657e9\",\n    measurementId: \"G-1FX12BTWVW\"\n  } as FirebaseConfig\n}"
                }
            ],
            "GiConnect/src/app/constants/suscripciones.ts": [
                {
                    "name": "TIPOS_SUSCRIPCION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "GiConnect/src/app/constants/suscripciones.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TipoSuscripcion[]",
                    "defaultValue": "[\n  {\n    id: 'mensual',\n    nombre: 'Mensual',\n    precio: 50.00,\n    meses: 1\n  },\n  {\n    id: 'trimestral',\n    nombre: 'Trimestral',\n    precio: 125.00,\n    meses: 3\n  },\n  {\n    id: 'semestral',\n    nombre: 'Semestral',\n    precio: 255.00,\n    meses: 6\n  },\n  {\n    id: 'anual',\n    nombre: 'Anual',\n    precio: 510.00,\n    meses: 12\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {
            "GiConnect/src/environments/environment.ts": [
                {
                    "name": "getBaseUrl",
                    "file": "GiConnect/src/environments/environment.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "GiConnect/capacitor.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/auth/forgot-password/forgot-password.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordPage",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/auth/login/login.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPage",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/auth/register/register.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterPage",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/auth/reset-password/reset-password.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordPage",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/components/instructor-popover/instructor-popover.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InstructorPopoverComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/constants/suscripciones.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TipoSuscripcion",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/constants/suscripciones.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIPOS_SUSCRIPCION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/interfaces/suscripcion.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NuevaSuscripcion",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/interfaces/suscripcion.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Suscripcion",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/interfaces/suscripcion.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TipoSuscripcion",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/interfaces/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/chat/chat.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatPage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/crear-clase/crear-clase.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "CrearClasePage",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/crear-clase/crear-clase.page.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DD_MM_YYYY_FORMAT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/home/home.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/mestre-portal/mestre-portal.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "MestrePortalPage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditarUsuarioPage",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CINTURONES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DD_MM_YYYY_FORMAT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/modificar-usuario/editar-usuario/editar-usuario.page.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GRADOS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/modificar-usuario/modificar-usuario.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModificarUsuarioPage",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/modificar-usuario/modificar-usuario.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Usuario",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/pasar-lista/pasar-lista.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasarListaPage",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/pasar-lista/pasar-lista.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Atleta",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/pasar-lista/pasar-lista.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Clase",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/pasar-lista/pasar-lista.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Reserva",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/perfil/perfil.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "PerfilPage",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/perfil/perfil.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Subscription",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/perfil/perfil.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserData",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/prueba/prueba.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "PruebaPage",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/reservas/reservas.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReservasPage",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/reservas/reservas.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Clase",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/reservas/reservas.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DiaSemana",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/reservas/reservas.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Reserva",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/suscripciones/suscripciones.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SuscripcionesPage",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/pages/suscripciones/suscripciones.page.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DD_MM_YYYY_FORMAT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/chat.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChatService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/chat.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChatMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/clase.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ClaseService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/clase.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmarAsistenciaData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/suscripcion.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SuscripcionService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/user-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserStateService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/app/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/environments/environment.android.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/environments/environment.ios.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/environments/environment.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirebaseConfig",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/environments/environment.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getBaseUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/firebase.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "analytics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/firebase.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/firebase.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "GiConnect/src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "database",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}